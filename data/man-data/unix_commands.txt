COMMAND: ls
LS(1)                                               User Commands                                               LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List  information  about the FILEs (the current directory by default).  Sort entries alphabetically if none of
       -cftuvSUX nor --sort is specified.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
              with -l, print the author of each file

       -b, --escape
              print C-style escapes for nongraphic characters

       --block-size=SIZE
              with -l, scale sizes by SIZE when printing them; e.g., '--block-size=M'; see SIZE format below

       -B, --ignore-backups
              do not list implied entries ending with ~

       -c     with -lt: sort by, and show, ctime (time of last modification of file  status  information);  with  -l:
              show ctime and sort by name; otherwise: sort by ctime, newest first

       -C     list entries by columns

       --color[=WHEN]
              colorize the output; WHEN can be 'always' (default if omitted), 'auto', or 'never'; more info below

       -d, --directory
              list directories themselves, not their contents

       -D, --dired
              generate output designed for Emacs' dired mode

       -f     do not sort, enable -aU, disable -ls --color

       -F, --classify
              append indicator (one of */=>@|) to entries

       --file-type
              likewise, except do not append '*'

       --format=WORD
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l, vertical -C

       --full-time
              like -l --time-style=full-iso

       -g     like -l, but do not list owner

       --group-directories-first
              group directories before files;

              can be augmented with a --sort option, but any use of --sort=none (-U) disables grouping

       -G, --no-group
              in a long listing, don't print group names

       -h, --human-readable
              with -l and -s, print sizes like 1K 234M 2G etc.

       --si   likewise, but use powers of 1000 not 1024

       -H, --dereference-command-line
              follow symbolic links listed on the command line

       --dereference-command-line-symlink-to-dir
              follow each command line symbolic link

              that points to a directory

       --hide=PATTERN
              do not list implied entries matching shell PATTERN (overridden by -a or -A)

       --hyperlink[=WHEN]
              hyperlink file names; WHEN can be 'always' (default if omitted), 'auto', or 'never'

       --indicator-style=WORD
              append  indicator  with style WORD to entry names: none (default), slash (-p), file-type (--file-type),
              classify (-F)

       -i, --inode
              print the index number of each file

       -I, --ignore=PATTERN
              do not list implied entries matching shell PATTERN

       -k, --kibibytes
              default to 1024-byte blocks for disk usage; used only with -s and per directory totals

       -l     use a long listing format

       -L, --dereference
              when showing file information for a symbolic link, show information for the file  the  link  references
              rather than for the link itself

       -m     fill width with a comma separated list of entries

       -n, --numeric-uid-gid
              like -l, but list numeric user and group IDs

       -N, --literal
              print entry names without quoting

       -o     like -l, but do not list group information

       -p, --indicator-style=slash
              append / indicator to directories

       -q, --hide-control-chars
              print ? instead of nongraphic characters

       --show-control-chars
              show nongraphic characters as-is (the default, unless program is 'ls' and output is a terminal)

       -Q, --quote-name
              enclose entry names in double quotes

       --quoting-style=WORD
              use  quoting  style WORD for entry names: literal, locale, shell, shell-always, shell-escape, shell-es‐
              cape-always, c, escape (overrides QUOTING_STYLE environment variable)

       -r, --reverse
              reverse order while sorting

       -R, --recursive
              list subdirectories recursively

       -s, --size
              print the allocated size of each file, in blocks

       -S     sort by file size, largest first

       --sort=WORD
              sort by WORD instead of name: none (-U), size (-S), time (-t), version (-v), extension (-X)

       --time=WORD
              change the default of using modification times; access time (-u): atime, access, use; change time (-c):
              ctime, status; birth time: birth, creation;

              with -l, WORD determines which time to show; with --sort=time, sort by WORD (newest first)

       --time-style=TIME_STYLE
              time/date format with -l; see TIME_STYLE below

       -t     sort by time, newest first; see --time

       -T, --tabsize=COLS
              assume tab stops at each COLS instead of 8

       -u     with  -lt:  sort by, and show, access time; with -l: show access time and sort by name; otherwise: sort
              by access time, newest first

       -U     do not sort; list entries in directory order

       -v     natural sort of (version) numbers within text

       -w, --width=COLS
              set output width to COLS.  0 means no limit

       -x     list entries by lines instead of by columns

       -X     sort alphabetically by entry extension

       -Z, --context
              print any security context of each file

       -1     list one file per line.  Avoid '\n' with -q or -b

       --help display this help and exit

       --version
              output version information and exit

       The SIZE argument is an integer and optional unit (example: 10K is 10*1024).  Units are K,M,G,T,P,E,Z,Y  (pow‐
       ers of 1024) or KB,MB,... (powers of 1000).  Binary prefixes can be used, too: KiB=K, MiB=M, and so on.

       The  TIME_STYLE  argument  can  be full-iso, long-iso, iso, locale, or +FORMAT.  FORMAT is interpreted like in
       date(1).  If FORMAT is FORMAT1<newline>FORMAT2, then FORMAT1 applies to non-recent files and FORMAT2 to recent
       files.  TIME_STYLE prefixed with 'posix-' takes effect only outside the POSIX locale.  Also the TIME_STYLE en‐
       vironment variable sets the default style to use.

       Using color to distinguish file types is disabled both by default and with --color=never.  With  --color=auto,
       ls emits color codes only when standard output is connected to a terminal.  The LS_COLORS environment variable
       can change the settings.  Use the dircolors command to set it.

   Exit status:
       0      if OK,

       1      if minor problems (e.g., cannot access subdirectory),

       2      if serious trouble (e.g., cannot access command-line argument).

AUTHOR
       Written by Richard M. Stallman and David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright  ©  2020  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU   GPL   version   3   or   later
       <https://gnu.org/licenses/gpl.html>.
       This  is  free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent per‐
       mitted by law.

SEE ALSO
       Full documentation <https://www.gnu.org/software/coreutils/ls>
       or available locally via: info '(coreutils) ls invocation'

GNU coreutils 8.32                                  February 2024                                               LS(1)

================================================================================

COMMAND: cd
CD(1POSIX)                                    POSIX Programmer's Manual                                    CD(1POSIX)

PROLOG
       This  manual  page  is  part of the POSIX Programmer's Manual.  The Linux implementation of this interface may
       differ (consult the corresponding Linux manual page for details of Linux behavior), or the interface  may  not
       be implemented on Linux.

NAME
       cd — change the working directory

SYNOPSIS
       cd [-L|-P] [directory]

       cd -

DESCRIPTION
       The  cd  utility  shall  change  the working directory of the current shell execution environment (see Section
       2.12, Shell Execution Environment) by executing the following steps in sequence. (In the following steps,  the
       symbol  curpath represents an intermediate value used to simplify the description of the algorithm used by cd.
       There is no requirement that curpath be made visible to the application.)

        1. If no directory operand is given and the HOME environment variable is empty or undefined, the default  be‐
           havior is implementation-defined and no further steps shall be taken.

        2. If  no  directory  operand  is given and the HOME environment variable is set to a non-empty value, the cd
           utility shall behave as if the directory named in the HOME environment variable was specified as  the  di‐
           rectory operand.

        3. If  the  directory operand begins with a <slash> character, set curpath to the operand and proceed to step
           7.

        4. If the first component of the directory operand is dot or dot-dot, proceed to step 6.

        5. Starting with the first pathname in the <colon>-separated pathnames of CDPATH (see the  ENVIRONMENT  VARI‐
           ABLES  section) if the pathname is non-null, test if the concatenation of that pathname, a <slash> charac‐
           ter if that pathname did not end with a <slash> character, and the directory operand names a directory. If
           the  pathname  is null, test if the concatenation of dot, a <slash> character, and the operand names a di‐
           rectory. In either case, if the resulting string names an existing directory, set curpath to  that  string
           and  proceed  to  step 7. Otherwise, repeat this step with the next pathname in CDPATH until all pathnames
           have been tested.

        6. Set curpath to the directory operand.

        7. If the -P option is in effect, proceed to step 10. If curpath does not begin with a <slash> character, set
           curpath to the string formed by the concatenation of the value of PWD, a <slash> character if the value of
           PWD did not end with a <slash> character, and curpath.

        8. The curpath value shall then be converted to canonical form as follows, considering  each  component  from
           beginning to end, in sequence:

            a. Dot components and any <slash> characters that separate them from the next component shall be deleted.

            b. For  each  dot-dot  component,  if  there is a preceding component and it is neither root nor dot-dot,
               then:

                i.  If the preceding component does not refer (in the context of pathname  resolution  with  symbolic
                    links  followed)  to  a directory, then the cd utility shall display an appropriate error message
                    and no further steps shall be taken.

               ii.  The preceding component, all <slash> characters separating the preceding component from  dot-dot,
                    dot-dot,  and  all  <slash>  characters  separating dot-dot from the following component (if any)
                    shall be deleted.

            c. An implementation may further simplify curpath by removing any trailing <slash>  characters  that  are
               not  also  leading  <slash>  characters, replacing multiple non-leading consecutive <slash> characters
               with a single <slash>, and replacing three or more leading <slash> characters with a  single  <slash>.
               If,  as  a  result  of  this canonicalization, the curpath variable is null, no further steps shall be
               taken.

        9. If curpath is longer than {PATH_MAX} bytes (including the terminating null) and the directory operand  was
           not longer than {PATH_MAX} bytes (including the terminating null), then curpath shall be converted from an
           absolute pathname to an equivalent relative pathname if possible. This conversion shall always be  consid‐
           ered  possible  if  the value of PWD, with a trailing <slash> added if it does not already have one, is an
           initial substring of curpath.  Whether or not it is considered possible under other circumstances  is  un‐
           specified.  Implementations  may also apply this conversion if curpath is not longer than {PATH_MAX} bytes
           or the directory operand was longer than {PATH_MAX} bytes.

       10. The cd utility shall then perform actions equivalent to the chdir() function called with  curpath  as  the
           path  argument.  If  these  actions fail for any reason, the cd utility shall display an appropriate error
           message and the remainder of this step shall not be executed. If the -P option is not in effect,  the  PWD
           environment  variable  shall be set to the value that curpath had on entry to step 9 (i.e., before conver‐
           sion to a relative pathname). If the -P option is in effect, the PWD environment variable shall be set  to
           the  string  that would be output by pwd -P.  If there is insufficient permission on the new directory, or
           on any parent of that directory, to determine the current working directory, the value of the PWD environ‐
           ment variable is unspecified.

       If, during the execution of the above steps, the PWD environment variable is set, the OLDPWD environment vari‐
       able shall also be set to the value of the old working directory (that is the current working directory  imme‐
       diately prior to the call to cd).

OPTIONS
       The  cd  utility  shall  conform  to the Base Definitions volume of POSIX.1‐2017, Section 12.2, Utility Syntax
       Guidelines.

       The following options shall be supported by the implementation:

       -L        Handle the operand dot-dot logically; symbolic link components shall not be resolved before  dot-dot
                 components are processed (see steps 8.  and 9. in the DESCRIPTION).

       -P        Handle  the  operand  dot-dot  physically; symbolic link components shall be resolved before dot-dot
                 components are processed (see step 7. in the DESCRIPTION).

       If both -L and -P options are specified, the last of these options shall be used and all  others  ignored.  If
       neither -L nor -P is specified, the operand shall be handled dot-dot logically; see the DESCRIPTION.

OPERANDS
       The following operands shall be supported:

       directory An  absolute  or relative pathname of the directory that shall become the new working directory. The
                 interpretation of a relative pathname by cd depends on the -L option and the CDPATH and PWD environ‐
                 ment variables. If directory is an empty string, the results are unspecified.

       -         When a <hyphen-minus> is used as the operand, this shall be equivalent to the command:

                     cd "$OLDPWD" && pwd

                 which changes to the previous working directory and then writes its name.

STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of cd:

       CDPATH    A  <colon>-separated list of pathnames that refer to directories. The cd utility shall use this list
                 in its attempt to change the directory, as described in the DESCRIPTION. An empty string in place of
                 a  directory pathname represents the current directory. If CDPATH is not set, it shall be treated as
                 if it were an empty string.

       HOME      The name of the directory, used when no directory operand is specified.

       LANG      Provide a default value for the internationalization variables that are unset or null. (See the Base
                 Definitions  volume  of POSIX.1‐2017, Section 8.2, Internationalization Variables for the precedence
                 of internationalization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization  vari‐
                 ables.

       LC_CTYPE  Determine  the  locale  for the interpretation of sequences of bytes of text data as characters (for
                 example, single-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents  of  diagnostic  messages
                 written to standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.

       OLDPWD    A pathname of the previous working directory, used by cd -.

       PWD       This  variable  shall  be  set as specified in the DESCRIPTION. If an application sets or unsets the
                 value of PWD, the behavior of cd is unspecified.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       If a non-empty directory name from CDPATH is used, or if cd - is used, an absolute pathname of the new working
       directory shall be written to the standard output as follows:

           "%s\n", <new directory>

       Otherwise, there shall be no output.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       The following exit values shall be returned:

        0    The directory was successfully changed.

       >0    An error occurred.

CONSEQUENCES OF ERRORS
       The working directory shall remain unchanged.

       The following sections are informative.

APPLICATION USAGE
       Since  cd  affects the current shell execution environment, it is always provided as a shell regular built-in.
       If it is called in a subshell or separate utility execution environment, such as one of the following:

           (cd /tmp)
           nohup cd
           find . -exec cd {} \;

       it does not affect the working directory of the caller's environment.

       The user must have execute (search) permission in directory in order to change to it.

EXAMPLES
       The following template can be used to perform processing in the directory specified by location and end up  in
       the current working directory in use before the first cd command was issued:

           cd location
           if [ $? -ne 0 ]
           then
               print error message
               exit 1
           fi
           ... do whatever is desired as long as the OLDPWD environment variable
               is not modified
           cd -

RATIONALE
       The  use of the CDPATH was introduced in the System V shell. Its use is analogous to the use of the PATH vari‐
       able in the shell. The BSD C shell used a shell parameter cdpath for this purpose.

       A common extension when HOME is undefined is to get the login directory from the user database for the  invok‐
       ing user. This does not occur on System V implementations.

       Some  historical  shells, such as the KornShell, took special actions when the directory name contained a dot-
       dot component, selecting the logical parent of the directory, rather than the actual  parent  directory;  that
       is,  it  moved  up one level toward the '/' in the pathname, remembering what the user typed, rather than per‐
       forming the equivalent of:

           chdir("..");

       In such a shell, the following commands would not necessarily produce equivalent output for all directories:

           cd .. && ls      ls ..

       This behavior is now the default. It is not consistent with the definition of dot-dot in most historical prac‐
       tice;  that is, while this behavior has been optionally available in the KornShell, other shells have histori‐
       cally not supported this functionality. The logical pathname is stored in the PWD  environment  variable  when
       the cd utility completes and this value is used to construct the next directory name if cd is invoked with the
       -L option.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.12, Shell Execution Environment, pwd

       The Base Definitions volume of POSIX.1‐2017, Chapter 8, Environment Variables, Section  12.2,  Utility  Syntax
       Guidelines

       The System Interfaces volume of POSIX.1‐2017, chdir()

COPYRIGHT
       Portions  of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications  Is‐
       sue  7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The
       Open Group.  In the event of any discrepancy between this version and the original IEEE  and  The  Open  Group
       Standard,  the original IEEE and The Open Group Standard is the referee document. The original Standard can be
       obtained online at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during
       the  conversion  of  the  source  files  to  man  page  format.  To  report  such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                      2017                                              CD(1POSIX)

================================================================================

COMMAND: pwd
PWD(1)                                              User Commands                                              PWD(1)

NAME
       pwd - print name of current/working directory

SYNOPSIS
       pwd [OPTION]...

DESCRIPTION
       Print the full filename of the current working directory.

       -L, --logical
              use PWD from environment, even if it contains symlinks

       -P, --physical
              avoid all symlinks

       --help display this help and exit

       --version
              output version information and exit

       If no option is specified, -P is assumed.

       NOTE: your shell may have its own version of pwd, which usually supersedes the version described here.  Please
       refer to your shell's documentation for details about the options it supports.

AUTHOR
       Written by Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright  ©  2020  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU   GPL   version   3   or   later
       <https://gnu.org/licenses/gpl.html>.
       This  is  free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent per‐
       mitted by law.

SEE ALSO
       getcwd(3)

       Full documentation <https://www.gnu.org/software/coreutils/pwd>
       or available locally via: info '(coreutils) pwd invocation'

GNU coreutils 8.32                                  February 2024                                              PWD(1)

================================================================================

COMMAND: rm
RM(1)                                               User Commands                                               RM(1)

NAME
       rm - remove files or directories

SYNOPSIS
       rm [OPTION]... [FILE]...

DESCRIPTION
       This  manual  page  documents the GNU version of rm.  rm removes each specified file.  By default, it does not
       remove directories.

       If the -I or --interactive=once option is given, and there are more than three files or the -r, -R,  or  --re‐
       cursive are given, then rm prompts the user for whether to proceed with the entire operation.  If the response
       is not affirmative, the entire command is aborted.

       Otherwise, if a file is unwritable, standard input is a terminal, and the -f or --force option is  not  given,
       or the -i or --interactive=always option is given, rm prompts the user for whether to remove the file.  If the
       response is not affirmative, the file is skipped.

OPTIONS
       Remove (unlink) the FILE(s).

       -f, --force
              ignore nonexistent files and arguments, never prompt

       -i     prompt before every removal

       -I     prompt once before removing more than three files, or when removing recursively;  less  intrusive  than
              -i, while still giving protection against most mistakes

       --interactive[=WHEN]
              prompt according to WHEN: never, once (-I), or always (-i); without WHEN, prompt always

       --one-file-system
              when  removing a hierarchy recursively, skip any directory that is on a file system different from that
              of the corresponding command line argument

       --no-preserve-root
              do not treat '/' specially

       --preserve-root[=all]
              do not remove '/' (default); with 'all', reject any command line argument on a separate device from its
              parent

       -r, -R, --recursive
              remove directories and their contents recursively

       -d, --dir
              remove empty directories

       -v, --verbose
              explain what is being done

       --help display this help and exit

       --version
              output version information and exit

       By  default,  rm does not remove directories.  Use the --recursive (-r or -R) option to remove each listed di‐
       rectory, too, along with all of its contents.

       To remove a file whose name starts with a '-', for example '-foo', use one of these commands:

              rm -- -foo

              rm ./-foo

       Note that if you use rm to remove a file, it might be possible to recover some of its contents,  given  suffi‐
       cient  expertise and/or time.  For greater assurance that the contents are truly unrecoverable, consider using
       shred.

AUTHOR
       Written by Paul Rubin, David MacKenzie, Richard M. Stallman, and Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright  ©  2020  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU   GPL   version   3   or   later
       <https://gnu.org/licenses/gpl.html>.
       This  is  free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent per‐
       mitted by law.

SEE ALSO
       unlink(1), unlink(2), chattr(1), shred(1)

       Full documentation <https://www.gnu.org/software/coreutils/rm>
       or available locally via: info '(coreutils) rm invocation'

GNU coreutils 8.32                                  February 2024                                               RM(1)

================================================================================

COMMAND: cp
CP(1)                                               User Commands                                               CP(1)

NAME
       cp - copy files and directories

SYNOPSIS
       cp [OPTION]... [-T] SOURCE DEST
       cp [OPTION]... SOURCE... DIRECTORY
       cp [OPTION]... -t DIRECTORY SOURCE...

DESCRIPTION
       Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --archive
              same as -dR --preserve=all

       --attributes-only
              don't copy the file data, just the attributes

       --backup[=CONTROL]
              make a backup of each existing destination file

       -b     like --backup but does not accept an argument

       --copy-contents
              copy contents of special files when recursive

       -d     same as --no-dereference --preserve=links

       -f, --force
              if  an existing destination file cannot be opened, remove it and try again (this option is ignored when
              the -n option is also used)

       -i, --interactive
              prompt before overwrite (overrides a previous -n option)

       -H     follow command-line symbolic links in SOURCE

       -l, --link
              hard link files instead of copying

       -L, --dereference
              always follow symbolic links in SOURCE

       -n, --no-clobber
              do not overwrite an existing file (overrides a previous -i option)

       -P, --no-dereference
              never follow symbolic links in SOURCE

       -p     same as --preserve=mode,ownership,timestamps

       --preserve[=ATTR_LIST]
              preserve the specified attributes (default:  mode,ownership,timestamps),  if  possible  additional  at‐
              tributes: context, links, xattr, all

       --no-preserve=ATTR_LIST
              don't preserve the specified attributes

       --parents
              use full source file name under DIRECTORY

       -R, -r, --recursive
              copy directories recursively

       --reflink[=WHEN]
              control clone/CoW copies. See below

       --remove-destination
              remove each existing destination file before attempting to open it (contrast with --force)

       --sparse=WHEN
              control creation of sparse files. See below

       --strip-trailing-slashes
              remove any trailing slashes from each SOURCE argument

       -s, --symbolic-link
              make symbolic links instead of copying

       -S, --suffix=SUFFIX
              override the usual backup suffix

       -t, --target-directory=DIRECTORY
              copy all SOURCE arguments into DIRECTORY

       -T, --no-target-directory
              treat DEST as a normal file

       -u, --update
              copy only when the SOURCE file is newer than the destination file or when the destination file is miss‐
              ing

       -v, --verbose
              explain what is being done

       -x, --one-file-system
              stay on this file system

       -Z     set SELinux security context of destination file to default type

       --context[=CTX]
              like -Z, or if CTX is specified then set the SELinux or SMACK security context to CTX

       --help display this help and exit

       --version
              output version information and exit

       By default, sparse SOURCE files are detected by a crude heuristic and the  corresponding  DEST  file  is  made
       sparse  as  well.  That is the behavior selected by --sparse=auto.  Specify --sparse=always to create a sparse
       DEST file whenever the SOURCE file contains a long enough sequence of zero bytes.  Use --sparse=never  to  in‐
       hibit creation of sparse files.

       When  --reflink[=always]  is specified, perform a lightweight copy, where the data blocks are copied only when
       modified.  If this is not possible the copy fails, or if --reflink=auto is specified, fall back to a  standard
       copy.  Use --reflink=never to ensure a standard copy is performed.

       The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.  The version control method may be
       selected via the --backup option or through the VERSION_CONTROL environment variable.  Here are the values:

       none, off
              never make backups (even if --backup is given)

       numbered, t
              make numbered backups

       existing, nil
              numbered if numbered backups exist, simple otherwise

       simple, never
              always make simple backups

       As a special case, cp makes a backup of SOURCE when the force and backup options are given and SOURCE and DEST
       are the same name for an existing, regular file.

AUTHOR
       Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright   ©   2020   Free   Software   Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later
       <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the  extent  per‐
       mitted by law.

SEE ALSO
       Full documentation <https://www.gnu.org/software/coreutils/cp>
       or available locally via: info '(coreutils) cp invocation'

GNU coreutils 8.32                                  February 2024                                               CP(1)

================================================================================

COMMAND: mv
MV(1)                                               User Commands                                               MV(1)

NAME
       mv - move (rename) files

SYNOPSIS
       mv [OPTION]... [-T] SOURCE DEST
       mv [OPTION]... SOURCE... DIRECTORY
       mv [OPTION]... -t DIRECTORY SOURCE...

DESCRIPTION
       Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.

       Mandatory arguments to long options are mandatory for short options too.

       --backup[=CONTROL]
              make a backup of each existing destination file

       -b     like --backup but does not accept an argument

       -f, --force
              do not prompt before overwriting

       -i, --interactive
              prompt before overwrite

       -n, --no-clobber
              do not overwrite an existing file

       If you specify more than one of -i, -f, -n, only the final one takes effect.

       --strip-trailing-slashes
              remove any trailing slashes from each SOURCE argument

       -S, --suffix=SUFFIX
              override the usual backup suffix

       -t, --target-directory=DIRECTORY
              move all SOURCE arguments into DIRECTORY

       -T, --no-target-directory
              treat DEST as a normal file

       -u, --update
              move only when the SOURCE file is newer than the destination file or when the destination file is miss‐
              ing

       -v, --verbose
              explain what is being done

       -Z, --context
              set SELinux security context of destination file to default type

       --help display this help and exit

       --version
              output version information and exit

       The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.  The version control method may be
       selected via the --backup option or through the VERSION_CONTROL environment variable.  Here are the values:

       none, off
              never make backups (even if --backup is given)

       numbered, t
              make numbered backups

       existing, nil
              numbered if numbered backups exist, simple otherwise

       simple, never
              always make simple backups

AUTHOR
       Written by Mike Parker, David MacKenzie, and Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright   ©   2020   Free   Software   Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later
       <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the  extent  per‐
       mitted by law.

SEE ALSO
       rename(2)

       Full documentation <https://www.gnu.org/software/coreutils/mv>
       or available locally via: info '(coreutils) mv invocation'

GNU coreutils 8.32                                  February 2024                                               MV(1)

================================================================================

COMMAND: mkdir
MKDIR(1)                                            User Commands                                            MKDIR(1)

NAME
       mkdir - make directories

SYNOPSIS
       mkdir [OPTION]... DIRECTORY...

DESCRIPTION
       Create the DIRECTORY(ies), if they do not already exist.

       Mandatory arguments to long options are mandatory for short options too.

       -m, --mode=MODE
              set file mode (as in chmod), not a=rwx - umask

       -p, --parents
              no error if existing, make parent directories as needed

       -v, --verbose
              print a message for each created directory

       -Z     set SELinux security context of each created directory to the default type

       --context[=CTX]
              like -Z, or if CTX is specified then set the SELinux or SMACK security context to CTX

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright   ©   2020   Free   Software   Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later
       <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the  extent  per‐
       mitted by law.

SEE ALSO
       mkdir(2)

       Full documentation <https://www.gnu.org/software/coreutils/mkdir>
       or available locally via: info '(coreutils) mkdir invocation'

GNU coreutils 8.32                                  February 2024                                            MKDIR(1)

================================================================================

COMMAND: cat
CAT(1)                                              User Commands                                              CAT(1)

NAME
       cat - concatenate files and print on the standard output

SYNOPSIS
       cat [OPTION]... [FILE]...

DESCRIPTION
       Concatenate FILE(s) to standard output.

       With no FILE, or when FILE is -, read standard input.

       -A, --show-all
              equivalent to -vET

       -b, --number-nonblank
              number nonempty output lines, overrides -n

       -e     equivalent to -vE

       -E, --show-ends
              display $ at end of each line

       -n, --number
              number all output lines

       -s, --squeeze-blank
              suppress repeated empty output lines

       -t     equivalent to -vT

       -T, --show-tabs
              display TAB characters as ^I

       -u     (ignored)

       -v, --show-nonprinting
              use ^ and M- notation, except for LFD and TAB

       --help display this help and exit

       --version
              output version information and exit

EXAMPLES
       cat f - g
              Output f's contents, then standard input, then g's contents.

       cat    Copy standard input to standard output.

AUTHOR
       Written by Torbjorn Granlund and Richard M. Stallman.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright   ©   2020   Free   Software   Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later
       <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the  extent  per‐
       mitted by law.

SEE ALSO
       tac(1)

       Full documentation <https://www.gnu.org/software/coreutils/cat>
       or available locally via: info '(coreutils) cat invocation'

GNU coreutils 8.32                                  February 2024                                              CAT(1)

================================================================================

COMMAND: wc
WC(1)                                               User Commands                                               WC(1)

NAME
       wc - print newline, word, and byte counts for each file

SYNOPSIS
       wc [OPTION]... [FILE]...
       wc [OPTION]... --files0-from=F

DESCRIPTION
       Print  newline,  word,  and byte counts for each FILE, and a total line if more than one FILE is specified.  A
       word is a non-zero-length sequence of characters delimited by white space.

       With no FILE, or when FILE is -, read standard input.

       The options below may be used to select which counts are printed, always  in  the  following  order:  newline,
       word, character, byte, maximum line length.

       -c, --bytes
              print the byte counts

       -m, --chars
              print the character counts

       -l, --lines
              print the newline counts

       --files0-from=F
              read  input  from the files specified by NUL-terminated names in file F; If F is - then read names from
              standard input

       -L, --max-line-length
              print the maximum display width

       -w, --words
              print the word counts

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by Paul Rubin and David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright  ©  2020  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU   GPL   version   3   or   later
       <https://gnu.org/licenses/gpl.html>.
       This  is  free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent per‐
       mitted by law.

SEE ALSO
       Full documentation <https://www.gnu.org/software/coreutils/wc>
       or available locally via: info '(coreutils) wc invocation'

GNU coreutils 8.32                                  February 2024                                               WC(1)

================================================================================

COMMAND: grep
GREP(1)                                             User Commands                                             GREP(1)

NAME
       grep, egrep, fgrep, rgrep - print lines that match patterns

SYNOPSIS
       grep [OPTION...] PATTERNS [FILE...]
       grep [OPTION...] -e PATTERNS ... [FILE...]
       grep [OPTION...] -f PATTERN_FILE ... [FILE...]

DESCRIPTION
       grep  searches  for  PATTERNS in each FILE.  PATTERNS is one or more patterns separated by newline characters,
       and grep prints each line that matches a pattern.  Typically PATTERNS should be quoted when grep is used in  a
       shell command.

       A  FILE  of  “-”  stands  for  standard  input.   If  no FILE is given, recursive searches examine the working
       directory, and nonrecursive searches read standard input.

       In addition, the variant programs egrep, fgrep and rgrep are  the  same  as  grep -E,  grep -F,  and  grep -r,
       respectively.  These variants are deprecated, but are provided for backward compatibility.

OPTIONS
   Generic Program Information
       --help Output a usage message and exit.

       -V, --version
              Output the version number of grep and exit.

   Pattern Syntax
       -E, --extended-regexp
              Interpret PATTERNS as extended regular expressions (EREs, see below).

       -F, --fixed-strings
              Interpret PATTERNS as fixed strings, not regular expressions.

       -G, --basic-regexp
              Interpret PATTERNS as basic regular expressions (BREs, see below).  This is the default.

       -P, --perl-regexp
              Interpret I<PATTERNS> as Perl-compatible regular expressions (PCREs).  This option is experimental when
              combined with the -z (--null-data) option, and grep -P may warn of unimplemented features.

   Matching Control
       -e PATTERNS, --regexp=PATTERNS
              Use PATTERNS as the patterns.  If this option is used  multiple  times  or  is  combined  with  the  -f
              (--file) option, search for all patterns given.  This option can be used to protect a pattern beginning
              with “-”.

       -f FILE, --file=FILE
              Obtain patterns from FILE, one per line.  If this option is used multiple times or is combined with the
              -e  (--regexp)  option,  search  for  all  patterns  given.  The empty file contains zero patterns, and
              therefore matches nothing.

       -i, --ignore-case
              Ignore case distinctions in patterns and input data, so that characters that differ only in case  match
              each other.

       --no-ignore-case
              Do  not  ignore  case  distinctions  in  patterns and input data.  This is the default.  This option is
              useful for passing to shell scripts that already use -i, to cancel its effects because the two  options
              override each other.

       -v, --invert-match
              Invert the sense of matching, to select non-matching lines.

       -w, --word-regexp
              Select  only  those  lines  containing  matches  that  form whole words.  The test is that the matching
              substring must either be at the beginning of the line, or preceded by a non-word constituent character.
              Similarly,  it  must  be either at the end of the line or followed by a non-word constituent character.
              Word-constituent characters are letters, digits, and the underscore.  This option has no effect  if  -x
              is also specified.

       -x, --line-regexp
              Select only those matches that exactly match the whole line.  For a regular expression pattern, this is
              like parenthesizing the pattern and then surrounding it with ^ and $.

       -y     Obsolete synonym for -i.

   General Output Control
       -c, --count
              Suppress normal output; instead print a count of matching lines for each  input  file.   With  the  -v,
              --invert-match option (see below), count non-matching lines.

       --color[=WHEN], --colour[=WHEN]
              Surround the matched (non-empty) strings, matching lines, context lines, file names, line numbers, byte
              offsets, and separators (for fields and groups of context lines) with escape sequences to display  them
              in  color  on  the  terminal.   The  colors  are  defined by the environment variable GREP_COLORS.  The
              deprecated environment variable GREP_COLOR is still supported, but its setting does not have  priority.
              WHEN is never, always, or auto.

       -L, --files-without-match
              Suppress  normal  output; instead print the name of each input file from which no output would normally
              have been printed.

       -l, --files-with-matches
              Suppress normal output; instead print the name of each input file from which output would normally have
              been printed.  Scanning each input file stops upon first match.

       -m NUM, --max-count=NUM
              Stop  reading a file after NUM matching lines.  If the input is standard input from a regular file, and
              NUM matching lines are output, grep ensures that the standard input is positioned  to  just  after  the
              last  matching line before exiting, regardless of the presence of trailing context lines.  This enables
              a calling process to resume a search.  When grep  stops  after  NUM  matching  lines,  it  outputs  any
              trailing  context  lines.   When  the  -c  or --count option is also used, grep does not output a count
              greater than NUM.  When the -v or --invert-match option is also used, grep stops after  outputting  NUM
              non-matching lines.

       -o, --only-matching
              Print  only  the matched (non-empty) parts of a matching line, with each such part on a separate output
              line.

       -q, --quiet, --silent
              Quiet; do not write anything to standard output.  Exit immediately with zero status  if  any  match  is
              found, even if an error was detected.  Also see the -s or --no-messages option.

       -s, --no-messages
              Suppress error messages about nonexistent or unreadable files.

   Output Line Prefix Control
       -b, --byte-offset
              Print   the   0-based  byte  offset  within  the  input  file  before  each  line  of  output.   If  -o
              (--only-matching) is specified, print the offset of the matching part itself.

       -H, --with-filename
              Print the file name for each match.  This is the default when there is more than one  file  to  search.
              This is a GNU extension.

       -h, --no-filename
              Suppress  the  prefixing  of file names on output.  This is the default when there is only one file (or
              only standard input) to search.

       --label=LABEL
              Display input actually coming from standard input as input coming from file LABEL.  This can be  useful
              for  commands  that  transform  a  file's  contents  before  searching,  e.g.,  gzip  -cd foo.gz | grep
              --label=foo -H 'some pattern'.  See also the -H option.

       -n, --line-number
              Prefix each line of output with the 1-based line number within its input file.

       -T, --initial-tab
              Make sure that the first character of actual line content lies on a tab stop, so that the alignment  of
              tabs  looks normal.  This is useful with options that prefix their output to the actual content: -H,-n,
              and -b.  In order to improve the probability that lines from a single file will all start at  the  same
              column,  this  also causes the line number and byte offset (if present) to be printed in a minimum size
              field width.

       -Z, --null
              Output a zero byte (the ASCII NUL character) instead of the character  that  normally  follows  a  file
              name.   For  example,  grep  -lZ outputs a zero byte after each file name instead of the usual newline.
              This option makes the output unambiguous, even  in  the  presence  of  file  names  containing  unusual
              characters  like  newlines.  This option can be used with commands like find -print0, perl -0, sort -z,
              and xargs -0 to process arbitrary file names, even those that contain newline characters.

   Context Line Control
       -A NUM, --after-context=NUM
              Print NUM lines of trailing context after matching lines.  Places a line containing a  group  separator
              (--)  between  contiguous groups of matches.  With the -o or --only-matching option, this has no effect
              and a warning is given.

       -B NUM, --before-context=NUM
              Print NUM lines of leading context before matching lines.  Places a line containing a  group  separator
              (--)  between  contiguous groups of matches.  With the -o or --only-matching option, this has no effect
              and a warning is given.

       -C NUM, -NUM, --context=NUM
              Print NUM lines of output context.  Places a line containing a group separator (--) between  contiguous
              groups of matches.  With the -o or --only-matching option, this has no effect and a warning is given.

       --group-separator=SEP
              When -A, -B, or -C are in use, print SEP instead of -- between groups of lines.

       --no-group-separator
              When -A, -B, or -C are in use, do not print a separator between groups of lines.

   File and Directory Selection
       -a, --text
              Process a binary file as if it were text; this is equivalent to the --binary-files=text option.

       --binary-files=TYPE
              If  a  file's  data or metadata indicate that the file contains binary data, assume that the file is of
              type TYPE.  Non-text bytes indicate binary data; these are either  output  bytes  that  are  improperly
              encoded for the current locale, or null input bytes when the -z option is not given.

              By  default, TYPE is binary, and grep suppresses output after null input binary data is discovered, and
              suppresses output lines that contain improperly encoded data.  When some  output  is  suppressed,  grep
              follows any output with a one-line message saying that a binary file matches.

              If  TYPE  is  without-match, when grep discovers null input binary data it assumes that the rest of the
              file does not match; this is equivalent to the -I option.

              If TYPE is text, grep processes a binary file as if it were text; this is equivalent to the -a option.

              When type is binary, grep may treat non-text bytes as line terminators  even  without  the  -z  option.
              This  means choosing binary versus text can affect whether a pattern matches a file.  For example, when
              type is binary the pattern q$ might match q immediately followed by a null byte, even  though  this  is
              not  matched when type is text.  Conversely, when type is binary the pattern . (period) might not match
              a null byte.

              Warning: The -a option might output binary garbage, which can have nasty side effects if the output  is
              a  terminal  and  if  the  terminal  driver interprets some of it as commands.  On the other hand, when
              reading files whose text encodings are unknown, it can be helpful to use -a or to set LC_ALL='C' in the
              environment, in order to find more matches even if the matches are unsafe for direct display.

       -D ACTION, --devices=ACTION
              If  an  input  file is a device, FIFO or socket, use ACTION to process it.  By default, ACTION is read,
              which means that devices are read just as if they were ordinary files.  If ACTION is skip, devices  are
              silently skipped.

       -d ACTION, --directories=ACTION
              If  an  input  file  is  a directory, use ACTION to process it.  By default, ACTION is read, i.e., read
              directories just as if they were ordinary files.  If ACTION is skip,  silently  skip  directories.   If
              ACTION  is  recurse, read all files under each directory, recursively, following symbolic links only if
              they are on the command line.  This is equivalent to the -r option.

       --exclude=GLOB
              Skip any command-line file with a name suffix that matches the pattern GLOB, using wildcard matching; a
              name  suffix  is  either  the  whole  name,  or  a trailing part that starts with a non-slash character
              immediately after a slash (/) in the name.  When searching recursively, skip  any  subfile  whose  base
              name  matches  GLOB; the base name is the part after the last slash.  A pattern can use *, ?, and [...]
              as wildcards, and \ to quote a wildcard or backslash character literally.

       --exclude-from=FILE
              Skip files whose base name matches any of the file-name globs read from FILE (using  wildcard  matching
              as described under --exclude).

       --exclude-dir=GLOB
              Skip  any  command-line  directory  with  a  name suffix that matches the pattern GLOB.  When searching
              recursively, skip any subdirectory whose base name matches GLOB.  Ignore any redundant trailing slashes
              in GLOB.

       -I     Process  a  binary  file  as  if  it  did  not  contain  matching  data;  this  is  equivalent  to  the
              --binary-files=without-match option.

       --include=GLOB
              Search only files whose base name matches GLOB (using wildcard matching as described under  --exclude).
              If  contradictory  --include  and  --exclude  options  are  given,  the  last matching one wins.  If no
              --include or --exclude options match, a file is included unless the first such option is --include.

       -r, --recursive
              Read all files under each directory, recursively, following symbolic links only  if  they  are  on  the
              command  line.  Note that if no file operand is given, B<grep> searches the working directory.  This is
              equivalent to the -d recurse option.

       -R, --dereference-recursive
              Read all files under each directory, recursively.  Follow all symbolic links, unlike -r.

   Other Options
       --line-buffered
              Use line buffering on output.  This can cause a performance penalty.

       -U, --binary
              Treat the file(s) as binary.  By default, under MS-DOS and MS-Windows, grep guesses whether a  file  is
              text or binary as described for the --binary-files option.  If grep decides the file is a text file, it
              strips the CR characters from the original file contents (to make regular expressions with ^ and $ work
              correctly).   Specifying  -U  overrules  this guesswork, causing all files to be read and passed to the
              matching mechanism verbatim; if the file is a text file with CR/LF pairs at the end of each line,  this
              will  cause some regular expressions to fail.  This option has no effect on platforms other than MS-DOS
              and MS-Windows.

       -z, --null-data
              Treat input and output data as sequences of lines, each terminated  by  a  zero  byte  (the  ASCII  NUL
              character)  instead  of a newline.  Like the -Z or --null option, this option can be used with commands
              like sort -z to process arbitrary file names.

REGULAR EXPRESSIONS
       A regular expression is a pattern that describes a  set  of  strings.   Regular  expressions  are  constructed
       analogously to arithmetic expressions, by using various operators to combine smaller expressions.

       grep  understands  three  different versions of regular expression syntax: “basic” (BRE), “extended” (ERE) and
       “perl” (PCRE).  In GNU grep there is no difference in  available  functionality  between  basic  and  extended
       syntaxes.   In  other implementations, basic regular expressions are less powerful.  The following description
       applies to extended regular expressions; differences for basic regular expressions are summarized  afterwards.
       Perl-compatible  regular expressions give additional functionality, and are documented in B<pcresyntax>(3) and
       B<pcrepattern>(3), but work only if PCRE support is enabled.

       The fundamental building blocks are the regular expressions that match a single character.   Most  characters,
       including  all  letters  and  digits,  are regular expressions that match themselves.  Any meta-character with
       special meaning may be quoted by preceding it with a backslash.

       The period . matches any single character.  It is unspecified whether it matches an encoding error.

   Character Classes and Bracket Expressions
       A bracket expression is a list of characters enclosed by [ and ].  It matches any  single  character  in  that
       list.   If the first character of the list is the caret ^ then it matches any character not in the list; it is
       unspecified whether it matches an encoding error.  For example, the regular  expression  [0123456789]  matches
       any single digit.

       Within  a bracket expression, a range expression consists of two characters separated by a hyphen.  It matches
       any single character that sorts between the two characters, inclusive, using the locale's  collating  sequence
       and  character  set.   For example, in the default C locale, [a-d] is equivalent to [abcd].  Many locales sort
       characters in dictionary order, and in these locales [a-d] is typically not equivalent to [abcd]; it might  be
       equivalent  to  [aBbCcDd],  for example.  To obtain the traditional interpretation of bracket expressions, you
       can use the C locale by setting the LC_ALL environment variable to the value C.

       Finally, certain named classes of characters are predefined within bracket  expressions,  as  follows.   Their
       names  are  self  explanatory,  and they are [:alnum:], [:alpha:], [:blank:], [:cntrl:], [:digit:], [:graph:],
       [:lower:], [:print:], [:punct:], [:space:], [:upper:], and [:xdigit:].  For  example,  [[:alnum:]]  means  the
       character  class  of  numbers  and  letters  in  the  current locale.  In the C locale and ASCII character set
       encoding, this is the same as [0-9A-Za-z].  (Note that the brackets in these  class  names  are  part  of  the
       symbolic  names,  and  must  be included in addition to the brackets delimiting the bracket expression.)  Most
       meta-characters lose their special meaning inside bracket expressions.  To include a literal ] place it  first
       in  the list.  Similarly, to include a literal ^ place it anywhere but first.  Finally, to include a literal -
       place it last.

   Anchoring
       The caret ^ and the dollar sign $ are  meta-characters  that  respectively  match  the  empty  string  at  the
       beginning and end of a line.

   The Backslash Character and Special Expressions
       The  symbols  \< and \> respectively match the empty string at the beginning and end of a word.  The symbol \b
       matches the empty string at the edge of a word, and \B matches the empty string provided it's not at the  edge
       of a word.  The symbol \w is a synonym for [_[:alnum:]] and \W is a synonym for [^_[:alnum:]].

   Repetition
       A regular expression may be followed by one of several repetition operators:
       ?      The preceding item is optional and matched at most once.
       *      The preceding item will be matched zero or more times.
       +      The preceding item will be matched one or more times.
       {n}    The preceding item is matched exactly n times.
       {n,}   The preceding item is matched n or more times.
       {,m}   The preceding item is matched at most m times.  This is a GNU extension.
       {n,m}  The preceding item is matched at least n times, but not more than m times.

   Concatenation
       Two  regular  expressions  may  be concatenated; the resulting regular expression matches any string formed by
       concatenating two substrings that respectively match the concatenated expressions.

   Alternation
       Two regular expressions may be joined by the infix operator |; the resulting regular  expression  matches  any
       string matching either alternate expression.

   Precedence
       Repetition  takes  precedence  over  concatenation,  which in turn takes precedence over alternation.  A whole
       expression may be enclosed in parentheses to override these precedence rules and form a subexpression.

   Back-references and Subexpressions
       The back-reference \n, where n is a single  digit,  matches  the  substring  previously  matched  by  the  nth
       parenthesized subexpression of the regular expression.

   Basic vs Extended Regular Expressions
       In  basic regular expressions the meta-characters ?, +, {, |, (, and ) lose their special meaning; instead use
       the backslashed versions \?, \+, \{, \|, \(, and \).

EXIT STATUS
       Normally the exit status is 0 if a line is selected, 1 if no lines were selected, and 2 if an error  occurred.
       However,  if  the  -q  or  --quiet or --silent is used and a line is selected, the exit status is 0 even if an
       error occurred.

ENVIRONMENT
       The behavior of grep is affected by the following environment variables.

       The locale for category LC_foo is specified by examining the three environment variables LC_ALL, LC_foo, LANG,
       in  that order.  The first of these variables that is set specifies the locale.  For example, if LC_ALL is not
       set, but LC_MESSAGES is set to pt_BR, then the  Brazilian  Portuguese  locale  is  used  for  the  LC_MESSAGES
       category.   The  C locale is used if none of these environment variables are set, if the locale catalog is not
       installed, or if grep was not compiled with national language support (NLS).   The  shell  command  locale  -a
       lists locales that are currently available.

       GREP_COLOR
              This  variable  specifies  the  color  used to highlight matched (non-empty) text.  It is deprecated in
              favor of GREP_COLORS, but still supported.  The  mt,  ms,  and  mc  capabilities  of  GREP_COLORS  have
              priority  over  it.  It can only specify the color used to highlight the matching non-empty text in any
              matching line (a selected line when the -v command-line option is omitted, or a context line when -v is
              specified).   The  default  is  01;31, which means a bold red foreground text on the terminal's default
              background.

       GREP_COLORS
              Specifies the colors and other attributes used to highlight various parts of the output.  Its value  is
              a        colon-separated        list        of        capabilities        that        defaults       to
              ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36 with the  rv  and  ne  boolean  capabilities  omitted
              (i.e., false).  Supported capabilities are as follows.

              sl=    SGR  substring for whole selected lines (i.e., matching lines when the -v command-line option is
                     omitted, or non-matching lines when -v is specified).  If however the boolean rv capability  and
                     the  -v  command-line  option  are both specified, it applies to context matching lines instead.
                     The default is empty (i.e., the terminal's default color pair).

              cx=    SGR substring for whole context lines (i.e., non-matching lines when the -v command-line  option
                     is  omitted,  or matching lines when -v is specified).  If however the boolean rv capability and
                     the -v command-line option are  both  specified,  it  applies  to  selected  non-matching  lines
                     instead.  The default is empty (i.e., the terminal's default color pair).

              rv     Boolean  value  that  reverses  (swaps) the meanings of the sl= and cx= capabilities when the -v
                     command-line option is specified.  The default is false (i.e., the capability is omitted).

              mt=01;31
                     SGR substring for matching non-empty text in any matching line (i.e., a selected line  when  the
                     -v  command-line  option  is  omitted, or a context line when -v is specified).  Setting this is
                     equivalent to setting both ms= and mc= at once to the same value.  The default  is  a  bold  red
                     text foreground over the current line background.

              ms=01;31
                     SGR  substring  for  matching non-empty text in a selected line.  (This is only used when the -v
                     command-line option is omitted.)  The effect of the sl= (or cx= if rv) capability remains active
                     when this kicks in.  The default is a bold red text foreground over the current line background.

              mc=01;31
                     SGR  substring  for  matching  non-empty text in a context line.  (This is only used when the -v
                     command-line option is specified.)  The effect of the cx= (or  sl=  if  rv)  capability  remains
                     active  when  this  kicks  in.   The default is a bold red text foreground over the current line
                     background.

              fn=35  SGR substring for file names prefixing  any  content  line.   The  default  is  a  magenta  text
                     foreground over the terminal's default background.

              ln=32  SGR  substring  for  line  numbers  prefixing  any  content  line.   The default is a green text
                     foreground over the terminal's default background.

              bn=32  SGR substring for byte offsets prefixing  any  content  line.   The  default  is  a  green  text
                     foreground over the terminal's default background.

              se=36  SGR substring for separators that are inserted between selected line fields (:), between context
                     line fields, (-), and between groups of adjacent lines when nonzero context is  specified  (--).
                     The default is a cyan text foreground over the terminal's default background.

              ne     Boolean  value  that  prevents  clearing  to  the  end of line using Erase in Line (EL) to Right
                     (\33[K) each time a colorized item ends.  This is  needed  on  terminals  on  which  EL  is  not
                     supported.   It  is  otherwise  useful on terminals for which the back_color_erase (bce) boolean
                     terminfo capability does not  apply,  when  the  chosen  highlight  colors  do  not  affect  the
                     background,  or when EL is too slow or causes too much flicker.  The default is false (i.e., the
                     capability is omitted).

              Note that boolean capabilities have no =... part.  They are omitted (i.e., false) by default and become
              true when specified.

              See  the  Select Graphic Rendition (SGR) section in the documentation of the text terminal that is used
              for permitted values and their meaning as character attributes.  These substring values are integers in
              decimal  representation  and  can  be  concatenated with semicolons.  grep takes care of assembling the
              result into a complete SGR sequence (\33[...m).  Common values to concatenate include 1 for bold, 4 for
              underline, 5 for blink, 7 for inverse, 39 for default foreground color, 30 to 37 for foreground colors,
              90 to 97 for 16-color mode foreground colors, 38;5;0 to  38;5;255  for  88-color  and  256-color  modes
              foreground  colors,  49  for  default  background color, 40 to 47 for background colors, 100 to 107 for
              16-color mode background colors, and 48;5;0 to 48;5;255 for 88-color  and  256-color  modes  background
              colors.

       LC_ALL, LC_COLLATE, LANG
              These variables specify the locale for the LC_COLLATE category, which determines the collating sequence
              used to interpret range expressions like [a-z].

       LC_ALL, LC_CTYPE, LANG
              These variables specify the locale for the LC_CTYPE category, which determines the type of  characters,
              e.g.,  which characters are whitespace.  This category also determines the character encoding, that is,
              whether text is encoded in UTF-8, ASCII, or some other  encoding.   In  the  C  or  POSIX  locale,  all
              characters are encoded as a single byte and every byte is a valid character.

       LC_ALL, LC_MESSAGES, LANG
              These  variables  specify  the  locale for the LC_MESSAGES category, which determines the language that
              grep uses for messages.  The default C locale uses American English messages.

       POSIXLY_CORRECT
              If set, grep behaves as POSIX requires; otherwise, grep behaves more like other  GNU  programs.   POSIX
              requires  that  options  that follow file names must be treated as file names; by default, such options
              are permuted to the front of the operand list and are treated as options.  Also,  POSIX  requires  that
              unrecognized  options  be  diagnosed  as  “illegal”,  but since they are not really against the law the
              default is to diagnose them as “invalid”.  POSIXLY_CORRECT also disables  _N_GNU_nonoption_argv_flags_,
              described below.

       _N_GNU_nonoption_argv_flags_
              (Here N is grep's numeric process ID.)  If the ith character of this environment variable's value is 1,
              do not consider the ith operand of grep to be an option, even if it appears to be one.  A shell can put
              this variable in the environment for each command it runs, specifying which operands are the results of
              file name wildcard expansion and therefore  should  not  be  treated  as  options.   This  behavior  is
              available only with the GNU C library, and only when POSIXLY_CORRECT is not set.

NOTES
       This man page is maintained only fitfully; the full documentation is often more up-to-date.

COPYRIGHT
       Copyright 1998-2000, 2002, 2005-2021 Free Software Foundation, Inc.

       This  is  free  software;  see  the  source  for  copying  conditions.   There  is  NO  warranty; not even for
       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

BUGS
   Reporting Bugs
       Email   bug   reports   to   the    bug-reporting    address    ⟨bug-grep@gnu.org⟩.     An    email    archive
       ⟨https://lists.gnu.org/mailman/listinfo/bug-grep⟩            and            a            bug           tracker
       ⟨https://debbugs.gnu.org/cgi/pkgreport.cgi?package=grep⟩ are available.

   Known Bugs
       Large repetition counts in the {n,m} construct may cause grep to use lots of  memory.   In  addition,  certain
       other obscure regular expressions require exponential time and space, and may cause grep to run out of memory.

       Back-references are very slow, and may require exponential time.

EXAMPLE
       The  following example outputs the location and contents of any line containing “f” and ending in “.c”, within
       all files in the current directory whose names contain “g” and end in “.h”.  The -n option outputs  line  num‐
       bers,  the -- argument treats expansions of “*g*.h” starting with “-” as file names not options, and the empty
       file /dev/null causes file names to be output even if only one file name happens to be of the form “*g*.h”.

         $ grep -n -- 'f.*\.c$' *g*.h /dev/null
         argmatch.h:1:/* definitions and prototypes for argmatch.c

       The only line that matches is line 1 of argmatch.h.  Note that the regular expression syntax used in the  pat‐
       tern differs from the globbing syntax that the shell uses to match file names.

SEE ALSO
   Regular Manual Pages
       awk(1),  cmp(1),  diff(1),  find(1),  perl(1),  sed(1),  sort(1),  xargs(1),  read(2), pcre(3), pcresyntax(3),
       pcrepattern(3), terminfo(5), glob(7), regex(7)

   Full Documentation
       A complete manual ⟨https://www.gnu.org/software/grep/manual/⟩ is available.  If the info and grep programs are
       properly installed at your site, the command

              info grep

       should give you access to the complete manual.

GNU grep 3.7                                          2019-12-29                                              GREP(1)

================================================================================

COMMAND: find
FIND(1)                                        General Commands Manual                                        FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given
       starting-point by evaluating the given expression from left to right, according to  the  rules  of  precedence
       (see  section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for
       or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search
       directories  that  are  writable by other users), you should read the `Security Considerations' chapter of the
       findutils documentation, which is called Finding Files and comes with findutils.  That document also  includes
       a  lot  more  detail and discussion than this manual page, so you may find it a more useful source of informa‐
       tion.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are
       taken  to  be  names of files or directories to be examined, up to the first argument that begins with `-', or
       the argument `(' or `!'.  That argument and any following arguments are taken to be the expression  describing
       what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given,
       the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options  control  the  behaviour  of
       find  but  are  specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O
       must appear before the first path name, if at all.  A double dash -- could theoretically  be  used  to  signal
       that any remaining arguments are not options, but this does not really work due to the way find determines the
       end of the following path arguments: it does that by reading until an expression argument  comes  (which  also
       starts  with  a  `-').  Now, if a path argument would start with a `-', then find would treat it as expression
       argument instead.  Thus, to ensure that all start points are taken as such, and  especially  to  prevent  that
       wildcard patterns expanded by the calling shell are not mistakenly treated as expression arguments, it is gen‐
       erally safer to prefix wildcards or dubious path names with either `./' or to use absolute path names starting
       with '/'.

       -P     Never  follow symbolic links.  This is the default behaviour.  When find examines or prints information
              about files, and the file is a symbolic link, the information used shall be taken from  the  properties
              of the symbolic link itself.

       -L     Follow  symbolic  links.   When  find  examines or prints information about files, the information used
              shall be taken from the properties of the file to which the link points, not from the link itself  (un‐
              less it is a broken symbolic link or find is unable to examine the file to which the link points).  Use
              of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in  effect.   If
              -L  is  in effect and find discovers a symbolic link to a subdirectory during its search, the subdirec‐
              tory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the  type  of  the  file
              that  a  symbolic link points to rather than the link itself (unless the symbolic link is broken).  Ac‐
              tions that can cause symbolic links to become broken while find is executing (for example -delete)  can
              give  rise  to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return
              false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When  find  examines
              or  prints information about files, the information used shall be taken from the properties of the sym‐
              bolic link itself.  The only exception to this behaviour is when a file specified on the  command  line
              is  a  symbolic  link, and the link can be resolved.  For that situation, the information used is taken
              from whatever the link points to (that is, the link is followed).  The information about the  link  it‐
              self is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in
              effect and one of the paths specified on the command line is a symbolic link to a directory,  the  con‐
              tents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If  more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the com‐
       mand line takes effect.  Since it is the default, the -P option should be considered to be  in  effect  unless
       either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has be‐
       gun.  These options also affect how those arguments are processed.  Specifically, there are a number of  tests
       that  compare files listed on the command line against a file we are currently considering.  In each case, the
       file specified on the command line will have been examined and some of its properties will  have  been  saved.
       If  the  named  file  is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were
       specified), the information used for the comparison will be taken from the properties of  the  symbolic  link.
       Otherwise,  it  will  be  taken from the properties of the file the link points to.  If find cannot follow the
       link (for example because it has insufficient privileges or the link points to a nonexistent file) the proper‐
       ties of the link itself will be used.

       When  the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be derefer‐
       enced, and the timestamp will be taken from the file to which the symbolic link points.  The  same  considera‐
       tion applies to -newerXY, -anewer and -cnewer.

       The  -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is,
       if -L is not used but -follow is, any symbolic links appearing after -follow  on  the  command  line  will  be
       dereferenced, and those before it will not).

       -D debugopts
              Print  diagnostic information; this can be helpful to diagnose problems with why find is not doing what
              you want.  The list of debug options should be comma separated.  Compatibility of the debug options  is
              not guaranteed between releases of findutils.  For a complete list of valid debug options, see the out‐
              put of find -D help.  Valid debug options include

              exec   Show diagnostic information relating to -exec, -execdir, -ok and -okdir

              opt    Prints diagnostic information relating to the optimisation of the expression tree;  see  the  -O
                     option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

              search Navigate the directory tree verbosely.

              stat   Print  messages  as  files  are examined with the stat and lstat system calls.  The find program
                     tries to minimise such calls.

              tree   Show the expression tree in its original and optimised form.

              all    Enable all of the other debug options (but help).

              help   Explain the debugging options.

       -Olevel
              Enables query optimisation.  The find program reorders tests to speed up execution while preserving the
              overall  effect;  that  is, predicates with side effects are not reordered relative to each other.  The
              optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the  traditional  behaviour.   Expres‐
                     sions  are  reordered  so  that  tests  based  only on the names of files (for example -name and
                     -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names  of  files,  but
                     before any tests that require information from the inode.  On many modern versions of Unix, file
                     types are returned by readdir() and so these predicates are faster to evaluate  than  predicates
                     which  need to stat the file first.  If you use the -fstype FOO predicate and specify a filesys‐
                     tem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts,  that
                     predicate is equivalent to -false.

              3      At  this optimisation level, the full cost-based query optimiser is enabled.  The order of tests
                     is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are per‐
                     formed  later,  if  necessary.  Within each cost band, predicates are evaluated earlier or later
                     according to whether they are likely to succeed or not.  For -o, predicates which are likely  to
                     succeed  are  evaluated  earlier,  and for -a, predicates which are likely to fail are evaluated
                     earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.   In  some  cases
              the probability takes account of the specific nature of the test (for example, -type f is assumed to be
              more likely to succeed than -type c).  The cost-based optimiser is currently being  evaluated.   If  it
              does not actually improve the performance of find, it will be removed again.  Conversely, optimisations
              that prove to be reliable, robust and effective may be enabled at lower optimisation levels over  time.
              However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release se‐
              ries.  The findutils test suite runs all the tests on find at each optimisation level and ensures  that
              the result is the same.

EXPRESSION
       The  part  of  the  command line after the list of starting points is the expression.  This is a kind of query
       specification describing how we match files and what we do with the files that were matched.  An expression is
       composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.
              The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or
              false,  usually  based on whether or not they are successful.  The -print action for example prints the
              name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part  of  the  command  line.
              Global  options  always return true.  The -depth option for example makes find traverse the file system
              in a depth-first order.

       Positional options
              Positional options affect only tests or actions which follow them.  Positional  options  always  return
              true.   The  -regextype option for example is positional, specifying the regular expression dialect for
              regular expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for  example  -o  (meaning
              logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       The  -print action is performed on all files for which the whole expression is true, unless it contains an ac‐
       tion other than -prune or -quit.  Actions which inhibit the default -print are -delete, -exec, -execdir,  -ok,
       -okdir, -fls, -fprint, -fprintf, -ls, -print and -printf.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure  times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather
              than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow  op‐
              tion  affects  only  those tests which appear after it on the command line.  Unless the -H or -L option
              has been specified, the position of the -follow option changes the behaviour of the  -newer  predicate;
              any  files  listed as the argument of -newer will be dereferenced if they are symbolic links.  The same
              consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the  -type  predicate  will  always
              match  against  the type of the file that a symbolic link points to rather than the link itself.  Using
              -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later  on  the
              command line.  To see which regular expression types are known, use -regextype help.  The Texinfo docu‐
              mentation (see SEE ALSO) explains the meaning of and differences between the various types  of  regular
              expression.

       -warn, -nowarn
              Turn  warning messages on or off.  These warnings apply only to the command line usage, not to any con‐
              ditions that find might encounter when it searches directories.  The default behaviour  corresponds  to
              -warn  if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-
              line usage is produced, the exit status of find is not affected.  If  the  POSIXLY_CORRECT  environment
              variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global  options always return true.  Global options take effect even for tests which occur earlier on the com‐
       mand line.  To prevent confusion, global options should specified on the command-line after the list of  start
       points, just before the first test, positional option or action.  If you specify a global option in some other
       place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for ex‐
       ample.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally,  find will emit an error message when it fails to stat a file.  If you give this option and a
              file is deleted between the time find reads the name of the file from the directory  and  the  time  it
              tries  to  stat  the  file, no error message will be issued.  This also applies to files or directories
              whose names are given on the command line.  This option takes effect at the time the  command  line  is
              read,  which means that you cannot search one part of the filesystem with this option on and part of it
              with this option off (if you need to do that, you will need to issue two  find  commands  instead,  one
              with the option and one without it).

              Furthermore,  find with the -ignore_readdir_race option will ignore errors of the -delete action in the
              case the file has disappeared since the parent directory was read: it will not output an error diagnos‐
              tic, and the return code of the -delete action will be true.

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  Using
              -maxdepth 0 means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a  non-negative  integer).   Using  -min‐
              depth 1 means process all files except the starting-points.

       -mount Don't  descend  directories  on other filesystems.  An alternate name for -xdev, for compatibility with
              some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.
              This option is needed when searching filesystems that do not follow the Unix directory-link convention,
              such as CD-ROM or MS-DOS filesystems or AFS volume mount points.   Each  directory  on  a  normal  Unix
              filesystem has at least 2 hard links: its name and its `.' entry.  Additionally, its subdirectories (if
              any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has
              statted  2  fewer subdirectories than the directory's link count, it knows that the rest of the entries
              in the directory are non-directories (`leaf' files in the directory tree).  If only  the  files'  names
              need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and
       some reference file specified on the command line.  When these tests are used, the interpretation of the  ref‐
       erence  file  is  determined  by the options -H, -L and -P and any previous -follow, but the reference file is
       only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for ex‐
       ample,  the  stat(2) system call fails for it), an error message is issued, and find exits with a nonzero sta‐
       tus.

       A numeric argument n can be specified to tests (like -amin, -mtime,  -gid,  -inum,  -links,  -size,  -uid  and
       -used) as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       Supported tests:

       -amin n
              File was last accessed less than, more than or exactly n minutes ago.

       -anewer reference
              Time  of  the last access of the current file is more recent than that of the last data modification of
              the reference file.  If reference is a symbolic link and the -H option or the -L option is  in  effect,
              then the time of the last data modification of the file it points to is always used.

       -atime n
              File  was last accessed less than, more than or exactly n*24 hours ago.  When find figures out how many
              24-hour periods ago the file was last accessed, any fractional part is ignored, so to match  -atime +1,
              a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed less than, more than or exactly n minutes ago.

       -cnewer reference
              Time  of the last status change of the current file is more recent than that of the last data modifica‐
              tion of the reference file.  If reference is a symbolic link and the -H option or the -L option  is  in
              effect, then the time of the last data modification of the file it points to is always used.

       -ctime n
              File's  status  was  last changed less than, more than or exactly n*24 hours ago.  See the comments for
              -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable  (in  a  file  name  resolution
              sense)  by  the current user.  This takes into account access control lists and other permissions arte‐
              facts which the -perm test ignores.  This test makes use of the access(2) system call, and  so  can  be
              fooled  by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2)
              in the client's kernel and so cannot make use of the UID mapping information held on the  server.   Be‐
              cause  this test is based only on the result of the access(2) system call, there is no guarantee that a
              file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types  vary  among  different  versions  of
              Unix;  an  incomplete list of filesystem types that are accepted on some version of Unix or another is:
              ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see  the  types
              of your filesystems.

       -gid n File's numeric group ID is less than, more than or exactly n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like  -lname,  but the match is case insensitive.  If the -L option or the -follow option is in effect,
              this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*'  and  `F??'  match  the
              file  names  `Foo', `FOO', `foo', `fOo', etc.  The pattern `*foo*` will also match a file called '.foo‐
              bar'.

       -inum n
              File has inode number smaller than, greater than or exactly n.  It is normally easier to use the -same‐
              file test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has less than, more than or exactly n hard links.

       -lname pattern
              File  is  a  symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat
              `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false un‐
              less the symbolic link is broken.

       -mmin n
              File's data was last modified less than, more than or exactly n minutes ago.

       -mtime n
              File's  data  was  last  modified less than, more than or exactly n*24 hours ago.  See the comments for
              -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern  pattern.   Be‐
              cause  the leading directories are removed, the file names considered for a match with -name will never
              include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).   A
              warning  is  issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The
              metacharacters (`*', `?', and `[]') match a `.' at the start of the base name  (this  is  a  change  in
              findutils-4.2.2;  see  section STANDARDS CONFORMANCE below).  To ignore a directory and the files under
              it, use -prune rather than checking every file in the tree; see an example in the description  of  that
              action.   Braces  are not recognised as being special, despite the fact that some shells including Bash
              imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use
              of  the fnmatch(3) library function.  Don't forget to enclose the pattern in quotes in order to protect
              it from expansion by the shell.

       -newer reference
              Time of the last data modification of the current file is more recent than that of the last data  modi‐
              fication  of the reference file.  If reference is a symbolic link and the -H option or the -L option is
              in effect, then the time of the last data modification of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the  file  reference.
              The letters X and Y can be any of the following letters:

              a   The access time of the file reference
              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not im‐
              plemented on all systems; for example B is not supported on all systems.  If an invalid or  unsupported
              combination  of XY is specified, a fatal error results.  Time specifications are interpreted as for the
              argument to the -d option of GNU date.  If you try to use the birth time of a reference file,  and  the
              birth  time cannot be determined, a fatal error message results.  If you specify a test which refers to
              the birth time of files being examined, this test will fail for any files where the birth time  is  un‐
              known.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for
              example,
                  find . -path "./sr*sc"
              will print an entry for a directory called ./src/misc (if one exists).  To  ignore  a  whole  directory
              tree, use -prune rather than checking every file in the tree.  Note that the pattern match test applies
              to the whole file name, starting from one of the start points named on the command line.  It would only
              make  sense  to  use  an  absolute path name here if the relevant start point is also an absolute path.
              This means that this command will never match anything:
                  find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base  name  of  the
              file  it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a
              slash will match nothing (except perhaps a start point specified on the command line).   The  predicate
              -path is also supported by HP-UX find and is part of the POSIX 2008 standard.

       -perm mode
              File's  permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you
              want to use this form for symbolic modes, you may have to specify a rather complex  mode  string.   For
              example  `-perm  g=w'  will  only match files which have mode 0020 (that is, ones for which group write
              permission is the only permission set).  It is more likely that you will want to use  the  `/'  or  `-'
              forms,  for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES
              section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in  this  form,  and
              this  is  usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you
              use a symbolic mode.  See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this  form.   You
              must  specify  `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustra‐
              tive examples.  If no permission bits in mode are set, this test matches any file (the idea here is  to
              be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable by the current user.  This takes into account access control lists and
              other permissions artefacts which the -perm test ignores.  This test makes use of the access(2)  system
              call,  and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems
              implement access(2) in the client's kernel and so cannot make use of the UID mapping  information  held
              on the server.

       -regex pattern
              File  name  matches  regular expression pattern.  This is a match on the whole path, not a search.  For
              example, to match a file named ./fubar3, you can use the regular expression `.*bar.' or  `.*b.*3',  but
              not  `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions (ex‐
              cept that `.' matches newline), but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.  When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses less than, more than or exactly n units of space, rounding up.  The following suffixes can be
              used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for kibibytes (KiB, units of 1024 bytes)

              `M'    for mebibytes (MiB, units of 1024 * 1024 = 1048576 bytes)

              `G'    for gibibytes (GiB, units of 1024 * 1024 * 1024 = 1073741824 bytes)

              The  size is simply the st_size member of the struct stat populated by the lstat (or stat) system call,
              rounded up as shown above.  In other words, it's consistent with the result you get for ls -l.  Bear in
              mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suf‐
              fix always denotes 512-byte blocks and never 1024-byte blocks, which is different to the  behaviour  of
              -ls.

              The  + and - prefixes signify greater than and less than, as usual; i.e., an exact size of n units does
              not match.  Bear in mind that the size is rounded up to the next  unit.   Therefore  -size -1M  is  not
              equivalent to -size -1048576c.  The former only matches empty files, the latter matches files from 0 to
              1,048,575 bytes.

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is  in  effect,  unless
                     the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use
                     -xtype.

              s      socket

              D      door (Solaris)

              To search for more than one type at once, you can supply the combined list of type letters separated by
              a comma `,' (GNU extension).

       -uid n File's numeric user ID is less than, more than or exactly n.

       -used n
              File was last accessed less than, more than or exactly n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable by the current user.  This takes into account access control lists and
              other permissions artefacts which the -perm test ignores.  This test makes use of the access(2)  system
              call,  and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems
              implement access(2) in the client's kernel and so cannot make use of the UID mapping  information  held
              on the server.

       -xtype c
              The  same  as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was
              specified, true if the file is a link to a file of type c; if the -L option has been given, true  if  c
              is  `l'.   In  other  words, for symbolic links, -xtype checks the type of the file that -type does not
              check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal  failed,  an  error  message  is  issued.   If
              -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automati‐
              cally turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an  expression,  so  putting  -delete
              first  will make find try to delete everything below the starting points you specified.  When testing a
              find command line that you later intend to use with -delete, you should explicitly  specify  -depth  in
              order  to  avoid  later  surprises.  Because -delete implies -depth, you cannot usefully use -prune and
              -delete together.

              Together with the -ignore_readdir_race option, find will ignore errors of the  -delete  action  in  the
              case the file has disappeared since the parent directory was read: it will not output an error diagnos‐
              tic, and the return code of the -delete action will be true.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to  be  argu‐
              ments  to  the command until an argument consisting of `;' is encountered.  The string `{}' is replaced
              by the current file name being processed everywhere it occurs in the arguments to the command, not just
              in arguments where it is alone, as in some versions of find.  Both of these constructions might need to
              be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the  EXAMPLES  sec‐
              tion  for  examples of the use of the -exec option.  The specified command is run once for each matched
              file.  The command is executed in the starting directory.  There are unavoidable security problems sur‐
              rounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line
              is built by appending each selected file name at the end; the total number of invocations of  the  com‐
              mand  will  be  much less than the number of matched files.  The command line is built in much the same
              way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command,  and
              it must appear at the end, immediately before the `+'; it needs to be escaped (with a `\') or quoted to
              protect it from interpretation by the shell.  The command is executed in the  starting  directory.   If
              any  invocation with the `+' form returns a non-zero value as exit status, then find returns a non-zero
              exit status.  If find encounters an error, this can sometimes cause an immediate exit, so some  pending
              commands  may not be run at all.  For this reason -exec my-command ... {} + -quit may not result in my-
              command actually being run.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched  file,  which
              is  not  normally  the  directory in which you started find.  As with -exec, the {} should be quoted if
              find is being invoked from a shell.  This a much more secure method for invoking commands, as it avoids
              race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+'
              form of -execdir will build a command line to process more than one matched file, but any given invoca‐
              tion  of command will only list files that exist in the same subdirectory.  If you use this option, you
              must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run
              any commands they like by leaving an appropriately-named file in a directory in which you will run -ex‐
              ecdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory
              names.   If any invocation with the `+' form returns a non-zero value as exit status, then find returns
              a non-zero exit status.  If find encounters an error, this can sometimes cause an  immediate  exit,  so
              some  pending commands may not be run at all.  The result of the action depends on whether the + or the
              ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns
              true only if command returns 0.

       -fls file
              True;  like  -ls but write to file like -fprint.  The output file is always created, even if the predi‐
              cate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual  characters
              in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created;
              if it does exist, it is truncated.  The file names /dev/stdout and /dev/stderr are  handled  specially;
              they  refer  to the standard output and standard error output, respectively.  The output file is always
              created, even if the predicate is never matched.  See the UNUSUAL  FILENAMES  section  for  information
              about how unusual characters in filenames are handled.

       -fprint0 file
              True;  like  -print0  but  write  to file like -fprint.  The output file is always created, even if the
              predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual  char‐
              acters in filenames are handled.

       -fprintf file format
              True;  like  -printf  but  write  to file like -fprint.  The output file is always created, even if the
              predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual  char‐
              acters in filenames are handled.

       -ls    True;  list  current  file in ls -dils format on standard output.  The block counts are of 1 KB blocks,
              unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks  are  used.   See
              the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like  -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.
              If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if  it  is  an
              affirmative  or  negative  response.   This  regular  expression  is  obtained  from  the system if the
              `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.   If  the
              system has no suitable definition, find's own definition will be used.  In either case, the interpreta‐
              tion of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (charac‐
              ter classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like  -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just re‐
              turn false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.  If you  are  piping  the
              output  of find into another program and there is the faintest possibility that the files which you are
              searching for might contain a newline, then you should seriously consider using the -print0 option  in‐
              stead  of  -print.   See  the UNUSUAL FILENAMES section for information about how unusual characters in
              filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null  character  (instead  of  the
              newline  character  that  -print uses).  This allows file names that contain newlines or other types of
              white space to be correctly interpreted by programs that process the find output.  This  option  corre‐
              sponds to the -0 option of xargs.

       -printf format
              True;  print  format on the standard output, interpreting `\' escapes and `%' directives.  Field widths
              and precisions can be specified as with the printf(3) C function.  Please note that many of the  fields
              are  printed  as  %s rather than %d, and this may mean that flags don't work as you might expect.  This
              also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike  -print,  -printf
              does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A  `\'  character followed by any other character is treated as an ordinary character, so they both are
              printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C ctime(3) function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the
                     C  strftime(3)  function.   The  following  shows  an  incomplete list of possible values for k.
                     Please refer to the documentation of strftime(3) for the full  list.   Some  of  the  conversion
                     specification characters might not be available on all systems, due to differences in the imple‐
                     mentation of the strftime(3) library function.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss.xxxxxxxxxx)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU  ex‐
                            tension.  The time is given in the current timezone (which may be affected by setting the
                            TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S).  The seconds field includes a fractional part.

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is  the  same  as  for
                            ctime(3)  and  so to preserve compatibility with that format, there is no fractional part
                            in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     F      date (yyyy-mm-dd)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space  is  allocated
                     in  multiples  of the filesystem block size this is usually greater than %s/512, but it can also
                     be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C ctime(3) function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     Print the basename; the file's name with any leading directories removed  (only  the  last  ele‐
                     ment).  For /, the result is `/'.  See the EXAMPLES section for an example.

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Dirname;  the  Leading  directories  of the file's name (all but the last element).  If the file
                     name contains no slashes (since it is in the current directory) the %h specifier expands to `.'.
                     For  files which are themselves directories and contain a slash (including /), %h expands to the
                     empty string.  See the EXAMPLES section for an example.

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1 KB blocks.  Since disk space  is  allocated  in
                     multiples  of the filesystem block size this is usually greater than %s/1024, but it can also be
                     smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which  most  Unix
                     implementations  use,  but  if  your particular implementation uses an unusual ordering of octal
                     permissions bits, you will see a difference between the actual value of the file's mode and  the
                     output of %m.  Normally you will want to have a leading zero on this number, and to do this, you
                     should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This  directive  is  supported  in  findutils
                     4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's  sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you
                     will get for an ordinary file of a certain length is system-dependent.  However, normally sparse
                     files will have values less than 1.0, and files which use indirect blocks may have a value which
                     is greater than 1.0.  In general the number of blocks used by a file is file  system  dependent.
                     The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.  If the file size is
                     zero, the value printed is undefined.  On systems which lack support  for  st_blocks,  a  file's
                     sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C ctime(3) function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's  type (like %y), plus follow symbolic links: `L'=loop, `N'=nonexistent, `?' for any other
                     error when determining the type of the target of a symbolic link.

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't
              rely on this, as further format characters may be introduced).  A `%' at the end of the format argument
              causes undefined behaviour since there is no following character.  In some locales, it  may  hide  your
              door keys, while in others it may remove the final page from the novel you are reading.

              The  %m  and  %d directives support the #, 0 and + flags, but the other directives do not, even if they
              print numbers.  Numeric directives that do not support these flags include G, U, b, D, k  and  n.   The
              `-'  format  flag  is supported and changes the alignment of a field from right-justified (which is the
              default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in  filenames  are  han‐
              dled.

       -prune True;  if  the file is a directory, do not descend into it.  If -depth is given, then -prune has no ef‐
              fect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.  For  exam‐
              ple, to skip the directory src/emacs and all files and directories under it, and print the names of the
              other files found, do something like this:
                  find . -path ./src/emacs -prune -o -print

       -quit  Exit immediately (with return value zero if no errors have occurred).  This is different to -prune  be‐
              cause -prune only applies to the contents of pruned directories, while -quit simply makes find stop im‐
              mediately.  No child processes will be left running.  Any  command  lines  which  have  been  built  by
              -exec ... +  or  -execdir ... +  are invoked before the program is exited.  After -quit is executed, no
              more   files   specified   on    the    command    line    will    be    processed.     For    example,
              `find /tmp/foo /tmp/bar -print -quit` will print only `/tmp/foo`.
              One  common use of -quit is to stop searching the file system once we have found what we want.  For ex‐
              ample, if we want to find just a single file we can do this:
                  find / -name needle -print -quit

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need  to  quote  them.
              Many  of  the  examples  in  this  manual  page  use backslashes for this purpose: `\(...\)' instead of
              `(...)'.

       ! expr True if expr is false.  This character will also usually need protection  from  interpretation  by  the
              shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two  expressions in a row are taken to be joined with an implied -a; expr2 is not evaluated if expr1 is
              false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded;  the  value  of  the
              list is the value of expr2.  The comma operator can be useful for searching for several different types
              of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used  to  list
              the various matched items into several different output files.

       Please note that -a when specified implicitly (for example by two tests appearing without an explicit operator
       between them) or explicitly has higher precedence than -o.  This means that find . -name afile -o -name  bfile
       -print will never print afile.

UNUSUAL FILENAMES
       Many  of  the  actions of find result in the printing of data which is under the control of other users.  This
       includes file names, sizes, modification times and so forth.  File names are a potential  problem  since  they
       can  contain  any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often
       undesirable things to your terminal (for example, changing the settings of your function keys on  some  termi‐
       nals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed
              using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using  an  octal
              escape.   Other  printable  characters (for -ls and -fls these are the characters between octal 041 and
              0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on  which
              directive  is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not un‐
              der control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M,
              %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used
              to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l,  %p
              and  %P  are  quoted.   This  quoting is performed in the same way as for GNU ls.  This is not the same
              quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to  use  for
              the  output of find then it is normally better to use `\0' as a terminator than to use newline, as file
              names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment  vari‐
              able is used to determine which characters need to be quoted.

       -print, -fprint
              Quoting  is  handled in the same way as for -printf and -fprintf.  If you are using find in a script or
              in a situation where the matched files might have arbitrary names, you should  consider  using  -print0
              instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For  closest  compliance  to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The
       following options are specified in the POSIX standard (IEEE Std 1003.1-2008, 2016 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of  the  system's  fn‐
              match(3)  library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example)
              match a leading `.', because IEEE PASC interpretation 126 requires this.  This is a change from  previ‐
              ous versions of findutils.

       -type  Supported.   POSIX  specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', repre‐
              senting a Door, where the OS provides these.  Furthermore, GNU find allows multiple types to be  speci‐
              fied at once in a comma-separated list.

       -ok    Supported.  Interpretation of the response is according to the `yes' and `no' patterns selected by set‐
              ting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable  is  set,
              these  patterns  are  taken system's definition of a positive (yes) or negative (no) response.  See the
              system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.  When `POSIXLY_CORRECT' is
              not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from
              previous behaviour, which used to take the relevant time from the symbolic link; see the  HISTORY  sec‐
              tion below.

       -perm  Supported.   If  the  POSIXLY_CORRECT environment variable is not set, some mode arguments (for example
              +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other primaries
              The primaries -atime, -ctime, -depth, -exec, -group, -links, -mtime,  -nogroup,  -nouser,  -ok,  -path,
              -print, -prune, -size, -user and -xdev are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the logical AND/OR operators -a and -o.

       All  other  options,  predicates,  expressions and so forth are extensions beyond the POSIX standard.  Many of
       these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that  is
              an  ancestor  of the last file encountered.  When it detects an infinite loop, find shall write a diag‐
              nostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard
       links  to  an  ancestor  will  often be lower than they otherwise should be.  This can mean that GNU find will
       sometimes optimise away the visiting of a subdirectory which is actually a link to an  ancestor.   Since  find
       does  not  actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although
       this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.   If
       the  leaf  optimisation  has been turned off with -noleaf, the directory entry will always be examined and the
       diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem
       cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find
       encounters a loop of symbolic links.  As with loops containing hard links, the leaf  optimisation  will  often
       mean  that  find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic
       is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the  POSIX-compliant
       option -depth instead.

       The  POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because
       those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all  the  other  internationalization  vari‐
              ables.

       LC_COLLATE
              The  POSIX  standard specifies that this variable affects the pattern matching to be used for the -name
              option.  GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on  the
              system  library.   This  variable  also  affects  the  interpretation of the response to -ok; while the
              `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the  interpre‐
              tation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This  variable affects the treatment of character classes used in regular expressions and also with the
              -name test, if the system's fnmatch(3) library function supports this.  This variable also affects  the
              interpretation  of  any  character classes in the regular expressions used to interpret the response to
              the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect  which  characters  are
              considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines  the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment
              variable is set, this also determines the interpretation of the response to the prompt made by the  -ok
              action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects  the directories which are searched to find the executables invoked by -exec, -execdir, -ok and
              -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks  are  units  of  512
              bytes.  Otherwise they are units of 1024 bytes.

              Setting  this  variable  also turns off warning messages (that is, implies -nowarn) by default, because
              POSIX requires that apart from the output for -ok, all messages printed on stderr are  diagnostics  and
              must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid sym‐
              bolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according
              to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
   Simple `find|xargs` approach
       •      Find files named core in or below the directory /tmp and delete them.

                  $ find /tmp -name core -type f -print | xargs /bin/rm -f

              Note  that  this will work incorrectly if there are any filenames containing newlines, single or double
              quotes, or spaces.

   Safer `find -print0 | xargs -0` approach
       •      Find files named core in or below the directory /tmp and delete them, processing filenames  in  such  a
              way  that  file or directory names containing single or double quotes, spaces or newlines are correctly
              handled.

                  $ find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

              The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       Note that there is still a race between the time find traverses the hierarchy printing the matching filenames,
       and the time the process executed by xargs works with that file.

   Executing a command for each file
       •      Run file on every file in or below the current directory.

                  $ find . -type f -exec file '{}' \;

              Notice  that the braces are enclosed in single quote marks to protect them from interpretation as shell
              script punctuation.  The semicolon is similarly protected by the use  of  a  backslash,  though  single
              quotes could have been used in that case also.

       In  many  cases,  one might prefer the `-exec ... +` or better the `-execdir ... +` syntax for performance and
       security reasons.

   Traversing the filesystem just once - for 2 different actions
       •      Traverse the filesystem just once, listing set-user-ID files and directories  into  /root/suid.txt  and
              large files into /root/big.txt.

                  $ find / \
                      \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
                      \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

              This  example  uses the line-continuation character '\' on the first two lines to instruct the shell to
              continue reading the command on the next line.

   Searching files by age
       •      Search for files in your home directory which have been modified in the last twenty-four hours.

                  $ find $HOME -mtime 0

              This command works this way because the time since each file was last modified is divided by  24  hours
              and  any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modifi‐
              cation in the past which is less than 24 hours ago.

   Searching files by permissions
       •      Search for files which are executable but not readable.

                  $ find /sbin /usr/sbin -executable \! -readable -print

       •      Search for files which have read and write permission for their owner, and group, but which other users
              can read but not write to.

                  $ find . -perm 664

              Files which meet these criteria but have other permissions bits set (for example if someone can execute
              the file) will not be matched.

       •      Search for files which have read and write permission for their owner and group, and which other  users
              can read, without regard to the presence of any extra permission bits (for example the executable bit).

                  $ find . -perm -664

              This will match a file which has mode 0777, for example.

       •      Search for files which are writable by somebody (their owner, or their group, or anybody else).

                  $ find . -perm /222

       •      Search for files which are writable by either their owner or their group.

                  $ find . -perm /220
                  $ find . -perm /u+w,g+w
                  $ find . -perm /u=w,g=w

              All  three  of these commands do the same thing, but the first one uses the octal representation of the
              file mode, and the other two use the symbolic form.  The files don't have to be writable  by  both  the
              owner and group to be matched; either will do.

       •      Search for files which are writable by both their owner and their group.

                  $ find . -perm -220
                  $ find . -perm -g+w,u+w

              Both these commands do the same thing.

       •      A more elaborate search on permissions.

                  $ find . -perm -444 -perm /222 \! -perm /111
                  $ find . -perm -a+r -perm /a+w \! -perm /a+x

              These  two  commands  both search for files that are readable for everybody (-perm -444 or -perm -a+r),
              have at least one write bit set (-perm /222 or -perm /a+w) but are not executable for anybody (!  -perm
              /111 or ! -perm /a+x respectively).

   Pruning - omitting files and subdirectories
       •      Copy the contents of /source-dir to /dest-dir, but omit files and directories named .snapshot (and any‐
              thing in them).  It also omits files or directories whose name ends in '~', but not their contents.

                  $ cd /source-dir
                  $ find . -name .snapshot -prune -o \( \! -name '*~' -print0 \) \
                      | cpio -pmd0 /dest-dir

              The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before
              -prune  matches  things which are to be pruned.  However, the -prune action itself returns true, so the
              following -o ensures that the right hand side is evaluated only for those directories which didn't  get
              pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).
              The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that
              the  -print0  action  takes place only for things that didn't have -prune applied to them.  Because the
              default `and' condition between tests binds more tightly than -o, this is the default anyway,  but  the
              parentheses help to show what is going on.

       •      Given  the following directory of projects and their associated SCM administrative directories, perform
              an efficient search for the projects' roots:

                  $ find repo/ \
                      \( -exec test -d '{}/.svn' \; \
                      -or -exec test -d '{}/.git' \; \
                      -or -exec test -d '{}/CVS' \; \
                      \) -print -prune

              Sample output:

                  repo/project1/CVS
                  repo/gnu/project2/.svn
                  repo/gnu/project3/.svn
                  repo/gnu/project3/src/.svn
                  repo/project4/.git

              In this example, -prune prevents unnecessary descent into directories that have already been discovered
              (for example we do not search project3/src because we already found project3/.svn), but ensures sibling
              directories (project2 and project3) are found.

   Other useful examples
       •      Search for several file types.

                  $ find /tmp -type f,d,l

              Search for files, directories, and symbolic links in the directory /tmp passing these types as a comma-
              separated list (GNU extension), which is otherwise equivalent to the longer, yet more portable:

                  $ find /tmp \( -type f -o -type d -o -type l \)

       •      Search for files with the particular name needle and stop immediately when we find the first one.

                  $ find / -name needle -print -quit

       •      Demonstrate  the  interpretation of the %f and %h format directives of the -printf action for some cor‐
              ner-cases.  Here is an example including some output.

                  $ find . .. / /tmp /tmp/TRACE compile compile/64/tests/find -maxdepth 0 -printf '[%h][%f]\n'
                  [.][.]
                  [.][..]
                  [][/]
                  [][tmp]
                  [/tmp][TRACE]
                  [.][compile]
                  [compile/64/tests][find]

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.  This is de‐
       liberately  a very broad description, but if the return value is non-zero, you should not rely on the correct‐
       ness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example,
       some starting points may not have been examined or some pending program invocations for -exec ... {} + or -ex‐
       ecdir ... {} + may not have been performed.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns  match  a
       leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However,
       find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax  had  been
       deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
   Operator precedence surprises
       The  command  find . -name afile -o -name bfile -print will never print afile because this is actually equiva‐
       lent to find . -name afile -o \( -name bfile -a -print \).  Remember that the precedence of -a is higher  than
       that of -o and when there is no operator specified between tests, -a is assumed.

   “paths must precede expression” error message
       $ find . -name *.c -print
       find: paths must precede expression
       find: possible unquoted pattern after predicate `-name'?

       This  happens  when  the shell could expand the pattern *.c to more than one file name existing in the current
       directory, and passing the resulting file names in the command line to find like this:
       find . -name frcode.c locate.c word_io.c -print
       That command is of course not going to work, because the -name predicate allows exactly only  one  pattern  as
       argument.   Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard,
       thus allowing find to use the pattern with the wildcard during the search for file name  matching  instead  of
       file names expanded by the parent shell:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which there‐
       fore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be  used  in‐
       stead.

       The environment variable LC_COLLATE has no effect on the -ok action.

REPORTING BUGS
       GNU findutils online help: <https://www.gnu.org/software/findutils/#get-help>
       Report any translation bugs to <https://translationproject.org/team/>

       Report any other issue via the form at the GNU Savannah bug tracker:
              <https://savannah.gnu.org/bugs/?group=findutils>
       General topics about the GNU findutils package are discussed at the bug-findutils mailing list:
              <https://lists.gnu.org/mailman/listinfo/bug-findutils>

COPYRIGHT
       Copyright  ©  1990-2021  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later
       <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the  extent  per‐
       mitted by law.

SEE ALSO
       chmod(1),  locate(1),  ls(1),  updatedb(1), xargs(1), lstat(2), stat(2), ctime(3) fnmatch(3), printf(3), strf‐
       time(3), locatedb(5), regex(7)

       Full documentation <https://www.gnu.org/software/findutils/find>
       or available locally via: info find

                                                                                                              FIND(1)

================================================================================

COMMAND: chmod
CHMOD(1)                                            User Commands                                            CHMOD(1)

NAME
       chmod - change file mode bits

SYNOPSIS
       chmod [OPTION]... MODE[,MODE]... FILE...
       chmod [OPTION]... OCTAL-MODE FILE...
       chmod [OPTION]... --reference=RFILE FILE...

DESCRIPTION
       This  manual page documents the GNU version of chmod.  chmod changes the file mode bits of each given file ac‐
       cording to mode, which can be either a symbolic representation of changes to make, or an octal  number  repre‐
       senting the bit pattern for the new mode bits.

       The  format  of  a  symbolic mode is [ugoa...][[-+=][perms...]...], where perms is either zero or more letters
       from the set rwxXst, or a single letter from the set ugo.  Multiple symbolic modes can be given, separated  by
       commas.

       A  combination of the letters ugoa controls which users' access to the file will be changed: the user who owns
       it (u), other users in the file's group (g), other users not in the file's group (o), or all  users  (a).   If
       none  of  these  are given, the effect is as if (a) were given, but bits that are set in the umask are not af‐
       fected.

       The operator + causes the selected file mode bits to be added to the existing file mode bits of each  file;  -
       causes them to be removed; and = causes them to be added and causes unmentioned bits to be removed except that
       a directory's unmentioned set user and group ID bits are not affected.

       The letters rwxXst select file mode bits for the affected users: read (r), write (w), execute (or  search  for
       directories)  (x),  execute/search  only if the file is a directory or already has execute permission for some
       user (X), set user or group ID on execution (s), restricted deletion flag or sticky bit (t).  Instead  of  one
       or  more of these letters, you can specify exactly one of the letters ugo: the permissions granted to the user
       who owns the file (u), the permissions granted to other users who are members of the file's group (g), and the
       permissions granted to users that are in neither of the two preceding categories (o).

       A  numeric mode is from one to four octal digits (0-7), derived by adding up the bits with values 4, 2, and 1.
       Omitted digits are assumed to be leading zeros.  The first digit selects the set user ID (4) and set group  ID
       (2)  and  restricted deletion or sticky (1) attributes.  The second digit selects permissions for the user who
       owns the file: read (4), write (2), and execute (1); the third selects permissions  for  other  users  in  the
       file's group, with the same values; and the fourth for other users not in the file's group, with the same val‐
       ues.

       chmod never changes the permissions of symbolic links; the chmod system call cannot change their  permissions.
       This is not a problem since the permissions of symbolic links are never used.  However, for each symbolic link
       listed on the command line, chmod changes the permissions of the pointed-to file.  In contrast, chmod  ignores
       symbolic links encountered during recursive directory traversals.

SETUID AND SETGID BITS
       chmod clears the set-group-ID bit of a regular file if the file's group ID does not match the user's effective
       group ID or one of the user's supplementary group IDs, unless the user has appropriate privileges.  Additional
       restrictions  may  cause  the set-user-ID and set-group-ID bits of MODE or RFILE to be ignored.  This behavior
       depends on the policy and functionality of the underlying chmod system call.  When in doubt, check the  under‐
       lying system behavior.

       For  directories  chmod  preserves  set-user-ID and set-group-ID bits unless you explicitly specify otherwise.
       You can set or clear the bits with symbolic modes like u+s and g-s.  To clear these bits for directories  with
       a numeric mode requires an additional leading zero, or leading = like 00755 , or =755

RESTRICTED DELETION FLAG OR STICKY BIT
       The  restricted  deletion  flag  or sticky bit is a single bit, whose interpretation depends on the file type.
       For directories, it prevents unprivileged users from removing or renaming a file in the directory unless  they
       own  the file or the directory; this is called the restricted deletion flag for the directory, and is commonly
       found on world-writable directories like /tmp.  For regular files on some older systems,  the  bit  saves  the
       program's text image on the swap device so it will load more quickly when run; this is called the sticky bit.

OPTIONS
       Change the mode of each FILE to MODE.  With --reference, change the mode of each FILE to that of RFILE.

       -c, --changes
              like verbose but report only when a change is made

       -f, --silent, --quiet
              suppress most error messages

       -v, --verbose
              output a diagnostic for every file processed

       --no-preserve-root
              do not treat '/' specially (the default)

       --preserve-root
              fail to operate recursively on '/'

       --reference=RFILE
              use RFILE's mode instead of MODE values

       -R, --recursive
              change files and directories recursively

       --help display this help and exit

       --version
              output version information and exit

       Each MODE is of the form '[ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+'.

AUTHOR
       Written by David MacKenzie and Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright   ©   2020   Free   Software   Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later
       <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the  extent  per‐
       mitted by law.

SEE ALSO
       chmod(2)

       Full documentation <https://www.gnu.org/software/coreutils/chmod>
       or available locally via: info '(coreutils) chmod invocation'

GNU coreutils 8.32                                  February 2024                                            CHMOD(1)

================================================================================

COMMAND: chown
CHOWN(1)                                            User Commands                                            CHOWN(1)

NAME
       chown - change file owner and group

SYNOPSIS
       chown [OPTION]... [OWNER][:[GROUP]] FILE...
       chown [OPTION]... --reference=RFILE FILE...

DESCRIPTION
       This  manual  page  documents the GNU version of chown.  chown changes the user and/or group ownership of each
       given file.  If only an owner (a user name or numeric user ID) is given, that user is made the owner  of  each
       given file, and the files' group is not changed.  If the owner is followed by a colon and a group name (or nu‐
       meric group ID), with no spaces between them, the group ownership of the files is changed as well.  If a colon
       but  no  group name follows the user name, that user is made the owner of the files and the group of the files
       is changed to that user's login group.  If the colon and group are given, but the owner is omitted,  only  the
       group  of  the  files is changed; in this case, chown performs the same function as chgrp.  If only a colon is
       given, or if the entire operand is empty, neither the owner nor the group is changed.

OPTIONS
       Change the owner and/or group of each FILE to OWNER and/or GROUP.  With  --reference,  change  the  owner  and
       group of each FILE to those of RFILE.

       -c, --changes
              like verbose but report only when a change is made

       -f, --silent, --quiet
              suppress most error messages

       -v, --verbose
              output a diagnostic for every file processed

       --dereference
              affect the referent of each symbolic link (this is the default), rather than the symbolic link itself

       -h, --no-dereference
              affect symbolic links instead of any referenced file (useful only on systems that can change the owner‐
              ship of a symlink)

       --from=CURRENT_OWNER:CURRENT_GROUP
              change the owner and/or group of each file only if its current owner and/or group match those specified
              here.  Either may be omitted, in which case a match is not required for the omitted attribute

       --no-preserve-root
              do not treat '/' specially (the default)

       --preserve-root
              fail to operate recursively on '/'

       --reference=RFILE
              use RFILE's owner and group rather than specifying OWNER:GROUP values

       -R, --recursive
              operate on files and directories recursively

       The  following options modify how a hierarchy is traversed when the -R option is also specified.  If more than
       one is specified, only the final one takes effect.

       -H     if a command line argument is a symbolic link to a directory, traverse it

       -L     traverse every symbolic link to a directory encountered

       -P     do not traverse any symbolic links (default)

       --help display this help and exit

       --version
              output version information and exit

       Owner is unchanged if missing.  Group is unchanged if missing, but changed to login group if implied by a  ':'
       following a symbolic OWNER.  OWNER and GROUP may be numeric as well as symbolic.

EXAMPLES
       chown root /u
              Change the owner of /u to "root".

       chown root:staff /u
              Likewise, but also change its group to "staff".

       chown -hR root /u
              Change the owner of /u and subfiles to "root".

AUTHOR
       Written by David MacKenzie and Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright   ©   2020   Free   Software   Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later
       <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the  extent  per‐
       mitted by law.

SEE ALSO
       chown(2)

       Full documentation <https://www.gnu.org/software/coreutils/chown>
       or available locally via: info '(coreutils) chown invocation'

GNU coreutils 8.32                                  February 2024                                            CHOWN(1)

================================================================================

COMMAND: tar
TAR(1)                                              GNU TAR Manual                                             TAR(1)

NAME
       tar - an archiving utility

SYNOPSIS
   Traditional usage
       tar {A|c|d|r|t|u|x}[GnSkUWOmpsMBiajJzZhPlRvwo] [ARG...]

   UNIX-style usage
       tar -A [OPTIONS] ARCHIVE ARCHIVE

       tar -c [-f ARCHIVE] [OPTIONS] [FILE...]

       tar -d [-f ARCHIVE] [OPTIONS] [FILE...]

       tar -t [-f ARCHIVE] [OPTIONS] [MEMBER...]

       tar -r [-f ARCHIVE] [OPTIONS] [FILE...]

       tar -u [-f ARCHIVE] [OPTIONS] [FILE...]

       tar -x [-f ARCHIVE] [OPTIONS] [MEMBER...]

   GNU-style usage
       tar {--catenate|--concatenate} [OPTIONS] ARCHIVE ARCHIVE

       tar --create [--file ARCHIVE] [OPTIONS] [FILE...]

       tar {--diff|--compare} [--file ARCHIVE] [OPTIONS] [FILE...]

       tar --delete [--file ARCHIVE] [OPTIONS] [MEMBER...]

       tar --append [-f ARCHIVE] [OPTIONS] [FILE...]

       tar --list [-f ARCHIVE] [OPTIONS] [MEMBER...]

       tar --test-label [--file ARCHIVE] [OPTIONS] [LABEL...]

       tar --update [--file ARCHIVE] [OPTIONS] [FILE...]

       tar --update [-f ARCHIVE] [OPTIONS] [FILE...]

       tar {--extract|--get} [-f ARCHIVE] [OPTIONS] [MEMBER...]

NOTE
       This  manpage is a short description of GNU tar.  For a detailed discussion, including examples and usage rec‐
       ommendations, refer to the GNU Tar Manual available in texinfo format.  If the info reader and the  tar  docu‐
       mentation are properly installed on your system, the command

           info tar

       should give you access to the complete manual.

       You can also view the manual using the info mode in emacs(1), or find it in various formats online at

           http://www.gnu.org/software/tar/manual

       If  any discrepancies occur between this manpage and the GNU Tar Manual, the later shall be considered the au‐
       thoritative source.

DESCRIPTION
       GNU tar is an archiving program designed to store multiple files in a single file (an archive), and to manipu‐
       late  such  archives.  The archive can be either a regular file or a device (e.g. a tape drive, hence the name
       of the program, which stands for tape archiver), which can be located either on the local or on a  remote  ma‐
       chine.

   Option styles
       Options  to  GNU  tar  can  be given in three different styles.  In traditional style, the first argument is a
       cluster of option letters and all subsequent arguments supply arguments to those options  that  require  them.
       The  arguments are read in the same order as the option letters.  Any command line words that remain after all
       options has been processed are treated as non-optional arguments: file or archive member names.

       For example, the c option requires creating the archive, the v option requests the verbose operation, and  the
       f  option takes an argument that sets the name of the archive to operate upon.  The following command, written
       in the traditional style, instructs tar to store all files from the  directory  /etc  into  the  archive  file
       etc.tar verbosely listing the files being archived:

       tar cfv etc.tar /etc

       In  UNIX  or  short-option  style, each option letter is prefixed with a single dash, as in other command line
       utilities.  If an option takes argument, the argument follows it, either as a separate command line  word,  or
       immediately following the option.  However, if the option takes an optional argument, the argument must follow
       the option letter without any intervening whitespace, as in -g/tmp/snar.db.

       Any number of options not taking arguments can be clustered together after a single dash, e.g. -vkp.   Options
       that  take  arguments  (whether  mandatory  or  optional), can appear at the end of such a cluster, e.g. -vkpf
       a.tar.

       The example command above written in the short-option style could look like:

       tar -cvf etc.tar /etc
       or
       tar -c -v -f etc.tar /etc

       In GNU or long-option style, each option begins with two dashes and  has  a  meaningful  name,  consisting  of
       lower-case letters and dashes.  When used, the long option can be abbreviated to its initial letters, provided
       that this does not create ambiguity.  Arguments to long options are supplied either as a separate command line
       word,  immediately  following  the  option, or separated from the option by an equals sign with no intervening
       whitespace.  Optional arguments must always use the latter method.

       Here are several ways of writing the example command in this style:

       tar --create --file etc.tar --verbose /etc
       or (abbreviating some options):
       tar --cre --file=etc.tar --verb /etc

       The options in all three styles can be intermixed, although doing so with old options is not encouraged.

   Operation mode
       The options listed in the table below tell GNU tar what operation it is to perform.  Exactly one of them  must
       be given.  Meaning of non-optional arguments depends on the operation mode requested.

       -A, --catenate, --concatenate
              Append  archive  to  the end of another archive.  The arguments are treated as the names of archives to
              append.  All archives must be of the same format as the archive they are appended to, otherwise the re‐
              sulting archive might be unusable with non-GNU implementations of tar.  Notice also that when more than
              one archive is given, the members from archives other than the first one will be accessible in the  re‐
              sulting archive only if using the -i (--ignore-zeros) option.

              Compressed archives cannot be concatenated.

       -c, --create
              Create  a  new  archive.   Arguments  supply  the  names  of the files to be archived.  Directories are
              archived recursively, unless the --no-recursion option is given.

       -d, --diff, --compare
              Find differences between archive and file system.  The arguments are optional and specify archive  mem‐
              bers to compare.  If not given, the current working directory is assumed.

       --delete
              Delete  from  the  archive.  The arguments supply names of the archive members to be removed.  At least
              one argument must be given.

              This option does not operate on compressed archives.  There is no short option equivalent.

       -r, --append
              Append files to the end of an archive.  Arguments have the same meaning as for -c (--create).

       -t, --list
              List the contents of an archive.  Arguments are optional.  When given, they specify the  names  of  the
              members to list.

       --test-label
              Test  the  archive  volume label and exit.  When used without arguments, it prints the volume label (if
              any) and exits with status 0.  When one or more command line arguments are  given.   tar  compares  the
              volume  label with each argument.  It exits with code 0 if a match is found, and with code 1 otherwise.
              No output is displayed, unless used together with the -v (--verbose) option.

              There is no short option equivalent for this option.

       -u, --update
              Append files which are newer than the corresponding copy in the archive.  Arguments have the same mean‐
              ing  as  with  -c and -r options.  Notice, that newer files don't replace their old archive copies, but
              instead are appended to the end of archive.  The resulting archive can thus contain several members  of
              the same name, corresponding to various versions of the same file.

       -x, --extract, --get
              Extract  files from an archive.  Arguments are optional.  When given, they specify names of the archive
              members to be extracted.

       --show-defaults
              Show built-in defaults for various tar options and exit.  No arguments are allowed.

       -?, --help
              Display a short option summary and exit.  No arguments allowed.

       --usage
              Display a list of available options and exit.  No arguments allowed.

       --version
              Print program version and copyright information and exit.

OPTIONS
   Operation modifiers
       --check-device
              Check device numbers when creating incremental archives (default).

       -g, --listed-incremental=FILE
              Handle new GNU-format incremental backups.  FILE is the name of a snapshot file, where tar stores addi‐
              tional information which is used to decide which files changed since the previous incremental dump and,
              consequently, must be dumped again.  If FILE does not exist when creating an archive, it will  be  cre‐
              ated  and  all  files will be added to the resulting archive (the level 0 dump).  To create incremental
              archives of non-zero level N, create a copy of the snapshot file created during the level N-1, and  use
              it as FILE.

              When listing or extracting, the actual contents of FILE is not inspected, it is needed only due to syn‐
              tactical requirements.  It is therefore common practice to use /dev/null in its place.

       --hole-detection=METHOD
              Use METHOD to detect holes in sparse files.  This option implies --sparse.  Valid values for METHOD are
              seek and raw.  Default is seek with fallback to raw when not applicable.

       -G, --incremental
              Handle old GNU-format incremental backups.

       --ignore-failed-read
              Do not exit with nonzero on unreadable files.

       --level=NUMBER
              Set  dump level for created listed-incremental archive.  Currently only --level=0 is meaningful: it in‐
              structs tar to truncate the snapshot file before dumping, thereby forcing a level 0 dump.

       -n, --seek
              Assume the archive is seekable.  Normally tar determines  automatically  whether  the  archive  can  be
              seeked  or not.  This option is intended for use in cases when such recognition fails.  It takes effect
              only if the archive is open for reading (e.g. with --list or --extract options).

       --no-check-device
              Do not check device numbers when creating incremental archives.

       --no-seek
              Assume the archive is not seekable.

       --occurrence[=N]
              Process only the Nth occurrence of each file in the archive.  This option is valid only when used  with
              one  of  the  following  subcommands: --delete, --diff, --extract or --list and when a list of files is
              given either on the command line or via the -T option.  The default N is 1.

       --restrict
              Disable the use of some potentially harmful options.

       --sparse-version=MAJOR[.MINOR]
              Set version of the sparse format to use (implies --sparse).  This option implies --sparse.  Valid argu‐
              ment  values  are 0.0, 0.1, and 1.0.  For a detailed discussion of sparse formats, refer to the GNU Tar
              Manual, appendix D, "Sparse Formats".  Using info reader, it can be accessed running the following com‐
              mand: info tar 'Sparse Formats'.

       -S, --sparse
              Handle  sparse  files efficiently.  Some files in the file system may have segments which were actually
              never written (quite often these are database files created by such systems as DBM).  When  given  this
              option, tar attempts to determine if the file is sparse prior to archiving it, and if so, to reduce the
              resulting archive size by not dumping empty parts of the file.

   Overwrite control
       These options control tar actions when extracting a file over an existing copy on disk.

       -k, --keep-old-files
              Don't replace existing files when extracting.

       --keep-newer-files
              Don't replace existing files that are newer than their archive copies.

       --keep-directory-symlink
              Don't replace existing symlinks to directories when extracting.

       --no-overwrite-dir
              Preserve metadata of existing directories.

       --one-top-level[=DIR]
              Extract all files into DIR, or, if used without argument, into a subdirectory named by the base name of
              the archive (minus standard compression suffixes recognizable by --auto-compress).

       --overwrite
              Overwrite existing files when extracting.

       --overwrite-dir
              Overwrite metadata of existing directories when extracting (default).

       --recursive-unlink
              Recursively remove all files in the directory prior to extracting it.

       --remove-files
              Remove files from disk after adding them to the archive.

       --skip-old-files
              Don't replace existing files when extracting, silently skip over them.

       -U, --unlink-first
              Remove each file prior to extracting over it.

       -W, --verify
              Verify the archive after writing it.

   Output stream selection
       --ignore-command-error

       Ignore subprocess exit codes.

       --no-ignore-command-error
              Treat non-zero exit codes of children as error (default).

       -O, --to-stdout
              Extract files to standard output.

       --to-command=COMMAND
              Pipe  extracted files to COMMAND.  The argument is the pathname of an external program, optionally with
              command line arguments.  The program will be invoked and the contents of the file being extracted  sup‐
              plied  to  it  on  its  standard input.  Additional data will be supplied via the following environment
              variables:

              TAR_FILETYPE
                     Type of the file. It is a single letter with the following meaning:

                             f           Regular file
                             d           Directory
                             l           Symbolic link
                             h           Hard link
                             b           Block device
                             c           Character device

                     Currently only regular files are supported.

              TAR_MODE
                     File mode, an octal number.

              TAR_FILENAME
                     The name of the file.

              TAR_REALNAME
                     Name of the file as stored in the archive.

              TAR_UNAME
                     Name of the file owner.

              TAR_GNAME
                     Name of the file owner group.

              TAR_ATIME
                     Time of last access. It is a decimal number, representing seconds since the Epoch.  If  the  ar‐
                     chive  provides  times  with nanosecond precision, the nanoseconds are appended to the timestamp
                     after a decimal point.

              TAR_MTIME
                     Time of last modification.

              TAR_CTIME
                     Time of last status change.

              TAR_SIZE
                     Size of the file.

              TAR_UID
                     UID of the file owner.

              TAR_GID
                     GID of the file owner.

              Additionally, the following variables contain information about tar operation mode and the archive  be‐
              ing processed:

              TAR_VERSION
                     GNU tar version number.

              TAR_ARCHIVE
                     The name of the archive tar is processing.

              TAR_BLOCKING_FACTOR
                     Current blocking factor, i.e. number of 512-byte blocks in a record.

              TAR_VOLUME
                     Ordinal number of the volume tar is processing (set if reading a multi-volume archive).

              TAR_FORMAT
                     Format of the archive being processed.  One of: gnu, oldgnu, posix, ustar, v7.

              TAR_SUBCOMMAND
                     A short option (with a leading dash) describing the operation tar is executing.

   Handling of file attributes
       --atime-preserve[=METHOD]
              Preserve  access  times  on  dumped files, either by restoring the times after reading (METHOD=replace,
              this is the default) or by not setting the times in the first place (METHOD=system)

       --delay-directory-restore
              Delay setting modification times and permissions of extracted directories until the end of  extraction.
              Use this option when extracting from an archive which has unusual member ordering.

       --group=NAME[:GID]
              Force NAME as group for added files.  If GID is not supplied, NAME can be either a user name or numeric
              GID.  In this case the missing part (GID or name) will be inferred from the current host's group  data‐
              base.

              When used with --group-map=FILE, affects only those files whose owner group is not listed in FILE.

       --group-map=FILE
              Read  group  translation  map from FILE.  Empty lines are ignored.  Comments are introduced with # sign
              and extend to the end of line.  Each non-empty line in FILE defines translation for a single group.  It
              must consist of two fields, delimited by any amount of whitespace:

              OLDGRP NEWGRP[:NEWGID]

              OLDGRP  is  either a valid group name or a GID prefixed with +.  Unless NEWGID is supplied, NEWGRP must
              also be either a valid group name or a +GID.  Otherwise, both NEWGRP and NEWGID need not be  listed  in
              the system group database.

              As  a result, each input file with owner group OLDGRP will be stored in archive with owner group NEWGRP
              and GID NEWGID.

       --mode=CHANGES
              Force symbolic mode CHANGES for added files.

       --mtime=DATE-OR-FILE
              Set mtime for added files.  DATE-OR-FILE is either a date/time in almost arbitrary format, or the  name
              of an existing file.  In the latter case the mtime of that file will be used.

       -m, --touch
              Don't extract file modified time.

       --no-delay-directory-restore
              Cancel the effect of the prior --delay-directory-restore option.

       --no-same-owner
              Extract files as yourself (default for ordinary users).

       --no-same-permissions
              Apply the user's umask when extracting permissions from the archive (default for ordinary users).

       --numeric-owner
              Always use numbers for user/group names.

       --owner=NAME[:UID]
              Force NAME as owner for added files.  If UID is not supplied, NAME can be either a user name or numeric
              UID.  In this case the missing part (UID or name) will be inferred from the current host's  user  data‐
              base.

              When used with --owner-map=FILE, affects only those files whose owner is not listed in FILE.

       --owner-map=FILE
              Read  owner  translation  map from FILE.  Empty lines are ignored.  Comments are introduced with # sign
              and extend to the end of line.  Each non-empty line in FILE defines translation for a single  UID.   It
              must consist of two fields, delimited by any amount of whitespace:

              OLDUSR NEWUSR[:NEWUID]

              OLDUSR  is  either  a valid user name or a UID prefixed with +.  Unless NEWUID is supplied, NEWUSR must
              also be either a valid user name or a +UID.  Otherwise, both NEWUSR and NEWUID need not  be  listed  in
              the system user database.

              As  a  result, each input file owned by OLDUSR will be stored in archive with owner name NEWUSR and UID
              NEWUID.

       -p, --preserve-permissions, --same-permissions
              extract information about file permissions (default for superuser)

       --same-owner
              Try extracting files with the same ownership as exists in the archive (default for superuser).

       -s, --preserve-order, --same-order
              Sort names to extract to match archive

       --sort=ORDER
              When creating an archive, sort directory entries according to ORDER, which is one of none, name, or in‐
              ode.

              The default is --sort=none, which stores archive members in the same order as returned by the operating
              system.

              Using --sort=name ensures the member ordering in the created archive is uniform and reproducible.

              Using --sort=inode reduces the number of disk seeks made when creating the archive and thus can consid‐
              erably  speed  up  archivation.  This sorting order is supported only if the underlying system provides
              the necessary information.

   Extended file attributes
       --acls Enable POSIX ACLs support.

       --no-acls
              Disable POSIX ACLs support.

       --selinux
              Enable SELinux context support.

       --no-selinux
              Disable SELinux context support.

       --xattrs
              Enable extended attributes support.

       --no-xattrs
              Disable extended attributes support.

       --xattrs-exclude=PATTERN
              Specify the exclude pattern for xattr keys.  PATTERN is a POSIX regular expression,  e.g.  --xattrs-ex‐
              clude='^user.', to exclude attributes from the user namespace.

       --xattrs-include=PATTERN
              Specify the include pattern for xattr keys.  PATTERN is a POSIX regular expression.

   Device selection and switching
       -f, --file=ARCHIVE
              Use  archive  file or device ARCHIVE.  If this option is not given, tar will first examine the environ‐
              ment variable `TAPE'.  If it is set, its value will be used as the archive name.  Otherwise,  tar  will
              assume  the  compiled-in  default.  The default value can be inspected either using the --show-defaults
              option, or at the end of the tar --help output.

              An archive name that has a colon in it specifies a file or device on a remote machine.  The part before
              the colon is taken as the machine name or IP address, and the part after it as the file or device path‐
              name, e.g.:

              --file=remotehost:/dev/sr0

              An optional username can be prefixed to the hostname, placing a @ sign between them.

              By default, the remote host is accessed via the rsh(1) command.  Nowadays it is common  to  use  ssh(1)
              instead.  You can do so by giving the following command line option:

              --rsh-command=/usr/bin/ssh

              The  remote machine should have the rmt(8) command installed.  If its pathname does not match tar's de‐
              fault, you can inform tar about the correct pathname using the --rmt-command option.

       --force-local
              Archive file is local even if it has a colon.

       -F, --info-script=COMMAND, --new-volume-script=COMMAND
              Run COMMAND at the end of each tape (implies -M).  The command can include arguments.  When started, it
              will inherit tar's environment plus the following variables:

              TAR_VERSION
                     GNU tar version number.

              TAR_ARCHIVE
                     The name of the archive tar is processing.

              TAR_BLOCKING_FACTOR
                     Current blocking factor, i.e. number of 512-byte blocks in a record.

              TAR_VOLUME
                     Ordinal number of the volume tar is processing (set if reading a multi-volume archive).

              TAR_FORMAT
                     Format of the archive being processed.  One of: gnu, oldgnu, posix, ustar, v7.

              TAR_SUBCOMMAND
                     A short option (with a leading dash) describing the operation tar is executing.

              TAR_FD File descriptor which can be used to communicate the new volume name to tar.

              If the info script fails, tar exits; otherwise, it begins writing the next volume.

       -L, --tape-length=N
              Change  tape  after  writing  Nx1024 bytes.  If N is followed by a size suffix (see the subsection Size
              suffixes below), the suffix specifies the multiplicative factor to be used instead of 1024.

              This option implies -M.

       -M, --multi-volume
              Create/list/extract multi-volume archive.

       --rmt-command=COMMAND
              Use COMMAND instead of rmt when accessing remote archives.  See  the  description  of  the  -f  option,
              above.

       --rsh-command=COMMAND
              Use  COMMAND  instead  of  rsh  when  accessing remote archives.  See the description of the -f option,
              above.

       --volno-file=FILE
              When this option is used in conjunction with --multi-volume, tar will keep track of which volume  of  a
              multi-volume archive it is working in FILE.

   Device blocking
       -b, --blocking-factor=BLOCKS
              Set record size to BLOCKSx512 bytes.

       -B, --read-full-records
              When listing or extracting, accept incomplete input records after end-of-file marker.

       -i, --ignore-zeros
              Ignore  zeroed  blocks in archive.  Normally two consecutive 512-blocks filled with zeroes mean EOF and
              tar stops reading after encountering them.  This option instructs it to read further and is useful when
              reading archives created with the -A option.

       --record-size=NUMBER
              Set record size.  NUMBER is the number of bytes per record.  It must be multiple of 512.  It can can be
              suffixed with a size suffix, e.g. --record-size=10K, for 10 Kilobytes.  See the  subsection  Size  suf‐
              fixes, for a list of valid suffixes.

   Archive format selection
       -H, --format=FORMAT
              Create archive of the given format.  Valid formats are:

              gnu    GNU tar 1.13.x format

              oldgnu GNU format as per tar <= 1.12.

              pax, posix
                     POSIX 1003.1-2001 (pax) format.

              ustar  POSIX 1003.1-1988 (ustar) format.

              v7     Old V7 tar format.

       --old-archive, --portability
              Same as --format=v7.

       --pax-option=keyword[[:]=value][,keyword[[:]=value]]...
              Control  pax  keywords when creating PAX archives (-H pax).  This option is equivalent to the -o option
              of the pax(1) utility.

       --posix
              Same as --format=posix.

       -V, --label=TEXT
              Create archive with volume name TEXT.  If listing or extracting, use TEXT as  a  globbing  pattern  for
              volume name.

   Compression options
       -a, --auto-compress
              Use archive suffix to determine the compression program.

       -I, --use-compress-program=COMMAND
              Filter  data  through COMMAND.  It must accept the -d option, for decompression.  The argument can con‐
              tain command line options.

       -j, --bzip2
              Filter the archive through bzip2(1).

       -J, --xz
              Filter the archive through xz(1).

       --lzip Filter the archive through lzip(1).

       --lzma Filter the archive through lzma(1).

       --lzop Filter the archive through lzop(1).

       --no-auto-compress
              Do not use archive suffix to determine the compression program.

       -z, --gzip, --gunzip, --ungzip
              Filter the archive through gzip(1).

       -Z, --compress, --uncompress
              Filter the archive through compress(1).

       --zstd Filter the archive through zstd(1).

   Local file selection
       --add-file=FILE
              Add FILE to the archive (useful if its name starts with a dash).

       --backup[=CONTROL]
              Backup before removal.  The CONTROL argument, if supplied, controls the backup policy.  Its valid  val‐
              ues are:

              none, off
                     Never make backups.

              t, numbered
                     Make numbered backups.

              nil, existing
                     Make numbered backups if numbered backups exist, simple backups otherwise.

              never, simple
                     Always make simple backups

              If  CONTROL  is  not given, the value is taken from the VERSION_CONTROL environment variable.  If it is
              not set, existing is assumed.

       -C, --directory=DIR
              Change to DIR before performing any operations.  This option is order-sensitive, i.e.  it  affects  all
              options that follow.

       --exclude=PATTERN
              Exclude files matching PATTERN, a glob(3)-style wildcard pattern.

       --exclude-backups
              Exclude backup and lock files.

       --exclude-caches
              Exclude contents of directories containing file CACHEDIR.TAG, except for the tag file itself.

       --exclude-caches-all
              Exclude directories containing file CACHEDIR.TAG and the file itself.

       --exclude-caches-under
              Exclude everything under directories containing CACHEDIR.TAG

       --exclude-ignore=FILE
              Before  dumping  a  directory, see if it contains FILE.  If so, read exclusion patterns from this file.
              The patterns affect only the directory itself.

       --exclude-ignore-recursive=FILE
              Same as --exclude-ignore, except that patterns from FILE affect both the directory and all  its  subdi‐
              rectories.

       --exclude-tag=FILE
              Exclude contents of directories containing FILE, except for FILE itself.

       --exclude-tag-all=FILE
              Exclude directories containing FILE.

       --exclude-tag-under=FILE
              Exclude everything under directories containing FILE.

       --exclude-vcs
              Exclude version control system directories.

       --exclude-vcs-ignores
              Exclude  files  that  match patterns read from VCS-specific ignore files.  Supported files are: .cvsig‐
              nore, .gitignore, .bzrignore, and .hgignore.

       -h, --dereference
              Follow symlinks; archive and dump the files they point to.

       --hard-dereference
              Follow hard links; archive and dump the files they refer to.

       -K, --starting-file=MEMBER
              Begin at the given member in the archive.

       --newer-mtime=DATE
              Work on files whose data changed after the DATE.  If DATE starts with / or . it is taken to be  a  file
              name; the mtime of that file is used as the date.

       --no-null
              Disable the effect of the previous --null option.

       --no-recursion
              Avoid descending automatically in directories.

       --no-unquote
              Do not unquote input file or member names.

       --no-verbatim-files-from
              Treat  each  line  read from a file list as if it were supplied in the command line.  I.e., leading and
              trailing whitespace is removed and, if the resulting string begins with a dash, it is  treated  as  tar
              command line option.

              This  is  the default behavior.  The --no-verbatim-files-from option is provided as a way to restore it
              after --verbatim-files-from option.

              This option is positional: it affects all --files-from options that occur after it in,  until  --verba‐
              tim-files-from option or end of line, whichever occurs first.

              It is implied by the --no-null option.

       --null Instruct  subsequent  -T  options  to read null-terminated names verbatim (disables special handling of
              names that start with a dash).

              See also --verbatim-files-from.

       -N, --newer=DATE, --after-date=DATE
              Only store files newer than DATE.  If DATE starts with / or . it is taken to be a file name; the  mtime
              of that file is used as the date.

       --one-file-system
              Stay in local file system when creating archive.

       -P, --absolute-names
              Don't strip leading slashes from file names when creating archives.

       --recursion
              Recurse into directories (default).

       --suffix=STRING
              Backup  before  removal,  override usual suffix.  Default suffix is ~, unless overridden by environment
              variable SIMPLE_BACKUP_SUFFIX.

       -T, --files-from=FILE
              Get names to extract or create from FILE.

              Unless specified otherwise, the FILE must contain a list of names separated by ASCII LF (i.e. one  name
              per  line).  The names read are handled the same way as command line arguments.  They undergo quote re‐
              moval and word splitting, and any string that starts with a - is handled as tar command line option.

              If this behavior is undesirable, it can be turned off using the --verbatim-files-from option.

              The --null option instructs tar that the names in FILE are separated by ASCII NUL character, instead of
              LF.  It is useful if the list is generated by find(1) -print0 predicate.

       --unquote
              Unquote file or member names (default).

       --verbatim-files-from
              Treat  each  line  obtained from a file list as a file name, even if it starts with a dash.  File lists
              are supplied with the --files-from (-T) option.  The default behavior is to handle  names  supplied  in
              file  lists  as if they were typed in the command line, i.e. any names starting with a dash are treated
              as tar options.  The --verbatim-files-from option disables this behavior.

              This option affects all --files-from options that occur after it in the command line.   Its  effect  is
              reverted by the --no-verbatim-files-from} option.

              This option is implied by the --null option.

              See also --add-file.

       -X, --exclude-from=FILE
              Exclude files matching patterns listed in FILE.

   File name transformations
       --strip-components=NUMBER
              Strip NUMBER leading components from file names on extraction.

       --transform=EXPRESSION, --xform=EXPRESSION
              Use sed replace EXPRESSION to transform file names.

   File name matching options
       These options affect both exclude and include patterns.

       --anchored
              Patterns match file name start.

       --ignore-case
              Ignore case.

       --no-anchored
              Patterns match after any / (default for exclusion).

       --no-ignore-case
              Case sensitive matching (default).

       --no-wildcards
              Verbatim string matching.

       --no-wildcards-match-slash
              Wildcards do not match /.

       --wildcards
              Use wildcards (default for exclusion).

       --wildcards-match-slash
              Wildcards match / (default for exclusion).

   Informative output
       --checkpoint[=N]
              Display progress messages every Nth record (default 10).

       --checkpoint-action=ACTION
              Run ACTION on each checkpoint.

       --clamp-mtime
              Only set time when the file is more recent than what was given with --mtime.

       --full-time
              Print file time to its full resolution.

       --index-file=FILE
              Send verbose output to FILE.

       -l, --check-links
              Print a message if not all links are dumped.

       --no-quote-chars=STRING
              Disable quoting for characters from STRING.

       --quote-chars=STRING
              Additionally quote characters from STRING.

       --quoting-style=STYLE
              Set  quoting style for file and member names.  Valid values for STYLE are literal, shell, shell-always,
              c, c-maybe, escape, locale, clocale.

       -R, --block-number
              Show block number within archive with each message.

       --show-omitted-dirs
              When listing or extracting, list each directory that does not match search criteria.

       --show-transformed-names, --show-stored-names
              Show file or archive names after transformation by --strip and --transform options.

       --totals[=SIGNAL]
              Print total bytes after processing the archive.  If SIGNAL is given, print total bytes when this signal
              is  delivered.  Allowed signals are: SIGHUP, SIGQUIT, SIGINT, SIGUSR1, and SIGUSR2.  The SIG prefix can
              be omitted.

       --utc  Print file modification times in UTC.

       -v, --verbose
              Verbosely list files processed.  Each instance of this option on the command line  increases  the  ver‐
              bosity  level by one.  The maximum verbosity level is 3.  For a detailed discussion of how various ver‐
              bosity levels affect tar's output, please refer to GNU Tar Manual, subsection 2.5.1 "The --verbose  Op‐
              tion".

       --warning=KEYWORD
              Enable  or  disable  warning messages identified by KEYWORD.  The messages are suppressed if KEYWORD is
              prefixed with no- and enabled otherwise.

              Multiple --warning messages accumulate.

              Keywords controlling general tar operation:

              all    Enable all warning messages.  This is the default.

              none   Disable all warning messages.

              filename-with-nuls
                     "%s: file name read contains nul character"

              alone-zero-block
                     "A lone zero block at %s"

              Keywords applicable for tar --create:

              cachedir
                     "%s: contains a cache directory tag %s; %s"

              file-shrank
                     "%s: File shrank by %s bytes; padding with zeros"

              xdev   "%s: file is on a different filesystem; not dumped"

              file-ignored
                     "%s: Unknown file type; file ignored"
                     "%s: socket ignored"
                     "%s: door ignored"

              file-unchanged
                     "%s: file is unchanged; not dumped"

              ignore-archive
                     "%s: file is the archive; not dumped"

              file-removed
                     "%s: File removed before we read it"

              file-changed
                     "%s: file changed as we read it"

              failed-read
                     Suppresses warnings about unreadable files or directories. This keyword applies only if used to‐
                     gether with the --ignore-failed-read option.

              Keywords applicable for tar --extract:

              existing-file
                     "%s: skipping existing file"

              timestamp
                     "%s: implausibly old time stamp %s"
                     "%s: time stamp %s is %s s in the future"

              contiguous-cast
                     "Extracting contiguous files as regular files"

              symlink-cast
                     "Attempting extraction of symbolic links as hard links"

              unknown-cast
                     "%s: Unknown file type '%c', extracted as normal file"

              ignore-newer
                     "Current %s is newer or same age"

              unknown-keyword
                     "Ignoring unknown extended header keyword '%s'"

              decompress-program
                     Controls  verbose  description of failures occurring when trying to run alternative decompressor
                     programs.  This warning is disabled by default (unless --verbose is used).  A common example  of
                     what you can get when using this warning is:

                     $ tar --warning=decompress-program -x -f archive.Z
                     tar (child): cannot run compress: No such file or directory
                     tar (child): trying gzip

                     This  means  that tar first tried to decompress archive.Z using compress, and, when that failed,
                     switched to gzip.

              record-size
                     "Record size = %lu blocks"

              Keywords controlling incremental extraction:

              rename-directory
                     "%s: Directory has been renamed from %s"
                     "%s: Directory has been renamed"

              new-directory
                     "%s: Directory is new"

              xdev   "%s: directory is on a different device: not purging"

              bad-dumpdir
                     "Malformed dumpdir: 'X' never used"

       -w, --interactive, --confirmation
              Ask for confirmation for every action.

   Compatibility options
       -o     When creating, same as --old-archive.  When extracting, same as --no-same-owner.

   Size suffixes
               Suffix    Units                   Byte Equivalent
               b         Blocks                  SIZE x 512
               B         Kilobytes               SIZE x 1024
               c         Bytes                   SIZE
               G         Gigabytes               SIZE x 1024^3
               K         Kilobytes               SIZE x 1024
               k         Kilobytes               SIZE x 1024
               M         Megabytes               SIZE x 1024^2
               P         Petabytes               SIZE x 1024^5
               T         Terabytes               SIZE x 1024^4
               w         Words                   SIZE x 2

RETURN VALUE
       Tar exit code indicates whether it was able to successfully perform the requested operation, and if not,  what
       kind of error occurred.

       0      Successful termination.

       1      Some  files differ.  If tar was invoked with the --compare (--diff, -d) command line option, this means
              that some files in the archive differ from their disk counterparts.  If tar was given one of the --cre‐
              ate,  --append  or  --update  options,  this  exit  code means that some files were changed while being
              archived and so the resulting archive does not contain the exact copy of the file set.

       2      Fatal error.  This means that some fatal, unrecoverable error occurred.

       If a subprocess that had been invoked by tar exited with a nonzero exit code, tar itself exits with that  code
       as well.  This can happen, for example, if a compression option (e.g. -z) was used and the external compressor
       program failed.  Another example is rmt failure during backup to a remote device.

SEE ALSO
       bzip2(1), compress(1), gzip(1), lzma(1), lzop(1), rmt(8), symlink(7), xz(1), zstd(1).

       Complete tar manual: run info tar or use emacs(1) info mode to read it.

       Online copies of GNU tar documentation in various formats can be found at:

           http://www.gnu.org/software/tar/manual

BUG REPORTS
       Report bugs to <bug-tar@gnu.org>.

COPYRIGHT
       Copyright © 2013-2019 Free Software Foundation, Inc.
       License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the  extent  per‐
       mitted by law.

TAR                                                 July 13, 2020                                              TAR(1)

================================================================================

COMMAND: ps
PS(1)                                               User Commands                                               PS(1)

NAME
       ps - report a snapshot of the current processes.

SYNOPSIS
       ps [options]

DESCRIPTION
       ps displays information about a selection of the active processes.  If you want a repetitive update of the
       selection and the displayed information, use top instead.

       This version of ps accepts several kinds of options:

       1   UNIX options, which may be grouped and must be preceded by a dash.
       2   BSD options, which may be grouped and must not be used with a dash.
       3   GNU long options, which are preceded by two dashes.

       Options of different types may be freely mixed, but conflicts can appear.  There are some synonymous options,
       which are functionally identical, due to the many standards and ps implementations that this ps is compatible
       with.

       Note that ps -aux is distinct from ps aux.  The POSIX and UNIX standards require that ps -aux print all
       processes owned by a user named x, as well as printing all processes that would be selected by the -a option.
       If the user named x does not exist, this ps may interpret the command as ps aux instead and print a warning.
       This behavior is intended to aid in transitioning old scripts and habits.  It is fragile, subject to change,
       and thus should not be relied upon.

       By default, ps selects all processes with the same effective user ID (euid=EUID) as the current user and
       associated with the same terminal as the invoker.  It displays the process ID (pid=PID), the terminal
       associated with the process (tname=TTY), the cumulated CPU time in [DD-]hh:mm:ss format (time=TIME), and the
       executable name (ucmd=CMD).  Output is unsorted by default.

       The use of BSD-style options will add process state (stat=STAT) to the default display and show the command
       args (args=COMMAND) instead of the executable name.  You can override this with the PS_FORMAT environment
       variable.  The use of BSD-style options will also change the process selection to include processes on other
       terminals (TTYs) that are owned by you; alternately, this may be described as setting the selection to be the
       set of all processes filtered to exclude processes owned by other users or not on a terminal.  These effects
       are not considered when options are described as being "identical" below, so -M will be considered identical
       to Z and so on.

       Except as described below, process selection options are additive.  The default selection is discarded, and
       then the selected processes are added to the set of processes to be displayed.  A process will thus be shown
       if it meets any of the given selection criteria.

EXAMPLES
       To see every process on the system using standard syntax:
          ps -e
          ps -ef
          ps -eF
          ps -ely

       To see every process on the system using BSD syntax:
          ps ax
          ps axu

       To print a process tree:
          ps -ejH
          ps axjf

       To get info about threads:
          ps -eLf
          ps axms

       To get security info:
          ps -eo euser,ruser,suser,fuser,f,comm,label
          ps axZ
          ps -eM

       To see every process running as root (real & effective ID) in user format:
          ps -U root -u root u

       To see every process with a user-defined format:
          ps -eo pid,tid,class,rtprio,ni,pri,psr,pcpu,stat,wchan:14,comm
          ps axo stat,euid,ruid,tty,tpgid,sess,pgrp,ppid,pid,pcpu,comm
          ps -Ao pid,tt,user,fname,tmout,f,wchan

       Print only the process IDs of syslogd:
          ps -C syslogd -o pid=

       Print only the name of PID 42:
          ps -q 42 -o comm=

SIMPLE PROCESS SELECTION
       a      Lift the BSD-style "only yourself" restriction, which is imposed upon the set of all processes when
              some BSD-style (without "-") options are used or when the ps personality setting is BSD-like.  The set
              of processes selected in this manner is in addition to the set of processes selected by other means.
              An alternate description is that this option causes ps to list all processes with a terminal (tty), or
              to list all processes when used together with the x option.

       -A     Select all processes.  Identical to -e.

       -a     Select all processes except both session leaders (see getsid(2)) and processes not associated with a
              terminal.

       -d     Select all processes except session leaders.

       --deselect
              Select all processes except those that fulfill the specified conditions (negates the selection).
              Identical to -N.

       -e     Select all processes.  Identical to -A.

       g      Really all, even session leaders.  This flag is obsolete and may be discontinued in a future release.
              It is normally implied by the a flag, and is only useful when operating in the sunos4 personality.

       -N     Select all processes except those that fulfill the specified conditions (negates the selection).
              Identical to --deselect.

       T      Select all processes associated with this terminal.  Identical to the t option without any argument.

       r      Restrict the selection to only running processes.

       x      Lift the BSD-style "must have a tty" restriction, which is imposed upon the set of all processes when
              some BSD-style (without "-") options are used or when the ps personality setting is BSD-like.  The set
              of processes selected in this manner is in addition to the set of processes selected by other means.
              An alternate description is that this option causes ps to list all processes owned by you (same EUID as
              ps), or to list all processes when used together with the a option.

PROCESS SELECTION BY LIST
       These options accept a single argument in the form of a blank-separated or comma-separated list.  They can be
       used multiple times.  For example: ps -p "1 2" -p 3,4

       -123   Identical to --pid 123.

       123    Identical to --pid 123.

       -C cmdlist
              Select by command name.  This selects the processes whose executable name is given in cmdlist.  NOTE:
              The command name is not the same as the command line. Previous versions of procps and the kernel
              truncated this command name to 15 characters. This limitation is no longer present in both. If you
              depended on matching only 15 characters, you may no longer get a match.

       -G grplist
              Select by real group ID (RGID) or name.  This selects the processes whose real group name or ID is in
              the grplist list.  The real group ID identifies the group of the user who created the process, see
              getgid(2).

       -g grplist
              Select by session OR by effective group name.  Selection by session is specified by many standards, but
              selection by effective group is the logical behavior that several other operating systems use.  This ps
              will select by session when the list is completely numeric (as sessions are).  Group ID numbers will
              work only when some group names are also specified.  See the -s and --group options.

       --Group grplist
              Select by real group ID (RGID) or name.  Identical to -G.

       --group grplist
              Select by effective group ID (EGID) or name.  This selects the processes whose effective group name or
              ID is in grplist.  The effective group ID describes the group whose file access permissions are used by
              the process (see getegid(2)).  The -g option is often an alternative to --group.

       p pidlist
              Select by process ID.  Identical to -p and --pid.

       -p pidlist
              Select by PID.  This selects the processes whose process ID numbers appear in pidlist.  Identical to p
              and --pid.

       --pid pidlist
              Select by process ID.  Identical to -p and p.

       --ppid pidlist
              Select by parent process ID.  This selects the processes with a parent process ID in pidlist.  That is,
              it selects processes that are children of those listed in pidlist.

       q pidlist
              Select by process ID (quick mode).  Identical to -q and --quick-pid.

       -q pidlist
              Select by PID (quick mode).  This selects the processes whose process ID numbers appear in pidlist.
              With this option ps reads the necessary info only for the pids listed in the pidlist and doesn't apply
              additional filtering rules.  The order of pids is unsorted and preserved.  No additional selection
              options, sorting and forest type listings are allowed in this mode.  Identical to q and --quick-pid.

       --quick-pid pidlist
              Select by process ID (quick mode).  Identical to -q and q.

       -s sesslist
              Select by session ID.  This selects the processes with a session ID specified in sesslist.

       --sid sesslist
              Select by session ID.  Identical to -s.

       t ttylist
              Select by tty.  Nearly identical to -t and --tty, but can also be used with an empty ttylist to
              indicate the terminal associated with ps.  Using the T option is considered cleaner than using t with
              an empty ttylist.

       -t ttylist
              Select by tty.  This selects the processes associated with the terminals given in ttylist.  Terminals
              (ttys, or screens for text output) can be specified in several forms: /dev/ttyS1, ttyS1, S1.  A plain
              "-" may be used to select processes not attached to any terminal.

       --tty ttylist
              Select by terminal.  Identical to -t and t.

       U userlist
              Select by effective user ID (EUID) or name.  This selects the processes whose effective user name or ID
              is in userlist.  The effective user ID describes the user whose file access permissions are used by the
              process (see geteuid(2)).  Identical to -u and --user.

       -U userlist
              Select by real user ID (RUID) or name.  It selects the processes whose real user name or ID is in the
              userlist list.  The real user ID identifies the user who created the process, see getuid(2).

       -u userlist
              Select by effective user ID (EUID) or name.  This selects the processes whose effective user name or ID
              is in userlist.

              The effective user ID describes the user whose file access permissions are used by the process (see
              geteuid(2)).  Identical to U and --user.

       --User userlist
              Select by real user ID (RUID) or name.  Identical to -U.

       --user userlist
              Select by effective user ID (EUID) or name.  Identical to -u and U.

OUTPUT FORMAT CONTROL
       These options are used to choose the information displayed by ps.  The output may differ by personality.

       -c     Show different scheduler information for the -l option.

       --context
              Display security context format (for SELinux).

       -f     Do full-format listing.  This option can be combined with many other UNIX-style options to add
              additional columns.  It also causes the command arguments to be printed.  When used with -L, the NLWP
              (number of threads) and LWP (thread ID) columns will be added.  See the c option, the format keyword
              args, and the format keyword comm.

       -F     Extra full format.  See the -f option, which -F implies.

       --format format
              user-defined format.  Identical to -o and o.

       j      BSD job control format.

       -j     Jobs format.

       l      Display BSD long format.

       -l     Long format.  The -y option is often useful with this.

       -M     Add a column of security data.  Identical to Z (for SELinux).

       O format
              is preloaded o (overloaded).  The BSD O option can act like -O (user-defined output format with some
              common fields predefined) or can be used to specify sort order.  Heuristics are used to determine the
              behavior of this option.  To ensure that the desired behavior is obtained (sorting or formatting),
              specify the option in some other way (e.g.  with -O or --sort).  When used as a formatting option, it
              is identical to -O, with the BSD personality.

       -O format
              Like -o, but preloaded with some default columns.  Identical to -o pid,format,state,tname,time,command
              or -o pid,format,tname,time,cmd, see -o below.

       o format
              Specify user-defined format.  Identical to -o and --format.

       -o format
              User-defined format.  format is a single argument in the form of a blank-separated or comma-separated
              list, which offers a way to specify individual output columns.  The recognized keywords are described
              in the STANDARD FORMAT SPECIFIERS section below.  Headers may be renamed (ps -o pid,ruser=RealUser -o
              comm=Command) as desired.  If all column headers are empty (ps -o pid= -o comm=) then the header line
              will not be output.  Column width will increase as needed for wide headers; this may be used to widen
              up columns such as WCHAN (ps -o pid,wchan=WIDE-WCHAN-COLUMN -o comm).  Explicit width control (ps opid,
              wchan:42,cmd) is offered too.  The behavior of ps -o pid=X,comm=Y varies with personality; output may
              be one column named "X,comm=Y" or two columns named "X" and "Y".  Use multiple -o options when in
              doubt.  Use the PS_FORMAT environment variable to specify a default as desired; DefSysV and DefBSD are
              macros that may be used to choose the default UNIX or BSD columns.

       s      Display signal format.

       u      Display user-oriented format.

       v      Display virtual memory format.

       X      Register format.

       -y     Do not show flags; show rss in place of addr.  This option can only be used with -l.

       Z      Add a column of security data.  Identical to -M (for SELinux).

OUTPUT MODIFIERS
       c      Show the true command name.  This is derived from the name of the executable file, rather than from the
              argv value.  Command arguments and any modifications to them are thus not shown.  This option
              effectively turns the args format keyword into the comm format keyword; it is useful with the -f format
              option and with the various BSD-style format options, which all normally display the command arguments.
              See the -f option, the format keyword args, and the format keyword comm.

       --cols n
              Set screen width.

       --columns n
              Set screen width.

       --cumulative
              Include some dead child process data (as a sum with the parent).

       e      Show the environment after the command.

       f      ASCII art process hierarchy (forest).

       --forest
              ASCII art process tree.

       h      No header.  (or, one header per screen in the BSD personality).  The h option is problematic.  Standard
              BSD ps uses this option to print a header on each page of output, but older Linux ps uses this option
              to totally disable the header.  This version of ps follows the Linux usage of not printing the header
              unless the BSD personality has been selected, in which case it prints a header on each page of output.
              Regardless of the current personality, you can use the long options --headers and --no-headers to
              enable printing headers each page or disable headers entirely, respectively.

       -H     Show process hierarchy (forest).

       --headers
              Repeat header lines, one per page of output.

       k spec Specify sorting order.  Sorting syntax is [+|-]key[,[+|-]key[,...]].  Choose a multi-letter key from
              the STANDARD FORMAT SPECIFIERS section.  The "+" is optional since default direction is increasing
              numerical or lexicographic order.  Identical to --sort.

                      Examples:
                      ps jaxkuid,-ppid,+pid
                      ps axk comm o comm,args
                      ps kstart_time -ef

       --lines n
              Set screen height.

       n      Numeric output for WCHAN and USER (including all types of UID and GID).

       --no-headers
              Print no header line at all.  --no-heading is an alias for this option.

       O order
              Sorting order (overloaded).  The BSD O option can act like -O (user-defined output format with some
              common fields predefined) or can be used to specify sort order.  Heuristics are used to determine the
              behavior of this option.  To ensure that the desired behavior is obtained (sorting or formatting),
              specify the option in some other way (e.g.  with -O or --sort).

              For sorting, obsolete BSD O option syntax is O[+|-]k1[,[+|-]k2[,...]].  It orders the processes listing
              according to the multilevel sort specified by the sequence of one-letter short keys k1,k2, ...
              described in the OBSOLETE SORT KEYS section below.  The "+" is currently optional, merely re-iterating
              the default direction on a key, but may help to distinguish an O sort from an O format.  The "-"
              reverses direction only on the key it precedes.

       --rows n
              Set screen height.

       S      Sum up some information, such as CPU usage, from dead child processes into their parent.  This is
              useful for examining a system where a parent process repeatedly forks off short-lived children to do
              work.

       --sort spec
              Specify sorting order.  Sorting syntax is [+|-]key[,[+|-]key[,...]].  Choose a multi-letter key from
              the STANDARD FORMAT SPECIFIERS section.  The "+" is optional since default direction is increasing
              numerical or lexicographic order.  Identical to k.  For example: ps jax --sort=uid,-ppid,+pid

       w      Wide output.  Use this option twice for unlimited width.

       -w     Wide output.  Use this option twice for unlimited width.

       --width n
              Set screen width.

THREAD DISPLAY
       H      Show threads as if they were processes.

       -L     Show threads, possibly with LWP and NLWP columns.

       m      Show threads after processes.

       -m     Show threads after processes.

       -T     Show threads, possibly with SPID column.

OTHER INFORMATION
       --help section
              Print a help message.  The section argument can be one of simple, list, output, threads, misc, or all.
              The argument can be shortened to one of the underlined letters as in: s|l|o|t|m|a.

       --info Print debugging info.

       L      List all format specifiers.

       V      Print the procps-ng version.

       -V     Print the procps-ng version.

       --version
              Print the procps-ng version.

NOTES
       This ps works by reading the virtual files in /proc.  This ps does not need to be setuid kmem or have any
       privileges to run.  Do not give this ps any special permissions.

       CPU usage is currently expressed as the percentage of time spent running during the entire lifetime of a
       process.  This is not ideal, and it does not conform to the standards that ps otherwise conforms to.  CPU
       usage is unlikely to add up to exactly 100%.

       The SIZE and RSS fields don't count some parts of a process including the page tables, kernel stack, struct
       thread_info, and struct task_struct.  This is usually at least 20 KiB of memory that is always resident.  SIZE
       is the virtual size of the process (code+data+stack).

       Processes marked <defunct> are dead processes (so-called "zombies") that remain because their parent has not
       destroyed them properly.  These processes will be destroyed by init(8) if the parent process exits.

       If the length of the username is greater than the length of the display column, the username will be
       truncated.  See the -o and -O formatting options to customize length.

       Commands options such as ps -aux are not recommended as it is a confusion of two different standards.
       According to the POSIX and UNIX standards, the above command asks to display all processes with a TTY
       (generally the commands users are running) plus all processes owned by a user named x.  If that user doesn't
       exist, then ps will assume you really meant ps aux.

PROCESS FLAGS
       The sum of these values is displayed in the "F" column, which is provided by the flags output specifier:

               1    forked but didn't exec
               4    used super-user privileges

PROCESS STATE CODES
       Here are the different values that the s, stat and state output specifiers (header "STAT" or "S") will display
       to describe the state of a process:

               D    uninterruptible sleep (usually IO)
               I    Idle kernel thread
               R    running or runnable (on run queue)
               S    interruptible sleep (waiting for an event to complete)
               T    stopped by job control signal
               t    stopped by debugger during the tracing
               W    paging (not valid since the 2.6.xx kernel)
               X    dead (should never be seen)
               Z    defunct ("zombie") process, terminated but not reaped by its parent

       For BSD formats and when the stat keyword is used, additional characters may be displayed:

               <    high-priority (not nice to other users)
               N    low-priority (nice to other users)
               L    has pages locked into memory (for real-time and custom IO)
               s    is a session leader
               l    is multi-threaded (using CLONE_THREAD, like NPTL pthreads do)
               +    is in the foreground process group

OBSOLETE SORT KEYS
       These keys are used by the BSD O option (when it is used for sorting).  The GNU --sort option doesn't use
       these keys, but the specifiers described below in the STANDARD FORMAT SPECIFIERS section.  Note that the
       values used in sorting are the internal values ps uses and not the "cooked" values used in some of the output
       format fields (e.g.  sorting on tty will sort into device number, not according to the terminal name
       displayed).  Pipe ps output into the sort(1) command if you want to sort the cooked values.

       KEY   LONG         DESCRIPTION
       c     cmd          simple name of executable
       C     pcpu         cpu utilization
       f     flags        flags as in long format F field
       g     pgrp         process group ID
       G     tpgid        controlling tty process group ID
       j     cutime       cumulative user time
       J     cstime       cumulative system time
       k     utime        user time
       m     min_flt      number of minor page faults
       M     maj_flt      number of major page faults
       n     cmin_flt     cumulative minor page faults
       N     cmaj_flt     cumulative major page faults

       o     session      session ID
       p     pid          process ID
       P     ppid         parent process ID
       r     rss          resident set size
       R     resident     resident pages
       s     size         memory size in kilobytes
       S     share        amount of shared pages
       t     tty          the device number of the controlling tty
       T     start_time   time process was started
       U     uid          user ID number
       u     user         user name
       v     vsize        total VM size in KiB
       y     priority     kernel scheduling priority

AIX FORMAT DESCRIPTORS
       This ps supports AIX format descriptors, which work somewhat like the formatting codes of printf(1) and
       printf(3).  For example, the normal default output can be produced with this: ps -eo "%p %y %x %c".  The
       NORMAL codes are described in the next section.

       CODE   NORMAL   HEADER
       %C     pcpu     %CPU
       %G     group    GROUP
       %P     ppid     PPID
       %U     user     USER
       %a     args     COMMAND
       %c     comm     COMMAND
       %g     rgroup   RGROUP
       %n     nice     NI
       %p     pid      PID
       %r     pgid     PGID
       %t     etime    ELAPSED
       %u     ruser    RUSER
       %x     time     TIME
       %y     tty      TTY
       %z     vsz      VSZ

STANDARD FORMAT SPECIFIERS
       Here are the different keywords that may be used to control the output format (e.g., with option -o) or to
       sort the selected processes with the GNU-style --sort option.

       For example: ps -eo pid,user,args --sort user

       This version of ps tries to recognize most of the keywords used in other implementations of ps.

       The following user-defined format specifiers may contain spaces: args, cmd, comm, command, fname, ucmd, ucomm,
       lstart, bsdstart, start.

       Some keywords may not be available for sorting.

       CODE        HEADER    DESCRIPTION

       %cpu        %CPU      cpu utilization of the process in "##.#" format.  Currently, it is the CPU time used
                             divided by the time the process has been running (cputime/realtime ratio), expressed as
                             a percentage.  It will not add up to 100% unless you are lucky.  (alias pcpu).

       %mem        %MEM      ratio of the process's resident set size  to the physical memory on the machine,
                             expressed as a percentage.  (alias pmem).

       args        COMMAND   command with all its arguments as a string.  Modifications to the arguments may be
                             shown.  The output in this column may contain spaces.  A process marked <defunct> is
                             partly dead, waiting to be fully destroyed by its parent.  Sometimes the process args
                             will be unavailable; when this happens, ps will instead print the executable name in
                             brackets.  (alias cmd, command).  See also the comm format keyword, the -f option, and
                             the c option.
                             When specified last, this column will extend to the edge of the display.  If ps can not
                             determine display width, as when output is redirected (piped) into a file or another
                             command, the output width is undefined (it may be 80, unlimited, determined by the TERM
                             variable, and so on).  The COLUMNS environment variable or --cols option may be used to
                             exactly determine the width in this case.  The w or -w option may be also be used to
                             adjust width.

       blocked     BLOCKED   mask of the blocked signals, see signal(7).  According to the width of the field, a 32
                             or 64-bit mask in hexadecimal format is displayed.  (alias sig_block, sigmask).

       bsdstart    START     time the command started.  If the process was started less than 24 hours ago, the output
                             format is " HH:MM", else it is " Mmm:SS" (where Mmm is the three letters of the month).
                             See also lstart, start, start_time, and stime.

       bsdtime     TIME      accumulated cpu time, user + system.  The display format is usually "MMM:SS", but can be
                             shifted to the right if the process used more than 999 minutes of cpu time.

       c           C         processor utilization.  Currently, this is the integer value of the percent usage over
                             the lifetime of the process.  (see %cpu).

       caught      CAUGHT    mask of the caught signals, see signal(7).  According to the width of the field, a 32 or
                             64 bits mask in hexadecimal format is displayed.  (alias sig_catch, sigcatch).

       cgname      CGNAME    display name of control groups to which the process belongs.

       cgroup      CGROUP    display control groups to which the process belongs.

       class       CLS       scheduling class of the process.  (alias policy, cls).  Field's possible values are:

                                      -   not reported
                                      TS  SCHED_OTHER
                                      FF  SCHED_FIFO
                                      RR  SCHED_RR
                                      B   SCHED_BATCH
                                      ISO SCHED_ISO
                                      IDL SCHED_IDLE
                                      DLN SCHED_DEADLINE
                                      ?   unknown value

       cls         CLS       scheduling class of the process.  (alias policy, cls).  Field's possible values are:

                                      -   not reported
                                      TS  SCHED_OTHER
                                      FF  SCHED_FIFO
                                      RR  SCHED_RR
                                      B   SCHED_BATCH
                                      ISO SCHED_ISO
                                      IDL SCHED_IDLE
                                      DLN SCHED_DEADLINE
                                      ?   unknown value

       cmd         CMD       see args.  (alias args, command).

       comm        COMMAND   command name (only the executable name).  Modifications to the command name will not be
                             shown.  A process marked <defunct> is partly dead, waiting to be fully destroyed by its
                             parent.  The output in this column may contain spaces.  (alias ucmd, ucomm).  See also
                             the args format keyword, the -f option, and the c option.
                             When specified last, this column will extend to the edge of the display.  If ps can not
                             determine display width, as when output is redirected (piped) into a file or another
                             command, the output width is undefined (it may be 80, unlimited, determined by the TERM
                             variable, and so on).  The COLUMNS environment variable or --cols option may be used to
                             exactly determine the width in this case.  The w or -w option may be also be used to
                             adjust width.

       command     COMMAND   See args.  (alias args, command).

       cp          CP        per-mill (tenths of a percent) CPU usage.  (see %cpu).

       cputime     TIME      cumulative CPU time, "[DD-]hh:mm:ss" format.  (alias time).

       cputimes    TIME      cumulative CPU time in seconds (alias times).

       drs         DRS       data resident set size, the amount of physical memory devoted to other than executable
                             code.

       egid        EGID      effective group ID number of the process as a decimal integer.  (alias gid).

       egroup      EGROUP    effective group ID of the process.  This will be the textual group ID, if it can be
                             obtained and the field width permits, or a decimal representation otherwise.  (alias
                             group).

       eip         EIP       instruction pointer.

       esp         ESP       stack pointer.

       etime       ELAPSED   elapsed time since the process was started, in the form [[DD-]hh:]mm:ss.

       etimes      ELAPSED   elapsed time since the process was started, in seconds.

       euid        EUID      effective user ID (alias uid).

       euser       EUSER     effective user name.  This will be the textual user ID, if it can be obtained and the
                             field width permits, or a decimal representation otherwise.  The n option can be used to
                             force the decimal representation.  (alias uname, user).

       exe         EXE       path to the executable. Useful if path cannot be printed via cmd, comm or args format
                             options.

       f           F         flags associated with the process, see the PROCESS FLAGS section.  (alias flag, flags).

       fgid        FGID      filesystem access group ID.  (alias fsgid).

       fgroup      FGROUP    filesystem access group ID.  This will be the textual group ID, if it can be obtained
                             and the field width permits, or a decimal representation otherwise.  (alias fsgroup).

       flag        F         see f.  (alias f, flags).

       flags       F         see f.  (alias f, flag).

       fname       COMMAND   first 8 bytes of the base name of the process's executable file.  The output in this
                             column may contain spaces.

       fuid        FUID      filesystem access user ID.  (alias fsuid).

       fuser       FUSER     filesystem access user ID.  This will be the textual user ID, if it can be obtained and
                             the field width permits, or a decimal representation otherwise.

       gid         GID       see egid.  (alias egid).

       group       GROUP     see egroup.  (alias egroup).

       ignored     IGNORED   mask of the ignored signals, see signal(7).  According to the width of the field, a 32
                             or 64 bits mask in hexadecimal format is displayed.  (alias sig_ignore, sigignore).

       ipcns       IPCNS     Unique inode number describing the namespace the process belongs to.  See namespaces(7).

       label       LABEL     security label, most commonly used for SELinux context data.  This is for the Mandatory
                             Access Control ("MAC") found on high-security systems.

       lstart      STARTED   time the command started.  See also bsdstart, start, start_time, and stime.

       lsession    SESSION   displays the login session identifier of a process, if systemd support has been
                             included.

       luid        LUID      displays Login ID associated with a process.

       lwp         LWP       light weight process (thread) ID of the dispatchable entity (alias spid, tid).  See tid
                             for additional information.

       lxc         LXC       The name of the lxc container within which a task is running.  If a process is not
                             running inside a container, a dash ('-') will be shown.

       machine     MACHINE   displays the machine name for processes assigned to VM or container, if systemd support
                             has been included.

       maj_flt     MAJFLT    The number of major page faults that have occurred with this process.

       min_flt     MINFLT    The number of minor page faults that have occurred with this process.

       mntns       MNTNS     Unique inode number describing the namespace the process belongs to.  See namespaces(7).

       netns       NETNS     Unique inode number describing the namespace the process belongs to.  See namespaces(7).

       ni          NI        nice value.  This ranges from 19 (nicest) to -20 (not nice to others), see nice(1).
                             (alias nice).

       nice        NI        see ni.(alias ni).

       nlwp        NLWP      number of lwps (threads) in the process.  (alias thcount).

       numa        NUMA      The node associated with the most recently used processor.  A -1 means that NUMA
                             information is unavailable.

       nwchan      WCHAN     address of the kernel function where the process is sleeping (use wchan if you want the
                             kernel function name).  Running tasks will display a dash ('-') in this column.

       ouid        OWNER     displays the Unix user identifier of the owner of the session of a process, if systemd
                             support has been included.

       pcpu        %CPU      see %cpu.  (alias %cpu).

       pending     PENDING   mask of the pending signals.  See signal(7).  Signals pending on the process are
                             distinct from signals pending on individual threads.  Use the m option or the -m option
                             to see both.  According to the width of the field, a 32 or 64 bits mask in hexadecimal
                             format is displayed.  (alias sig).

       pgid        PGID      process group ID or, equivalently, the process ID of the process group leader.  (alias
                             pgrp).

       pgrp        PGRP      see pgid.  (alias pgid).

       pid         PID       a number representing the process ID (alias tgid).

       pidns       PIDNS     Unique inode number describing the namespace the process belongs to.  See namespaces(7).

       pmem        %MEM      see %mem.  (alias %mem).

       policy      POL       scheduling class of the process.  (alias class, cls).  Possible values are:

                                      -   not reported
                                      TS  SCHED_OTHER
                                      FF  SCHED_FIFO
                                      RR  SCHED_RR
                                      B   SCHED_BATCH
                                      ISO SCHED_ISO
                                      IDL SCHED_IDLE
                                      DLN SCHED_DEADLINE
                                      ?   unknown value

       ppid        PPID      parent process ID.

       pri         PRI       priority of the process.  Higher number means lower priority.

       psr         PSR       processor that process is currently assigned to.

       rgid        RGID      real group ID.

       rgroup      RGROUP    real group name.  This will be the textual group ID, if it can be obtained and the field
                             width permits, or a decimal representation otherwise.

       rss         RSS       resident set size, the non-swapped physical memory that a task has used (in kilobytes).
                             (alias rssize, rsz).

       rssize      RSS       see rss.  (alias rss, rsz).

       rsz         RSZ       see rss.  (alias rss, rssize).

       rtprio      RTPRIO    realtime priority.

       ruid        RUID      real user ID.

       ruser       RUSER     real user ID.  This will be the textual user ID, if it can be obtained and the field
                             width permits, or a decimal representation otherwise.

       s           S         minimal state display (one character).  See section PROCESS STATE CODES for the
                             different values.  See also stat if you want additional information displayed.  (alias
                             state).

       sched       SCH       scheduling policy of the process.  The policies SCHED_OTHER (SCHED_NORMAL), SCHED_FIFO,
                             SCHED_RR, SCHED_BATCH, SCHED_ISO, SCHED_IDLE and SCHED_DEADLINE are respectively
                             displayed as 0, 1, 2, 3, 4, 5 and 6.

       seat        SEAT      displays the identifier associated with all hardware devices assigned to a specific
                             workplace, if systemd support has been included.

       sess        SESS      session ID or, equivalently, the process ID of the session leader.  (alias session,
                             sid).

       sgi_p       P         processor that the process is currently executing on.  Displays "*" if the process is
                             not currently running or runnable.

       sgid        SGID      saved group ID.  (alias svgid).

       sgroup      SGROUP    saved group name.  This will be the textual group ID, if it can be obtained and the
                             field width permits, or a decimal representation otherwise.

       sid         SID       see sess.  (alias sess, session).

       sig         PENDING   see pending.  (alias pending, sig_pend).

       sigcatch    CAUGHT    see caught.  (alias caught, sig_catch).

       sigignore   IGNORED   see ignored.  (alias ignored, sig_ignore).

       sigmask     BLOCKED   see blocked.  (alias blocked, sig_block).

       size        SIZE      approximate amount of swap space that would be required if the process were to dirty all
                             writable pages and then be swapped out.  This number is very rough!

       slice       SLICE     displays the slice unit which a process belongs to, if systemd support has been
                             included.

       spid        SPID      see lwp.  (alias lwp, tid).

       stackp      STACKP    address of the bottom (start) of stack for the process.

       start       STARTED   time the command started.  If the process was started less than 24 hours ago, the output
                             format is "HH:MM:SS", else it is "  Mmm dd" (where Mmm is a three-letter month name).
                             See also lstart, bsdstart, start_time, and stime.

       start_time  START     starting time or date of the process.  Only the year will be displayed if the process
                             was not started the same year ps was invoked, or "MmmDD" if it was not started the same
                             day, or "HH:MM" otherwise.  See also bsdstart, start, lstart, and stime.

       stat        STAT      multi-character process state.  See section PROCESS STATE CODES for the different values
                             meaning.  See also s and state if you just want the first character displayed.

       state       S         see s. (alias s).

       stime       STIME     see start_time. (alias start_time).

       suid        SUID      saved user ID.  (alias svuid).

       supgid      SUPGID    group ids of supplementary groups, if any.  See getgroups(2).

       supgrp      SUPGRP    group names of supplementary groups, if any.  See getgroups(2).

       suser       SUSER     saved user name.  This will be the textual user ID, if it can be obtained and the field
                             width permits, or a decimal representation otherwise.  (alias svuser).

       svgid       SVGID     see sgid.  (alias sgid).

       svuid       SVUID     see suid.  (alias suid).

       sz          SZ        size in physical pages of the core image of the process.  This includes text, data, and
                             stack space.  Device mappings are currently excluded; this is subject to change.  See
                             vsz and rss.

       tgid        TGID      a number representing the thread group to which a task belongs (alias pid).  It is the
                             process ID of the thread group leader.

       thcount     THCNT     see nlwp.  (alias nlwp).  number of kernel threads owned by the process.

       tid         TID       the unique number representing a dispatchable entity (alias lwp, spid).  This value may
                             also appear as: a process ID (pid); a process group ID (pgrp); a session ID for the
                             session leader (sid); a thread group ID for the thread group leader (tgid); and a tty
                             process group ID for the process group leader (tpgid).

       time        TIME      cumulative CPU time, "[DD-]HH:MM:SS" format.  (alias cputime).

       times       TIME      cumulative CPU time in seconds (alias cputimes).

       tname       TTY       controlling tty (terminal).  (alias tt, tty).

       tpgid       TPGID     ID of the foreground process group on the tty (terminal) that the process is connected
                             to, or -1 if the process is not connected to a tty.

       trs         TRS       text resident set size, the amount of physical memory devoted to executable code.

       tt          TT        controlling tty (terminal).  (alias tname, tty).

       tty         TT        controlling tty (terminal).  (alias tname, tt).

       ucmd        CMD       see comm.  (alias comm, ucomm).

       ucomm       COMMAND   see comm.  (alias comm, ucmd).

       uid         UID       see euid.  (alias euid).

       uname       USER      see euser.  (alias euser, user).

       unit        UNIT      displays unit which a process belongs to, if systemd support has been included.

       user        USER      see euser.  (alias euser, uname).

       userns      USERNS    Unique inode number describing the namespace the process belongs to.  See namespaces(7).

       utsns       UTSNS     Unique inode number describing the namespace the process belongs to.  See namespaces(7).

       uunit       UUNIT     displays user unit which a process belongs to, if systemd support has been included.

       vsize       VSZ       see vsz.  (alias vsz).

       vsz         VSZ       virtual memory size of the process in KiB (1024-byte units).  Device mappings are
                             currently excluded; this is subject to change.  (alias vsize).

       wchan       WCHAN     name of the kernel function in which the process is sleeping, a "-" if the process is
                             running, or a "*" if the process is multi-threaded and ps is not displaying threads.

ENVIRONMENT VARIABLES
       The following environment variables could affect ps:

       COLUMNS
          Override default display width.

       LINES
          Override default display height.

       PS_PERSONALITY
          Set to one of posix, old, linux, bsd, sun, digital... (see section PERSONALITY below).

       CMD_ENV
          Set to one of posix, old, linux, bsd, sun, digital... (see section PERSONALITY below).

       I_WANT_A_BROKEN_PS
          Force obsolete command line interpretation.

       LC_TIME
          Date format.

       PS_COLORS
          Not currently supported.

       PS_FORMAT
          Default output format override.  You may set this to a format string of the type used for the -o option.
          The DefSysV and DefBSD values are particularly useful.

       POSIXLY_CORRECT
          Don't find excuses to ignore bad "features".

       POSIX2
          When set to "on", acts as POSIXLY_CORRECT.

       UNIX95
          Don't find excuses to ignore bad "features".

       _XPG
          Cancel CMD_ENV=irix non-standard behavior.

       In general, it is a bad idea to set these variables.  The one exception is CMD_ENV or PS_PERSONALITY, which
       could be set to Linux for normal systems.  Without that setting, ps follows the useless and bad parts of the
       Unix98 standard.

PERSONALITY
       390        like the OS/390 OpenEdition ps
       aix        like AIX ps
       bsd        like FreeBSD ps (totally non-standard)
       compaq     like Digital Unix ps
       debian     like the old Debian ps
       digital    like Tru64 (was Digital Unix, was OSF/1) ps
       gnu        like the old Debian ps
       hp         like HP-UX ps
       hpux       like HP-UX ps
       irix       like Irix ps
       linux      ***** recommended *****
       old        like the original Linux ps (totally non-standard)
       os390      like OS/390 Open Edition ps
       posix      standard
       s390       like OS/390 Open Edition ps
       sco        like SCO ps
       sgi        like Irix ps
       solaris2   like Solaris 2+ (SunOS 5) ps
       sunos4     like SunOS 4 (Solaris 1) ps (totally non-standard)
       svr4       standard
       sysv       standard
       tru64      like Tru64 (was Digital Unix, was OSF/1) ps
       unix       standard
       unix95     standard
       unix98     standard

SEE ALSO
       pgrep(1), pstree(1), top(1), proc(5).

STANDARDS
       This ps conforms to:

       1   Version 2 of the Single Unix Specification
       2   The Open Group Technical Standard Base Specifications, Issue 6
       3   IEEE Std 1003.1, 2004 Edition
       4   X/Open System Interfaces Extension [UP XSI]
       5   ISO/IEC 9945:2003

AUTHOR
       ps was originally written by Branko Lankester ⟨lankeste@fwi.uva.nl⟩.  Michael K. Johnson ⟨johnsonm@redhat.com⟩
       re-wrote it significantly to use the proc filesystem, changing a few things in the process.  Michael Shields
       ⟨mjshield@nyx.cs.du.edu⟩ added the pid-list feature.  Charles Blake ⟨cblake@bbn.com⟩ added multi-level sort‐
       ing, the dirent-style library, the device name-to-number mmaped database, the approximate binary search di‐
       rectly on System.map, and many code and documentation cleanups.  David Mossberger-Tang wrote the generic BFD
       support for psupdate.  Albert Cahalan ⟨albert@users.sf.net⟩ rewrote ps for full Unix98 and BSD support, along
       with some ugly hacks for obsolete and foreign syntax.

       Please send bug reports to ⟨procps@freelists.org⟩.  No subscription is required or suggested.

procps-ng                                             2020-06-04                                                PS(1)

================================================================================

COMMAND: kill
KILL(1)                                             User Commands                                             KILL(1)

NAME
       kill - send a signal to a process

SYNOPSIS
       kill [options] <pid> [...]

DESCRIPTION
       The default signal for kill is TERM.  Use -l or -L to list available signals.  Particularly useful signals in‐
       clude HUP, INT, KILL, STOP, CONT, and 0.  Alternate signals may be specified in three ways:  -9,  -SIGKILL  or
       -KILL.  Negative PID values may be used to choose whole process groups; see the PGID column in ps command out‐
       put.  A PID of -1 is special; it indicates all processes except the kill process itself and init.

OPTIONS
       <pid> [...]
              Send signal to every <pid> listed.

       -<signal>
       -s <signal>
       --signal <signal>
              Specify the signal to be sent.  The signal can be specified by using name or number.  The  behavior  of
              signals is explained in signal(7) manual page.

       -q, --queue value
              Use  sigqueue(3)  rather  than  kill(2) and the value argument is used to specify an integer to be sent
              with the signal. If the receiving process has installed a handler for this signal using the  SA_SIGINFO
              flag to sigaction(2) , then it can obtain this data via the si_value field of the siginfo_t structure.

       -l, --list [signal]
              List signal names.  This option has optional argument, which will convert signal number to signal name,
              or other way round.

       -L, --table
              List signal names in a nice table.

       NOTES  Your shell (command line interpreter) may have a built-in kill command.  You may need to run  the  com‐
              mand described here as /bin/kill to solve the conflict.

EXAMPLES
       kill -9 -1
              Kill all processes you can kill.

       kill -l 11
              Translate number 11 into a signal name.

       kill -L
              List the available signal choices in a nice table.

       kill 123 543 2341 3453
              Send the default signal, SIGTERM, to all those processes.

SEE ALSO
       kill(2), killall(1), nice(1), pkill(1), renice(1), signal(7), sigqueue(3), skill(1)

STANDARDS
       This command meets appropriate standards.  The -L flag is Linux-specific.

AUTHOR
       Albert  Cahalan ⟨albert@users.sf.net⟩ wrote kill in 1999 to replace a bsdutils one that was not standards com‐
       pliant.  The util-linux one might also work correctly.

REPORTING BUGS
       Please send bug reports to ⟨procps@freelists.org⟩

procps-ng                                             2020-04-24                                              KILL(1)

================================================================================

COMMAND: echo
ECHO(1)                                             User Commands                                             ECHO(1)

NAME
       echo - display a line of text

SYNOPSIS
       echo [SHORT-OPTION]... [STRING]...
       echo LONG-OPTION

DESCRIPTION
       Echo the STRING(s) to standard output.

       -n     do not output the trailing newline

       -e     enable interpretation of backslash escapes

       -E     disable interpretation of backslash escapes (default)

       --help display this help and exit

       --version
              output version information and exit

       If -e is in effect, the following sequences are recognized:

       \\     backslash

       \a     alert (BEL)

       \b     backspace

       \c     produce no further output

       \e     escape

       \f     form feed

       \n     new line

       \r     carriage return

       \t     horizontal tab

       \v     vertical tab

       \0NNN  byte with octal value NNN (1 to 3 digits)

       \xHH   byte with hexadecimal value HH (1 to 2 digits)

       NOTE:  your  shell  may  have  its  own  version of echo, which usually supersedes the version described here.
       Please refer to your shell's documentation for details about the options it supports.

AUTHOR
       Written by Brian Fox and Chet Ramey.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright  ©  2020  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU   GPL   version   3   or   later
       <https://gnu.org/licenses/gpl.html>.
       This  is  free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent per‐
       mitted by law.

SEE ALSO
       Full documentation <https://www.gnu.org/software/coreutils/echo>
       or available locally via: info '(coreutils) echo invocation'

GNU coreutils 8.32                                  February 2024                                             ECHO(1)

================================================================================

COMMAND: cut
CUT(1)                                              User Commands                                              CUT(1)

NAME
       cut - remove sections from each line of files

SYNOPSIS
       cut OPTION... [FILE]...

DESCRIPTION
       Print selected parts of lines from each FILE to standard output.

       With no FILE, or when FILE is -, read standard input.

       Mandatory arguments to long options are mandatory for short options too.

       -b, --bytes=LIST
              select only these bytes

       -c, --characters=LIST
              select only these characters

       -d, --delimiter=DELIM
              use DELIM instead of TAB for field delimiter

       -f, --fields=LIST
              select  only these fields;  also print any line that contains no delimiter character, unless the -s op‐
              tion is specified

       -n     (ignored)

       --complement
              complement the set of selected bytes, characters or fields

       -s, --only-delimited
              do not print lines not containing delimiters

       --output-delimiter=STRING
              use STRING as the output delimiter the default is to use the input delimiter

       -z, --zero-terminated
              line delimiter is NUL, not newline

       --help display this help and exit

       --version
              output version information and exit

       Use one, and only one of -b, -c or -f.  Each LIST is made up of one range, or many ranges separated by commas.
       Selected  input  is written in the same order that it is read, and is written exactly once.  Each range is one
       of:

       N      N'th byte, character or field, counted from 1

       N-     from N'th byte, character or field, to end of line

       N-M    from N'th to M'th (included) byte, character or field

       -M     from first to M'th (included) byte, character or field

AUTHOR
       Written by David M. Ihnat, David MacKenzie, and Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright  ©  2020  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU   GPL   version   3   or   later
       <https://gnu.org/licenses/gpl.html>.
       This  is  free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent per‐
       mitted by law.

SEE ALSO
       Full documentation <https://www.gnu.org/software/coreutils/cut>
       or available locally via: info '(coreutils) cut invocation'

GNU coreutils 8.32                                  February 2024                                              CUT(1)

================================================================================

COMMAND: awk
GAWK(1)                                            Utility Commands                                           GAWK(1)

NAME
       gawk - pattern scanning and processing language

SYNOPSIS
       gawk [ POSIX or GNU style options ] -f program-file [ -- ] file ...
       gawk [ POSIX or GNU style options ] [ -- ] program-text file ...

DESCRIPTION
       Gawk  is  the  GNU Project's implementation of the AWK programming language.  It conforms to the definition of
       the language in the POSIX 1003.1 standard.  This version in turn is based on the description in The  AWK  Pro‐
       gramming Language, by Aho, Kernighan, and Weinberger.  Gawk provides the additional features found in the cur‐
       rent version of Brian Kernighan's awk and numerous GNU-specific extensions.

       The command line consists of options to gawk itself, the AWK program text (if not supplied via the -f or --in‐
       clude options), and values to be made available in the ARGC and ARGV pre-defined AWK variables.

       When gawk is invoked with the --profile option, it starts gathering profiling statistics from the execution of
       the program.  Gawk runs more slowly in this mode, and automatically produces an execution profile in the  file
       awkprof.out when done.  See the --profile option, below.

       Gawk also has an integrated debugger. An interactive debugging session can be started by supplying the --debug
       option to the command line. In this mode of execution, gawk loads the AWK source code and then prompts for de‐
       bugging commands.  Gawk can only debug AWK program source provided with the -f and --include options.  The de‐
       bugger is documented in GAWK: Effective AWK Programming.

OPTION FORMAT
       Gawk options may be either traditional POSIX-style one letter options, or GNU-style long options.   POSIX  op‐
       tions  start  with  a single “-”, while long options start with “--”.  Long options are provided for both GNU-
       specific features and for POSIX-mandated features.

       Gawk-specific options are typically used in long-option form.  Arguments to long  options  are  either  joined
       with the option by an = sign, with no intervening spaces, or they may be provided in the next command line ar‐
       gument.  Long options may be abbreviated, as long as the abbreviation remains unique.

       Additionally, every long option has a corresponding short option, so that the option's  functionality  may  be
       used from within #!  executable scripts.

OPTIONS
       Gawk  accepts  the  following options.  Standard options are listed first, followed by options for gawk exten‐
       sions, listed alphabetically by short option.

       -f program-file
       --file program-file
              Read the AWK program source from the file program-file, instead of from the first  command  line  argu‐
              ment.   Multiple  -f  (or --file) options may be used.  Files read with -f are treated as if they begin
              with an implicit @namespace "awk" statement.

       -F fs
       --field-separator fs
              Use fs for the input field separator (the value of the FS predefined variable).

       -v var=val
       --assign var=val
              Assign the value val to the variable var, before execution of the program begins.  Such variable values
              are available to the BEGIN rule of an AWK program.

       -b
       --characters-as-bytes
              Treat  all  input data as single-byte characters. In other words, don't pay any attention to the locale
              information when attempting to process strings as multibyte characters.  The --posix  option  overrides
              this one.

       -c
       --traditional
              Run  in  compatibility mode.  In compatibility mode, gawk behaves identically to Brian Kernighan's awk;
              none of the GNU-specific extensions are recognized.  See GNU EXTENSIONS, below, for more information.

       -C
       --copyright
              Print the short version of the GNU copyright information message on the standard output and  exit  suc‐
              cessfully.

       -d[file]
       --dump-variables[=file]
              Print a sorted list of global variables, their types and final values to file.  If no file is provided,
              gawk uses a file named awkvars.out in the current directory.
              Having a list of all the global variables is a good way to look for typographical errors in  your  pro‐
              grams.   You  would  also  use this option if you have a large program with a lot of functions, and you
              want to be sure that your functions don't inadvertently use global variables that you meant to  be  lo‐
              cal.  (This is a particularly easy mistake to make with simple variable names like i, j, and so on.)

       -D[file]
       --debug[=file]
              Enable  debugging of AWK programs.  By default, the debugger reads commands interactively from the key‐
              board (standard input).  The optional file argument specifies a file with a list of  commands  for  the
              debugger to execute non-interactively.

       -e program-text
       --source program-text
              Use  program-text as AWK program source code.  This option allows the easy intermixing of library func‐
              tions (used via the -f and --include options) with source code entered on the command line.  It is  in‐
              tended primarily for medium to large AWK programs used in shell scripts.  Each argument supplied via -e
              is treated as if it begins with an implicit @namespace "awk" statement.

       -E file
       --exec file
              Similar to -f, however, this is option is the  last  one  processed.   This  should  be  used  with  #!
              scripts,  particularly for CGI applications, to avoid passing in options or source code (!) on the com‐
              mand line from a URL.  This option disables command-line variable assignments.

       -g
       --gen-pot
              Scan and parse the AWK program, and generate a GNU .pot (Portable Object Template) format file on stan‐
              dard  output  with  entries for all localizable strings in the program.  The program itself is not exe‐
              cuted.  See the GNU gettext distribution for more information on .pot files.

       -h
       --help Print a relatively short summary of the available options on the standard output.  (Per the GNU  Coding
              Standards, these options cause an immediate, successful exit.)

       -i include-file
       --include include-file
              Load  an awk source library.  This searches for the library using the AWKPATH environment variable.  If
              the initial search fails, another attempt will be made after appending the .awk suffix.  The file  will
              be  loaded  only once (i.e., duplicates are eliminated), and the code does not constitute the main pro‐
              gram source.  Files read with --include are treated as if they begin with an implicit @namespace  "awk"
              statement.

       -l lib
       --load lib
              Load  a gawk extension from the shared library lib.  This searches for the library using the AWKLIBPATH
              environment variable.  If the initial search fails, another attempt will be made  after  appending  the
              default  shared  library suffix for the platform.  The library initialization routine is expected to be
              named dl_load().

       -L [value]
       --lint[=value]
              Provide warnings about constructs that are dubious or non-portable to other AWK implementations.   With
              an  optional  argument  of  fatal, lint warnings become fatal errors.  This may be drastic, but its use
              will certainly encourage the development of cleaner AWK programs.  With an  optional  argument  of  in‐
              valid,  only warnings about things that are actually invalid are issued. (This is not fully implemented
              yet.)  With an optional argument of no-ext, warnings about gawk extensions are disabled.

       -M
       --bignum
              Force arbitrary precision arithmetic on numbers. This option has no effect if gawk is not  compiled  to
              use the GNU MPFR and GMP libraries.  (In such a case, gawk issues a warning.)

       -n
       --non-decimal-data
              Recognize octal and hexadecimal values in input data.  Use this option with great caution!

       -N
       --use-lc-numeric
              Force  gawk  to  use  the locale's decimal point character when parsing input data.  Although the POSIX
              standard requires this behavior, and gawk does so when --posix is in effect, the default is  to  follow
              traditional behavior and use a period as the decimal point, even in locales where the period is not the
              decimal point character.  This option overrides  the  default  behavior,  without  the  full  draconian
              strictness of the --posix option.

       -o[file]
       --pretty-print[=file]
              Output a pretty printed version of the program to file.  If no file is provided, gawk uses a file named
              awkprof.out in the current directory.  This option implies --no-optimize.

       -O
       --optimize
              Enable gawk's default optimizations upon the internal representation of the program.   Currently,  this
              just includes simple constant folding.  This option is on by default.

       -p[prof-file]
       --profile[=prof-file]
              Start  a profiling session, and send the profiling data to prof-file.  The default is awkprof.out.  The
              profile contains execution counts of each statement in the program in the left margin and function call
              counts for each user-defined function.  This option implies --no-optimize.

       -P
       --posix
              This turns on compatibility mode, with the following additional restrictions:

              • \x escape sequences are not recognized.

              • You cannot continue lines after ?  and :.

              • The synonym func for the keyword function is not recognized.

              • The operators ** and **= cannot be used in place of ^ and ^=.

       -r
       --re-interval
              Enable the use of interval expressions in regular expression matching (see Regular Expressions, below).
              Interval expressions were not traditionally available in the AWK language.  The  POSIX  standard  added
              them,  to  make awk and egrep consistent with each other.  They are enabled by default, but this option
              remains for use together with --traditional.

       -s
       --no-optimize
              Disable gawk's default optimizations upon the internal representation of the program.

       -S
       --sandbox
              Run gawk in sandbox mode, disabling the system() function, input redirection with getline, output redi‐
              rection  with  print and printf, and loading dynamic extensions.  Command execution (through pipelines)
              is also disabled.  This effectively blocks a script from accessing  local  resources,  except  for  the
              files specified on the command line.

       -t
       --lint-old
              Provide warnings about constructs that are not portable to the original version of UNIX awk.

       -V
       --version
              Print  version  information  for  this  particular copy of gawk on the standard output.  This is useful
              mainly for knowing if the current copy of gawk on your system is up to date with  respect  to  whatever
              the  Free  Software Foundation is distributing.  This is also useful when reporting bugs.  (Per the GNU
              Coding Standards, these options cause an immediate, successful exit.)

       --     Signal the end of options. This is useful to allow further arguments to the AWK program itself to start
              with  a  “-”.   This provides consistency with the argument parsing convention used by most other POSIX
              programs.

       In compatibility mode, any other options are flagged as invalid, but are otherwise ignored.  In normal  opera‐
       tion,  as long as program text has been supplied, unknown options are passed on to the AWK program in the ARGV
       array for processing.  This is particularly useful for running AWK programs via the #!  executable interpreter
       mechanism.

       For POSIX compatibility, the -W option may be used, followed by the name of a long option.

AWK PROGRAM EXECUTION
       An AWK program consists of a sequence of optional directives, pattern-action statements, and optional function
       definitions.

              @include "filename"
              @load "filename"
              @namespace "name"
              pattern   { action statements }
              function name(parameter list) { statements }

       Gawk first reads the program source from the program-file(s) if specified, from arguments to --source, or from
       the  first non-option argument on the command line.  The -f and --source options may be used multiple times on
       the command line.  Gawk reads the program text as if all the program-files and command line source  texts  had
       been concatenated together.  This is useful for building libraries of AWK functions, without having to include
       them in each new AWK program that uses them.  It also provides the ability to mix library functions with  com‐
       mand line programs.

       In addition, lines beginning with @include may be used to include other source files into your program, making
       library use even easier.  This is equivalent to using the --include option.

       Lines beginning with @load may be used to load extension functions into your program.  This is  equivalent  to
       using the --load option.

       The  environment  variable  AWKPATH specifies a search path to use when finding source files named with the -f
       and --include options.  If this variable does not exist, the default path is  ".:/usr/local/share/awk".   (The
       actual  directory  may vary, depending upon how gawk was built and installed.)  If a file name given to the -f
       option contains a “/” character, no path search is performed.

       The environment variable AWKLIBPATH specifies a search path to use when finding source files  named  with  the
       --load  option.   If this variable does not exist, the default path is "/usr/local/lib/gawk".  (The actual di‐
       rectory may vary, depending upon how gawk was built and installed.)

       Gawk executes AWK programs in the following order.  First, all variable assignments specified via the  -v  op‐
       tion  are  performed.  Next, gawk compiles the program into an internal form.  Then, gawk executes the code in
       the BEGIN rule(s) (if any), and then proceeds to read each file named in the ARGV array (up to  ARGV[ARGC-1]).
       If there are no files named on the command line, gawk reads the standard input.

       If  a  filename on the command line has the form var=val it is treated as a variable assignment.  The variable
       var will be assigned the value val.  (This happens after any BEGIN rule(s) have been run.)  Command line vari‐
       able assignment is most useful for dynamically assigning values to the variables AWK uses to control how input
       is broken into fields and records.  It is also useful for controlling state if multiple passes are needed over
       a single data file.

       If the value of a particular element of ARGV is empty (""), gawk skips over it.

       For  each input file, if a BEGINFILE rule exists, gawk executes the associated code before processing the con‐
       tents of the file. Similarly, gawk executes the code associated with ENDFILE after processing the file.

       For each record in the input, gawk tests to see if it matches any pattern in the AWK program.  For  each  pat‐
       tern  that the record matches, gawk executes the associated action.  The patterns are tested in the order they
       occur in the program.

       Finally, after all the input is exhausted, gawk executes the code in the END rule(s) (if any).

   Command Line Directories
       According to POSIX, files named on the awk command line must be text files.  The behavior is ``undefined''  if
       they are not.  Most versions of awk treat a directory on the command line as a fatal error.

       Starting  with  version  4.0  of  gawk,  a  directory on the command line produces a warning, but is otherwise
       skipped.  If either of the --posix or --traditional options is given, then gawk reverts to  treating  directo‐
       ries on the command line as a fatal error.

VARIABLES, RECORDS AND FIELDS
       AWK  variables are dynamic; they come into existence when they are first used.  Their values are either float‐
       ing-point numbers or strings, or both, depending upon how they are used.  Additionally, gawk allows  variables
       to  have regular-expression type.  AWK also has one dimensional arrays; arrays with multiple dimensions may be
       simulated.  Gawk provides true arrays of arrays; see Arrays, below.  Several pre-defined variables are set  as
       a program runs; these are described as needed and summarized below.

   Records
       Normally, records are separated by newline characters.  You can control how records are separated by assigning
       values to the built-in variable RS.  If RS is any single character, that character separates records.   Other‐
       wise,  RS  is  a  regular  expression.   Text  in the input that matches this regular expression separates the
       record.  However, in compatibility mode, only the first character of its string value is used  for  separating
       records.   If  RS is set to the null string, then records are separated by empty lines.  When RS is set to the
       null string, the newline character always acts as a field separator, in addition  to  whatever  value  FS  may
       have.

   Fields
       As  each  input  record is read, gawk splits the record into fields, using the value of the FS variable as the
       field separator.  If FS is a single character, fields are separated by that character.   If  FS  is  the  null
       string, then each individual character becomes a separate field.  Otherwise, FS is expected to be a full regu‐
       lar expression.  In the special case that FS is a single space, fields are separated by runs of spaces  and/or
       tabs  and/or newlines.  NOTE: The value of IGNORECASE (see below) also affects how fields are split when FS is
       a regular expression, and how records are separated when RS is a regular expression.

       If the FIELDWIDTHS variable is set to a space-separated list of numbers, each field is expected to have  fixed
       width,  and gawk splits up the record using the specified widths.  Each field width may optionally be preceded
       by a colon-separated value specifying the number of characters to skip before the field starts.  The value  of
       FS is ignored.  Assigning a new value to FS or FPAT overrides the use of FIELDWIDTHS.

       Similarly, if the FPAT variable is set to a string representing a regular expression, each field is made up of
       text that matches that regular expression. In this case, the regular expression  describes  the  fields  them‐
       selves,  instead  of the text that separates the fields.  Assigning a new value to FS or FIELDWIDTHS overrides
       the use of FPAT.

       Each field in the input record may be referenced by its position: $1, $2, and so on.  $0 is the whole  record,
       including leading and trailing whitespace.  Fields need not be referenced by constants:

              n = 5
              print $n

       prints the fifth field in the input record.

       The variable NF is set to the total number of fields in the input record.

       References  to  non-existent fields (i.e., fields after $NF) produce the null string.  However, assigning to a
       non-existent field (e.g., $(NF+2) = 5) increases the value of NF, creates any intervening fields with the null
       string  as  their  values, and causes the value of $0 to be recomputed, with the fields being separated by the
       value of OFS.  References to negative numbered fields cause a fatal error.  Decrementing NF causes the  values
       of fields past the new value to be lost, and the value of $0 to be recomputed, with the fields being separated
       by the value of OFS.

       Assigning a value to an existing field causes the whole record to be rebuilt when  $0  is  referenced.   Simi‐
       larly, assigning a value to $0 causes the record to be resplit, creating new values for the fields.

   Built-in Variables
       Gawk's built-in variables are:

       ARGC        The number of command line arguments (does not include options to gawk, or the program source).

       ARGIND      The index in ARGV of the current file being processed.

       ARGV        Array  of  command line arguments.  The array is indexed from 0 to ARGC - 1.  Dynamically changing
                   the contents of ARGV can control the files used for data.

       BINMODE     On non-POSIX systems, specifies use of “binary” mode for all file I/O.  Numeric values of 1, 2, or
                   3,  specify  that  input  files,  output files, or all files, respectively, should use binary I/O.
                   String values of "r", or "w" specify that input files, or output files, respectively,  should  use
                   binary  I/O.   String  values  of  "rw" or "wr" specify that all files should use binary I/O.  Any
                   other string value is treated as "rw", but generates a warning message.

       CONVFMT     The conversion format for numbers, "%.6g", by default.

       ENVIRON     An array containing the values of the current environment.  The array is indexed by  the  environ‐
                   ment  variables,  each  element  being  the value of that variable (e.g., ENVIRON["HOME"] might be
                   "/home/arnold").

                   In POSIX mode, changing this array does not affect the environment seen  by  programs  which  gawk
                   spawns  via redirection or the system() function.  Otherwise, gawk updates its real environment so
                   that programs it spawns see the changes.

       ERRNO       If a system error occurs either doing a redirection for getline, during a  read  for  getline,  or
                   during  a  close(),  then  ERRNO is set to a string describing the error.  The value is subject to
                   translation in non-English locales.  If the string in ERRNO corresponds to a system error  in  the
                   errno(3)  variable,  then the numeric value can be found in PROCINFO["errno"].  For non-system er‐
                   rors, PROCINFO["errno"] will be zero.

       FIELDWIDTHS A whitespace-separated list of field widths.  When set, gawk parses the input into fields of fixed
                   width, instead of using the value of the FS variable as the field separator.  Each field width may
                   optionally be preceded by a colon-separated value specifying the number of characters to skip  be‐
                   fore the field starts.  See Fields, above.

       FILENAME    The  name  of the current input file.  If no files are specified on the command line, the value of
                   FILENAME is “-”.  However, FILENAME is undefined inside the BEGIN rule (unless set by getline).

       FNR         The input record number in the current input file.

       FPAT        A regular expression describing the contents of the fields in a record.  When set, gawk parses the
                   input into fields, where the fields match the regular expression, instead of using the value of FS
                   as the field separator.  See Fields, above.

       FS          The input field separator, a space by default.  See Fields, above.

       FUNCTAB     An array whose indices and corresponding values are the names of all the user-defined or extension
                   functions in the program.  NOTE: You may not use the delete statement with the FUNCTAB array.

       IGNORECASE  Controls  the case-sensitivity of all regular expression and string operations.  If IGNORECASE has
                   a non-zero value, then string comparisons and pattern matching in rules, field splitting  with  FS
                   and  FPAT, record separating with RS, regular expression matching with ~ and !~, and the gensub(),
                   gsub(), index(), match(), patsplit(), split(), and sub() built-in functions all ignore  case  when
                   doing  regular  expression  operations.   NOTE:  Array subscripting is not affected.  However, the
                   asort() and asorti() functions are affected.
                   Thus, if IGNORECASE is not equal to zero, /aB/ matches all of the strings "ab",  "aB",  "Ab",  and
                   "AB".   As with all AWK variables, the initial value of IGNORECASE is zero, so all regular expres‐
                   sion and string operations are normally case-sensitive.

       LINT        Provides dynamic control of the --lint option from within an AWK program.  When true, gawk  prints
                   lint  warnings. When false, it does not.  The values allowed for the --lint option may also be as‐
                   signed to LINT, with the same effects.  Any other true value just prints warnings.

       NF          The number of fields in the current input record.

       NR          The total number of input records seen so far.

       OFMT        The output format for numbers, "%.6g", by default.

       OFS         The output field separator, a space by default.

       ORS         The output record separator, by default a newline.

       PREC        The working precision of arbitrary precision floating-point numbers, 53 by default.

       PROCINFO    The elements of this array provide access to information about the running AWK program.   On  some
                   systems,  there  may  be elements in the array, "group1" through "groupn" for some n, which is the
                   number of supplementary groups that the process has.  Use the in operator to test for  these  ele‐
                   ments.  The following elements are guaranteed to be available:

                   PROCINFO["argv"]     The  command line arguments as received by gawk at the C-language level.  The
                                        subscripts start from zero.

                   PROCINFO["egid"]     The value of the getegid(2) system call.

                   PROCINFO["errno"]    The value of errno(3) when ERRNO is set to the associated error message.

                   PROCINFO["euid"]     The value of the geteuid(2) system call.

                   PROCINFO["FS"]       "FS" if field splitting with FS is in effect, "FPAT" if field splitting  with
                                        FPAT  is  in  effect, "FIELDWIDTHS" if field splitting with FIELDWIDTHS is in
                                        effect, or "API" if API input parser field splitting is in effect.

                   PROCINFO["gid"]      The value of the getgid(2) system call.

                   PROCINFO["identifiers"]
                                        A subarray, indexed by the names of all identifiers used in the text  of  the
                                        AWK program.  The values indicate what gawk knows about the identifiers after
                                        it has finished parsing the program; they are not updated while  the  program
                                        runs.  For each identifier, the value of the element is one of the following:

                                        "array"     The identifier is an array.

                                        "builtin"   The identifier is a built-in function.

                                        "extension" The  identifier  is  an  extension  function  loaded via @load or
                                                    --load.

                                        "scalar"    The identifier is a scalar.

                                        "untyped"   The identifier is untyped (could be used as a  scalar  or  array,
                                                    gawk doesn't know yet).

                                        "user"      The identifier is a user-defined function.

                   PROCINFO["pgrpid"]   The value of the getpgrp(2) system call.

                   PROCINFO["pid"]      The value of the getpid(2) system call.

                   PROCINFO["platform"] A string indicating the platform for which gawk was compiled.  It is one of:

                                        "djgpp", "mingw"
                                               Microsoft Windows, using either DJGPP, or MinGW, respectively.

                                        "os2"  OS/2.

                                        "posix"
                                               GNU/Linux, Cygwin, Mac OS X, and legacy Unix systems.

                                        "vms"  OpenVMS or Vax/VMS.

                   PROCINFO["ppid"]     The value of the getppid(2) system call.

                   PROCINFO["strftime"] The  default  time  format string for strftime().  Changing its value affects
                                        how strftime() formats time values when called with no arguments.

                   PROCINFO["uid"]      The value of the getuid(2) system call.

                   PROCINFO["version"]  The version of gawk.

                   The following elements are present if loading dynamic extensions is available:

                   PROCINFO["api_major"]
                          The major version of the extension API.

                   PROCINFO["api_minor"]
                          The minor version of the extension API.

                   The following elements are available if MPFR support is compiled into gawk:

                   PROCINFO["gmp_version"]
                          The version of the GNU GMP library used for arbitrary precision number support in gawk.

                   PROCINFO["mpfr_version"]
                          The version of the GNU MPFR library used for arbitrary precision number support in gawk.

                   PROCINFO["prec_max"]
                          The maximum precision supported by the GNU MPFR library for arbitrary  precision  floating-
                          point numbers.

                   PROCINFO["prec_min"]
                          The  minimum  precision  allowed  by the GNU MPFR library for arbitrary precision floating-
                          point numbers.

                   The following elements may set by a program to change gawk's behavior:

                   PROCINFO["NONFATAL"]
                          If this exists, then I/O errors for all redirections become nonfatal.

                   PROCINFO["name", "NONFATAL"]
                          Make I/O errors for name be nonfatal.

                   PROCINFO["command", "pty"]
                          Use a pseudo-tty for two-way communication with command instead of setting up  two  one-way
                          pipes.

                   PROCINFO["input", "READ_TIMEOUT"]
                          The  timeout  in  milliseconds  for  reading  data from input, where input is a redirection
                          string or a filename. A value of zero or less than zero means no timeout.

                   PROCINFO["input", "RETRY"]
                          If an I/O error that may be retried occurs when reading data from input, and this array en‐
                          try  exists, then getline returns -2 instead of following the default behavior of returning
                          -1 and configuring input to return no further data.  An I/O error that may  be  retried  is
                          one  where  errno(3)  has  the value EAGAIN, EWOULDBLOCK, EINTR, or ETIMEDOUT.  This may be
                          useful in conjunction with PROCINFO["input", "READ_TIMEOUT"] or in situations where a  file
                          descriptor has been configured to behave in a non-blocking fashion.

                   PROCINFO["sorted_in"]
                          If  this  element exists in PROCINFO, then its value controls the order in which array ele‐
                          ments are traversed in for loops.  Supported  values  are  "@ind_str_asc",  "@ind_num_asc",
                          "@val_type_asc",    "@val_str_asc",   "@val_num_asc",   "@ind_str_desc",   "@ind_num_desc",
                          "@val_type_desc", "@val_str_desc", "@val_num_desc", and "@unsorted".  The value can also be
                          the name (as a string) of any comparison function defined as follows:

                               function cmp_func(i1, v1, i2, v2)

                          where i1 and i2 are the indices, and v1 and v2 are the corresponding values of the two ele‐
                          ments being compared.  It should return a number less than, equal to, or  greater  than  0,
                          depending on how the elements of the array are to be ordered.

       ROUNDMODE   The  rounding  mode to use for arbitrary precision arithmetic on numbers, by default "N" (IEEE-754
                   roundTiesToEven mode).  The accepted values are:

                   "A" or "a"
                          for rounding away from zero.  These are only available if your version of the GNU MPFR  li‐
                          brary supports rounding away from zero.

                   "D" or "d" for roundTowardNegative.

                   "N" or "n" for roundTiesToEven.

                   "U" or "u" for roundTowardPositive.

                   "Z" or "z" for roundTowardZero.

       RS          The input record separator, by default a newline.

       RT          The  record  terminator.  Gawk sets RT to the input text that matched the character or regular ex‐
                   pression specified by RS.

       RSTART      The index of the first character matched by match(); 0 if no match.  (This implies that  character
                   indices start at one.)

       RLENGTH     The length of the string matched by match(); -1 if no match.

       SUBSEP      The string used to separate multiple subscripts in array elements, by default "\034".

       SYMTAB      An  array  whose indices are the names of all currently defined global variables and arrays in the
                   program.  The array may be used for indirect access to read or write the value of a variable:

                        foo = 5
                        SYMTAB["foo"] = 4
                        print foo    # prints 4

                   The typeof() function may be used to test if an element in SYMTAB is an array.  You  may  not  use
                   the  delete  statement  with  the SYMTAB array, nor assign to elements with an index that is not a
                   variable name.

       TEXTDOMAIN  The text domain of the AWK program; used to find the  localized  translations  for  the  program's
                   strings.

   Arrays
       Arrays  are subscripted with an expression between square brackets ([ and ]).  If the expression is an expres‐
       sion list (expr, expr ...)  then the array subscript is a  string  consisting  of  the  concatenation  of  the
       (string)  value  of  each expression, separated by the value of the SUBSEP variable.  This facility is used to
       simulate multiply dimensioned arrays.  For example:

              i = "A"; j = "B"; k = "C"
              x[i, j, k] = "hello, world\n"

       assigns the string  "hello, world\n"  to  the  element  of  the  array  x  which  is  indexed  by  the  string
       "A\034B\034C".  All arrays in AWK are associative, i.e., indexed by string values.

       The special operator in may be used to test if an array has an index consisting of a particular value:

              if (val in array)
                   print array[val]

       If the array has multiple subscripts, use (i, j) in array.

       The  in  construct  may also be used in a for loop to iterate over all the elements of an array.  However, the
       (i, j) in array construct only works in tests, not in for loops.

       An element may be deleted from an array using the delete statement.  The delete statement may also be used  to
       delete the entire contents of an array, just by specifying the array name without a subscript.

       gawk supports true multidimensional arrays. It does not require that such arrays be ``rectangular'' as in C or
       C++.  For example:

              a[1] = 5
              a[2][1] = 6
              a[2][2] = 7

       NOTE: You may need to tell gawk that an array element is really a subarray in order to use it where  gawk  ex‐
       pects  an  array  (such  as in the second argument to split()).  You can do this by creating an element in the
       subarray and then deleting it with the delete statement.

   Namespaces
       Gawk provides a simple namespace facility to help work around the fact that all variables in AWK are global.

       A qualified name consists of a two simple identifiers joined by a double colon (::).  The left-hand identifier
       represents  the namespace and the right-hand identifier is the variable within it.  All simple (non-qualified)
       names are considered to be in the ``current'' namespace; the default namespace is awk.  However, simple  iden‐
       tifiers  consisting  solely  of uppercase letters are forced into the awk namespace, even if the current name‐
       space is different.

       You change the current namespace with an @namespace "name" directive.

       The standard predefined builtin function names may not be used as namespace names.  The  names  of  additional
       functions  provided  by gawk may be used as namespace names or as simple identifiers in other namespaces.  For
       more details, see GAWK: Effective AWK Programming.

   Variable Typing And Conversion
       Variables and fields may be (floating point) numbers, or strings, or both.  They may also be  regular  expres‐
       sions.  How the value of a variable is interpreted depends upon its context.  If used in a numeric expression,
       it will be treated as a number; if used as a string it will be treated as a string.

       To force a variable to be treated as a number, add zero to it; to force it to be treated as a string, concate‐
       nate it with the null string.

       Uninitialized variables have the numeric value zero and the string value "" (the null, or empty, string).

       When a string must be converted to a number, the conversion is accomplished using strtod(3).  A number is con‐
       verted to a string by using the value of CONVFMT as a format string for sprintf(3), with the numeric value  of
       the variable as the argument.  However, even though all numbers in AWK are floating-point, integral values are
       always converted as integers.  Thus, given

              CONVFMT = "%2.2f"
              a = 12
              b = a ""

       the variable b has a string value of "12" and not "12.00".

       NOTE: When operating in POSIX mode (such as with the --posix option), beware that locale settings  may  inter‐
       fere  with  the  way decimal numbers are treated: the decimal separator of the numbers you are feeding to gawk
       must conform to what your locale would expect, be it a comma (,) or a period (.).

       Gawk performs comparisons as follows: If two variables are numeric, they are  compared  numerically.   If  one
       value  is  numeric and the other has a string value that is a “numeric string,” then comparisons are also done
       numerically.  Otherwise, the numeric value is converted to a string and a string comparison is performed.  Two
       strings are compared, of course, as strings.

       Note  that  string  constants,  such as "57", are not numeric strings, they are string constants.  The idea of
       “numeric string” only applies to fields, getline input, FILENAME, ARGV elements, ENVIRON elements and the ele‐
       ments  of an array created by split() or patsplit() that are numeric strings.  The basic idea is that user in‐
       put, and only user input, that looks numeric, should be treated that way.

   Octal and Hexadecimal Constants
       You may use C-style octal and hexadecimal constants in your AWK program source code.  For example,  the  octal
       value 011 is equal to decimal 9, and the hexadecimal value 0x11 is equal to decimal 17.

   String Constants
       String  constants  in  AWK  are sequences of characters enclosed between double quotes (like "value").  Within
       strings, certain escape sequences are recognized, as in C.  These are:

       \\   A literal backslash.

       \a   The “alert” character; usually the ASCII BEL character.

       \b   Backspace.

       \f   Form-feed.

       \n   Newline.

       \r   Carriage return.

       \t   Horizontal tab.

       \v   Vertical tab.

       \xhex digits
            The character represented by the string of hexadecimal digits following the  \x.   Up  to  two  following
            hexadecimal  digits  are  considered part of the escape sequence.  E.g., "\x1B" is the ASCII ESC (escape)
            character.

       \ddd The character represented by the 1-, 2-, or 3-digit sequence of octal digits.  E.g., "\033" is the  ASCII
            ESC (escape) character.

       \c   The literal character c.

       In compatibility mode, the characters represented by octal and hexadecimal escape sequences are treated liter‐
       ally when used in regular expression constants.  Thus, /a\52b/ is equivalent to /a\*b/.

   Regexp Constants
       A regular expression constant is a sequence of characters enclosed between  forward  slashes  (like  /value/).
       Regular expression matching is described more fully below; see Regular Expressions.

       The  escape  sequences  described  earlier  may  also  be  used  inside  constant  regular  expressions (e.g.,
       /[ \t\f\n\r\v]/ matches whitespace characters).

       Gawk provides strongly typed regular expression constants. These are written with a leading @ symbol (like so:
       @/value/).   Such  constants may be assigned to scalars (variables, array elements) and passed to user-defined
       functions. Variables that have been so assigned have regular expression type.

PATTERNS AND ACTIONS
       AWK is a line-oriented language.  The pattern comes first, and then the action.   Action  statements  are  en‐
       closed in { and }.  Either the pattern may be missing, or the action may be missing, but, of course, not both.
       If the pattern is missing, the action executes for every single record of input.  A missing action is  equiva‐
       lent to

              { print }

       which prints the entire record.

       Comments begin with the # character, and continue until the end of the line.  Empty lines may be used to sepa‐
       rate statements.  Normally, a statement ends with a newline, however, this is not the case for lines ending in
       a comma, {, ?, :, &&, or ||.  Lines ending in do or else also have their statements automatically continued on
       the following line.  In other cases, a line can be continued by ending it with a “\”, in which case  the  new‐
       line is ignored.  However, a “\” after a # is not special.

       Multiple statements may be put on one line by separating them with a “;”.  This applies to both the statements
       within the action part of a pattern-action pair (the usual case), and to the pattern-action  statements  them‐
       selves.

   Patterns
       AWK patterns may be one of the following:

              BEGIN
              END
              BEGINFILE
              ENDFILE
              /regular expression/
              relational expression
              pattern && pattern
              pattern || pattern
              pattern ? pattern : pattern
              (pattern)
              ! pattern
              pattern1, pattern2

       BEGIN  and  END are two special kinds of patterns which are not tested against the input.  The action parts of
       all BEGIN patterns are merged as if all the statements had been written in a single BEGIN rule.  They are exe‐
       cuted before any of the input is read.  Similarly, all the END rules are merged, and executed when all the in‐
       put is exhausted (or when an exit statement is executed).  BEGIN and END  patterns  cannot  be  combined  with
       other patterns in pattern expressions.  BEGIN and END patterns cannot have missing action parts.

       BEGINFILE  and  ENDFILE  are  additional  special patterns whose actions are executed before reading the first
       record of each command-line input file and after reading the last record of each file.  Inside  the  BEGINFILE
       rule,  the  value  of ERRNO is the empty string if the file was opened successfully.  Otherwise, there is some
       problem with the file and the code should use nextfile to skip it. If that is  not  done,  gawk  produces  its
       usual fatal error for files that cannot be opened.

       For /regular expression/ patterns, the associated statement is executed for each input record that matches the
       regular expression.  Regular expressions are the same as those in egrep(1), and are summarized below.

       A relational expression may use any of the operators defined below in the section on actions.  These generally
       test whether certain fields match certain regular expressions.

       The  &&,  ||,  and  !  operators are logical AND, logical OR, and logical NOT, respectively, as in C.  They do
       short-circuit evaluation, also as in C, and are used for combining more primitive pattern expressions.  As  in
       most languages, parentheses may be used to change the order of evaluation.

       The  ?: operator is like the same operator in C.  If the first pattern is true then the pattern used for test‐
       ing is the second pattern, otherwise it is the third.  Only one of the second and third patterns is evaluated.

       The pattern1, pattern2 form of an expression is called a range pattern.  It matches all input records starting
       with  a record that matches pattern1, and continuing until a record that matches pattern2, inclusive.  It does
       not combine with any other sort of pattern expression.

   Regular Expressions
       Regular expressions are the extended kind found in egrep.  They are composed of characters as follows:

       c          Matches the non-metacharacter c.

       \c         Matches the literal character c.

       .          Matches any character including newline.

       ^          Matches the beginning of a string.

       $          Matches the end of a string.

       [abc...]   A character list: matches any of the characters abc....  You may include a range of  characters  by
                  separating them with a dash.  To include a literal dash in the list, put it first or last.

       [^abc...]  A negated character list: matches any character except abc....

       r1|r2      Alternation: matches either r1 or r2.

       r1r2       Concatenation: matches r1, and then r2.

       r+         Matches one or more r's.

       r*         Matches zero or more r's.

       r?         Matches zero or one r's.

       (r)        Grouping: matches r.

       r{n}
       r{n,}
       r{n,m}     One  or  two  numbers  inside  braces denote an interval expression.  If there is one number in the
                  braces, the preceding regular expression r is repeated n times.  If there are two numbers separated
                  by  a comma, r is repeated n to m times.  If there is one number followed by a comma, then r is re‐
                  peated at least n times.

       \y         Matches the empty string at either the beginning or the end of a word.

       \B         Matches the empty string within a word.

       \<         Matches the empty string at the beginning of a word.

       \>         Matches the empty string at the end of a word.

       \s         Matches any whitespace character.

       \S         Matches any nonwhitespace character.

       \w         Matches any word-constituent character (letter, digit, or underscore).

       \W         Matches any character that is not word-constituent.

       \`         Matches the empty string at the beginning of a buffer (string).

       \'         Matches the empty string at the end of a buffer.

       The escape sequences that are valid in string constants (see String Constants) are also valid in  regular  ex‐
       pressions.

       Character classes are a feature introduced in the POSIX standard.  A character class is a special notation for
       describing lists of characters that have a specific attribute, but where the actual characters themselves  can
       vary  from  country to country and/or from character set to character set.  For example, the notion of what is
       an alphabetic character differs in the USA and in France.

       A character class is only valid in a regular expression inside the brackets of a  character  list.   Character
       classes consist of [:, a keyword denoting the class, and :].  The character classes defined by the POSIX stan‐
       dard are:

       [:alnum:]  Alphanumeric characters.

       [:alpha:]  Alphabetic characters.

       [:blank:]  Space or tab characters.

       [:cntrl:]  Control characters.

       [:digit:]  Numeric characters.

       [:graph:]  Characters that are both printable and visible.  (A space is printable, but not visible, while an a
                  is both.)

       [:lower:]  Lowercase alphabetic characters.

       [:print:]  Printable characters (characters that are not control characters.)

       [:punct:]  Punctuation  characters (characters that are not letter, digits, control characters, or space char‐
                  acters).

       [:space:]  Space characters (such as space, tab, and formfeed, to name a few).

       [:upper:]  Uppercase alphabetic characters.

       [:xdigit:] Characters that are hexadecimal digits.

       For example, before the POSIX standard, to  match  alphanumeric  characters,  you  would  have  had  to  write
       /[A-Za-z0-9]/.  If your character set had other alphabetic characters in it, this would not match them, and if
       your character set collated differently from ASCII, this might not even match the ASCII  alphanumeric  charac‐
       ters.   With the POSIX character classes, you can write /[[:alnum:]]/, and this matches the alphabetic and nu‐
       meric characters in your character set, no matter what it is.

       Two additional special sequences can appear in character lists.  These  apply  to  non-ASCII  character  sets,
       which  can  have single symbols (called collating elements) that are represented with more than one character,
       as well as several characters that are equivalent for collating, or sorting, purposes.  (E.g.,  in  French,  a
       plain “e” and a grave-accented “`” are equivalent.)

       Collating Symbols
              A  collating  symbol is a multi-character collating element enclosed in [.  and .].  For example, if ch
              is a collating element, then [[.ch.]]  is a regular expression that  matches  this  collating  element,
              while [ch] is a regular expression that matches either c or h.

       Equivalence Classes
              An  equivalence class is a locale-specific name for a list of characters that are equivalent.  The name
              is enclosed in [= and =].  For example, the name e might be used to represent all of “e”, “´”, and “`”.
              In this case, [[=e=]] is a regular expression that matches any of e, ´, or `.

       These  features  are  very valuable in non-English speaking locales.  The library functions that gawk uses for
       regular expression matching currently only recognize POSIX character classes; they do not recognize  collating
       symbols or equivalence classes.

       The  \y,  \B,  \<, \>, \s, \S, \w, \W, \`, and \' operators are specific to gawk; they are extensions based on
       facilities in the GNU regular expression libraries.

       The various command line options control how gawk interprets characters in regular expressions.

       No options
              In the default case, gawk provides all the facilities of POSIX regular expressions and the GNU  regular
              expression operators described above.

       --posix
              Only  POSIX  regular expressions are supported, the GNU operators are not special.  (E.g., \w matches a
              literal w).

       --traditional
              Traditional UNIX awk regular expressions are matched.  The GNU operators are not special, and  interval
              expressions  are  not  available.   Characters  described by octal and hexadecimal escape sequences are
              treated literally, even if they represent regular expression metacharacters.

       --re-interval
              Allow interval expressions in regular expressions, even if --traditional has been provided.

   Actions
       Action statements are enclosed in braces, { and }.  Action statements consist of the usual assignment,  condi‐
       tional,  and  looping statements found in most languages.  The operators, control statements, and input/output
       statements available are patterned after those in C.

   Operators
       The operators in AWK, in order of decreasing precedence, are:

       (...)       Grouping

       $           Field reference.

       ++ --       Increment and decrement, both prefix and postfix.

       ^           Exponentiation (** may also be used, and **= for the assignment operator).

       + - !       Unary plus, unary minus, and logical negation.

       * / %       Multiplication, division, and modulus.

       + -         Addition and subtraction.

       space       String concatenation.

       |   |&      Piped I/O for getline, print, and printf.

       < > <= >= == !=
                   The regular relational operators.

       ~ !~        Regular expression match, negated match.  NOTE: Do not use a constant regular  expression  (/foo/)
                   on  the left-hand side of a ~ or !~.  Only use one on the right-hand side.  The expression /foo/ ~
                   exp has the same meaning as (($0 ~ /foo/) ~ exp).  This is usually not what you want.

       in          Array membership.

       &&          Logical AND.

       ||          Logical OR.

       ?:          The C conditional expression.  This has the form expr1 ? expr2 : expr3.  If  expr1  is  true,  the
                   value  of  the  expression is expr2, otherwise it is expr3.  Only one of expr2 and expr3 is evalu‐
                   ated.

       = += -= *= /= %= ^=
                   Assignment.  Both absolute assignment (var = value) and operator-assignment (the other forms)  are
                   supported.

   Control Statements
       The control statements are as follows:

              if (condition) statement [ else statement ]
              while (condition) statement
              do statement while (condition)
              for (expr1; expr2; expr3) statement
              for (var in array) statement
              break
              continue
              delete array[index]
              delete array
              exit [ expression ]
              { statements }
              switch (expression) {
              case value|regex : statement
              ...
              [ default: statement ]
              }

   I/O Statements
       The input/output statements are as follows:

       close(file [, how])   Close  file,  pipe  or coprocess.  The optional how should only be used when closing one
                             end of a two-way pipe to a coprocess.  It must be a string value, either "to" or "from".

       getline               Set $0 from the next input record; set NF, NR, FNR, RT.

       getline <file         Set $0 from the next record of file; set NF, RT.

       getline var           Set var from the next input record; set NR, FNR, RT.

       getline var <file     Set var from the next record of file; set RT.

       command | getline [var]
                             Run command, piping the output either into $0 or var, as above, and RT.

       command |& getline [var]
                             Run command as a coprocess piping the output either into $0 or var, as  above,  and  RT.
                             Coprocesses  are  a gawk extension.  (The command can also be a socket.  See the subsec‐
                             tion Special File Names, below.)

       next                  Stop processing the current input record.  Read the next input record and start process‐
                             ing  over with the first pattern in the AWK program.  Upon reaching the end of the input
                             data, execute any END rule(s).

       nextfile              Stop processing the current input file.  The next input record read comes from the  next
                             input  file.  Update FILENAME and ARGIND, reset FNR to 1, and start processing over with
                             the first pattern in the AWK program.  Upon reaching the end of the input data,  execute
                             any ENDFILE and END rule(s).

       print                 Print the current record.  The output record is terminated with the value of ORS.

       print expr-list       Print expressions.  Each expression is separated by the value of OFS.  The output record
                             is terminated with the value of ORS.

       print expr-list >file Print expressions on file.  Each expression is separated by the value of OFS.  The  out‐
                             put record is terminated with the value of ORS.

       printf fmt, expr-list Format and print.  See The printf Statement, below.

       printf fmt, expr-list >file
                             Format and print on file.

       system(cmd-line)      Execute the command cmd-line, and return the exit status.  (This may not be available on
                             non-POSIX systems.)  See GAWK: Effective AWK Programming for the  full  details  on  the
                             exit status.

       fflush([file])        Flush any buffers associated with the open output file or pipe file.  If file is missing
                             or if it is the null string, then flush all open output files and pipes.

       Additional output redirections are allowed for print and printf.

       print ... >> file
              Append output to the file.

       print ... | command
              Write on a pipe.

       print ... |& command
              Send data to a coprocess or socket.  (See also the subsection Special File Names, below.)

       The getline command returns 1 on success, zero on end of file, and -1 on an error.  If the errno(3) value  in‐
       dicates  that the I/O operation may be retried, and PROCINFO["input", "RETRY"] is set, then -2 is returned in‐
       stead of -1, and further calls to getline may be attempted.  Upon an error, ERRNO is set to a string  describ‐
       ing the problem.

       NOTE: Failure in opening a two-way socket results in a non-fatal error being returned to the calling function.
       If using a pipe, coprocess, or socket to getline, or from print or printf within a loop, you must use  close()
       to  create new instances of the command or socket.  AWK does not automatically close pipes, sockets, or copro‐
       cesses when they return EOF.

   The printf Statement
       The AWK versions of the printf statement and sprintf() function (see below) accept  the  following  conversion
       specification formats:

       %a, %A  A floating point number of the form [-]0xh.hhhhp+-dd (C99 hexadecimal floating point format).  For %A,
               uppercase letters are used instead of lowercase ones.

       %c      A single character.  If the argument used for %c is numeric, it is treated as a character and printed.
               Otherwise,  the  argument  is  assumed  to be a string, and the only first character of that string is
               printed.

       %d, %i  A decimal number (the integer part).

       %e, %E  A floating point number of the form [-]d.dddddde[+-]dd.  The %E format uses E instead of e.

       %f, %F  A floating point number of the form [-]ddd.dddddd.  If the system library supports it, %F is available
               as  well.  This is like %f, but uses capital letters for special “not a number” and “infinity” values.
               If %F is not available, gawk uses %f.

       %g, %G  Use %e or %f conversion, whichever is shorter, with nonsignificant zeros suppressed.   The  %G  format
               uses %E instead of %e.

       %o      An unsigned octal number (also an integer).

       %u      An unsigned decimal number (again, an integer).

       %s      A character string.

       %x, %X  An unsigned hexadecimal number (an integer).  The %X format uses ABCDEF instead of abcdef.

       %%      A single % character; no argument is converted.

       Optional, additional parameters may lie between the % and the control letter:

       count$ Use  the  count'th argument at this point in the formatting.  This is called a positional specifier and
              is intended primarily for use in translated versions of format strings, not in the original text of  an
              AWK program.  It is a gawk extension.

       -      The expression should be left-justified within its field.

       space  For numeric conversions, prefix positive values with a space, and negative values with a minus sign.

       +      The  plus  sign,  used  before the width modifier (see below), says to always supply a sign for numeric
              conversions, even if the data to be formatted is positive.  The + overrides the space modifier.

       #      Use an “alternate form” for certain control letters.  For %o, supply a leading zero.  For %x,  and  %X,
              supply  a  leading  0x or 0X for a nonzero result.  For %e, %E, %f and %F, the result always contains a
              decimal point.  For %g, and %G, trailing zeros are not removed from the result.

       0      A leading 0 (zero) acts as a flag, indicating that output should be padded with zeroes instead of  spa‐
              ces.   This  applies  only  to the numeric output formats.  This flag only has an effect when the field
              width is wider than the value to be printed.

       '      A single quote character instructs gawk to insert the locale's thousands-separator character into deci‐
              mal  numbers,  and  to also use the locale's decimal point character with floating point formats.  This
              requires correct locale support in the C library and in the definition of the current locale.

       width  The field should be padded to this width.  The field is normally padded with spaces.  With the 0  flag,
              it is padded with zeroes.

       .prec  A  number  that specifies the precision to use when printing.  For the %e, %E, %f and %F, formats, this
              specifies the number of digits you want printed to the right of the decimal point.  For the %g, and  %G
              formats,  it  specifies  the  maximum number of significant digits.  For the %d, %i, %o, %u, %x, and %X
              formats, it specifies the minimum number of digits to print.  For the %s format, it specifies the maxi‐
              mum number of characters from the string that should be printed.

       The  dynamic width and prec capabilities of the ISO C printf() routines are supported.  A * in place of either
       the width or prec specifications causes their values  to  be  taken  from  the  argument  list  to  printf  or
       sprintf().   To use a positional specifier with a dynamic width or precision, supply the count$ after the * in
       the format string.  For example, "%3$*2$.*1$s".

   Special File Names
       When doing I/O redirection from either print or printf into a file, or via getline from a  file,  gawk  recog‐
       nizes  certain  special filenames internally.  These filenames allow access to open file descriptors inherited
       from gawk's parent process (usually the shell).  These file names may also be used on the command line to name
       data files.  The filenames are:

       -           The standard input.

       /dev/stdin  The standard input.

       /dev/stdout The standard output.

       /dev/stderr The standard error output.

       /dev/fd/n   The file associated with the open file descriptor n.

       These are particularly useful for error messages.  For example:

              print "You blew it!" > "/dev/stderr"

       whereas you would otherwise have to use

              print "You blew it!" | "cat 1>&2"

       The following special filenames may be used with the |& coprocess operator for creating TCP/IP network connec‐
       tions:

       /inet/tcp/lport/rhost/rport
       /inet4/tcp/lport/rhost/rport
       /inet6/tcp/lport/rhost/rport
              Files for a TCP/IP connection on local port lport to remote host rhost on remote  port  rport.   Use  a
              port  of 0 to have the system pick a port.  Use /inet4 to force an IPv4 connection, and /inet6 to force
              an IPv6 connection.  Plain /inet uses the system default (most likely IPv4).  Usable only with  the  |&
              two-way I/O operator.

       /inet/udp/lport/rhost/rport
       /inet4/udp/lport/rhost/rport
       /inet6/udp/lport/rhost/rport
              Similar, but use UDP/IP instead of TCP/IP.

   Numeric Functions
       AWK has the following built-in arithmetic functions:

       atan2(y, x)   Return the arctangent of y/x in radians.

       cos(expr)     Return the cosine of expr, which is in radians.

       exp(expr)     The exponential function.

       int(expr)     Truncate to integer.

       log(expr)     The natural logarithm function.

       rand()        Return a random number N, between zero and one, such that 0 ≤ N < 1.

       sin(expr)     Return the sine of expr, which is in radians.

       sqrt(expr)    Return the square root of expr.

       srand([expr]) Use  expr as the new seed for the random number generator.  If no expr is provided, use the time
                     of day.  Return the previous seed for the random number generator.

   String Functions
       Gawk has the following built-in string functions:

       asort(s [, d [, how] ]) Return the number of elements in the source array s.  Sort the  contents  of  s  using
                               gawk's normal rules for comparing values, and replace the indices of the sorted values
                               s with sequential integers starting with 1. If the optional  destination  array  d  is
                               specified,  first  duplicate  s  into  d,  and then sort d, leaving the indices of the
                               source array s unchanged. The optional string how controls the direction and the  com‐
                               parison   mode.    Valid   values   for   how   are  any  of  the  strings  valid  for
                               PROCINFO["sorted_in"].  It can also be the name of a user-defined comparison  function
                               as described in PROCINFO["sorted_in"].

       asorti(s [, d [, how] ])
                               Return the number of elements in the source array s.  The behavior is the same as that
                               of asort(), except that the array indices are used for sorting, not the array  values.
                               When  done, the array is indexed numerically, and the values are those of the original
                               indices.  The original values are lost; thus provide a second array  if  you  wish  to
                               preserve  the  original.   The  purpose  of the optional string how is the same as de‐
                               scribed previously for asort().

       gensub(r, s, h [, t])   Search the target string t for matches of the regular expression r.  If h is a  string
                               beginning with g or G, then replace all matches of r with s.  Otherwise, h is a number
                               indicating which match of r to replace.  If t is not supplied, use $0 instead.  Within
                               the  replacement  text s, the sequence \n, where n is a digit from 1 to 9, may be used
                               to indicate just the text that matched the n'th parenthesized subexpression.  The  se‐
                               quence  \0  represents the entire matched text, as does the character &.  Unlike sub()
                               and gsub(), the modified string is returned as the result of  the  function,  and  the
                               original target string is not changed.

       gsub(r, s [, t])        For  each  substring matching the regular expression r in the string t, substitute the
                               string s, and return the number of substitutions.  If t is not supplied, use $0.  An &
                               in  the  replacement text is replaced with the text that was actually matched.  Use \&
                               to get a literal &.  (This must be typed as "\\&"; see GAWK: Effective AWK Programming
                               for a fuller discussion of the rules for ampersands and backslashes in the replacement
                               text of sub(), gsub(), and gensub().)

       index(s, t)             Return the index of the string t in the string s, or zero if t is not present.   (This
                               implies  that  character  indices  start at one.)  It is a fatal error to use a regexp
                               constant for t.

       length([s])             Return the length of the string s, or the length of $0 if s is  not  supplied.   As  a
                               non-standard  extension,  with  an array argument, length() returns the number of ele‐
                               ments in the array.

       match(s, r [, a])       Return the position in s where the regular expression r occurs, or zero if  r  is  not
                               present,  and  set  the values of RSTART and RLENGTH.  Note that the argument order is
                               the same as for the ~ operator: str ~ re.  If array a is provided, a  is  cleared  and
                               then elements 1 through n are filled with the portions of s that match the correspond‐
                               ing parenthesized subexpression in r.  The zero'th element of a contains  the  portion
                               of  s  matched by the entire regular expression r.  Subscripts a[n, "start"], and a[n,
                               "length"] provide the starting index in the string and length  respectively,  of  each
                               matching substring.

       patsplit(s, a [, r [, seps] ])
                               Split  the  string s into the array a and the separators array seps on the regular ex‐
                               pression r, and return the number of fields.  Element values are  the  portions  of  s
                               that matched r.  The value of seps[i] is the possibly null separator that appeared af‐
                               ter a[i].  The value of seps[0] is the possibly null leading separator.  If r is omit‐
                               ted,  FPAT  is  used instead.  The arrays a and seps are cleared first.  Splitting be‐
                               haves identically to field splitting with FPAT, described above.

       split(s, a [, r [, seps] ])
                               Split the string s into the array a and the separators array seps on the  regular  ex‐
                               pression  r,  and  return  the number of fields.  If r is omitted, FS is used instead.
                               The arrays a and seps are cleared first.  seps[i] is the field separator matched by  r
                               between  a[i]  and  a[i+1].  If r is a single space, then leading whitespace in s goes
                               into the extra array element seps[0] and trailing whitespace goes into the extra array
                               element  seps[n],  where n is the return value of split(s, a, r, seps).  Splitting be‐
                               haves identically to field splitting, described above.  In particular, if r is a  sin‐
                               gle-character  string,  that  string acts as the separator, even if it happens to be a
                               regular expression metacharacter.

       sprintf(fmt, expr-list) Print expr-list according to fmt, and return the resulting string.

       strtonum(str)           Examine str, and return its numeric value.  If str begins with a leading 0,  treat  it
                               as  an octal number.  If str begins with a leading 0x or 0X, treat it as a hexadecimal
                               number.  Otherwise, assume it is a decimal number.

       sub(r, s [, t])         Just like gsub(), but replace only the first matching substring.  Return  either  zero
                               or one.

       substr(s, i [, n])      Return the at most n-character substring of s starting at i.  If n is omitted, use the
                               rest of s.

       tolower(str)            Return a copy of the string str, with all the uppercase characters in  str  translated
                               to their corresponding lowercase counterparts.  Non-alphabetic characters are left un‐
                               changed.

       toupper(str)            Return a copy of the string str, with all the lowercase characters in  str  translated
                               to their corresponding uppercase counterparts.  Non-alphabetic characters are left un‐
                               changed.

       Gawk is multibyte aware.  This means that index(), length(), substr() and match() all work in terms of charac‐
       ters, not bytes.

   Time Functions
       Since  one  of  the  primary uses of AWK programs is processing log files that contain time stamp information,
       gawk provides the following functions for obtaining time stamps and formatting them.

       mktime(datespec [, utc-flag])
                 Turn datespec into a time stamp of the same form as returned by systime(), and  return  the  result.
                 The  datespec is a string of the form YYYY MM DD HH MM SS[ DST].  The contents of the string are six
                 or seven numbers representing respectively the full year including century, the month from 1 to  12,
                 the  day  of  the month from 1 to 31, the hour of the day from 0 to 23, the minute from 0 to 59, the
                 second from 0 to 60, and an optional daylight saving flag.  The values of these numbers need not  be
                 within  the  ranges specified; for example, an hour of -1 means 1 hour before midnight.  The origin-
                 zero Gregorian calendar is assumed, with year 0 preceding year 1 and year -1 preceding year  0.   If
                 utc-flag  is  present  and  is non-zero or non-null, the time is assumed to be in the UTC time zone;
                 otherwise, the time is assumed to be in the local time zone.  If the DST  daylight  saving  flag  is
                 positive,  the  time is assumed to be daylight saving time; if zero, the time is assumed to be stan‐
                 dard time; and if negative (the default), mktime() attempts to  determine  whether  daylight  saving
                 time  is  in  effect for the specified time.  If datespec does not contain enough elements or if the
                 resulting time is out of range, mktime() returns -1.

       strftime([format [, timestamp[, utc-flag]]])
                 Format timestamp according to the specification in format.  If utc-flag is present and  is  non-zero
                 or  non-null,  the result is in UTC, otherwise the result is in local time.  The timestamp should be
                 of the same form as returned by systime().  If timestamp is missing, the  current  time  of  day  is
                 used.   If format is missing, a default format equivalent to the output of date(1) is used.  The de‐
                 fault format is available in PROCINFO["strftime"].  See the specification for the  strftime()  func‐
                 tion in ISO C for the format conversions that are guaranteed to be available.

       systime() Return  the current time of day as the number of seconds since the Epoch (1970-01-01 00:00:00 UTC on
                 POSIX systems).

   Bit Manipulations Functions
       Gawk supplies the following bit manipulation functions.  They work  by  converting  double-precision  floating
       point  values  to  uintmax_t  integers,  doing  the operation, and then converting the result back to floating
       point.

       NOTE: Passing negative operands to any of these functions causes a fatal error.

       The functions are:

       and(v1, v2 [, ...]) Return the bitwise AND of the values provided in the argument  list.   There  must  be  at
                           least two.

       compl(val)          Return the bitwise complement of val.

       lshift(val, count)  Return the value of val, shifted left by count bits.

       or(v1, v2 [, ...])  Return the bitwise OR of the values provided in the argument list.  There must be at least
                           two.

       rshift(val, count)  Return the value of val, shifted right by count bits.

       xor(v1, v2 [, ...]) Return the bitwise XOR of the values provided in the argument  list.   There  must  be  at
                           least two.

   Type Functions
       The following functions provide type related information about their arguments.

       isarray(x) Return  true  if x is an array, false otherwise.  This function is mainly for use with the elements
                  of multidimensional arrays and with function parameters.

       typeof(x)  Return a string indicating the type of x.  The string will be one of "array",  "number",  "regexp",
                  "string", "strnum", "unassigned", or "undefined".

   Internationalization Functions
       The  following  functions  may  be used from within your AWK program for translating strings at run-time.  For
       full details, see GAWK: Effective AWK Programming.

       bindtextdomain(directory [, domain])
              Specify the directory where gawk looks for the .gmo files, in case they will not or cannot be placed in
              the ``standard'' locations (e.g., during testing).  It returns the directory where domain is ``bound.''
              The  default domain is the value of TEXTDOMAIN.  If directory is the null string (""), then bindtextdo‐
              main() returns the current binding for the given domain.

       dcgettext(string [, domain [, category]])
              Return the translation of string in text domain domain for locale category category.  The default value
              for domain is the current value of TEXTDOMAIN.  The default value for category is "LC_MESSAGES".
              If you supply a value for category, it must be a string equal to one of the known locale categories de‐
              scribed in GAWK: Effective AWK Programming.  You must also supply a text domain.  Use TEXTDOMAIN if you
              want to use the current domain.

       dcngettext(string1, string2, number [, domain [, category]])
              Return  the plural form used for number of the translation of string1 and string2 in text domain domain
              for locale category category.  The default value for domain is the current value  of  TEXTDOMAIN.   The
              default value for category is "LC_MESSAGES".
              If you supply a value for category, it must be a string equal to one of the known locale categories de‐
              scribed in GAWK: Effective AWK Programming.  You must also supply a text domain.  Use TEXTDOMAIN if you
              want to use the current domain.

USER-DEFINED FUNCTIONS
       Functions in AWK are defined as follows:

              function name(parameter list) { statements }

       Functions  execute when they are called from within expressions in either patterns or actions.  Actual parame‐
       ters supplied in the function call are used to instantiate the formal parameters  declared  in  the  function.
       Arrays are passed by reference, other variables are passed by value.

       Since  functions  were  not  originally  part of the AWK language, the provision for local variables is rather
       clumsy: They are declared as extra parameters in the parameter list.  The  convention  is  to  separate  local
       variables from real parameters by extra spaces in the parameter list.  For example:

              function  f(p, q,     a, b)   # a and b are local
              {
                   ...
              }

              /abc/     { ... ; f(1, 2) ; ... }

       The  left  parenthesis in a function call is required to immediately follow the function name, without any in‐
       tervening whitespace.  This avoids a syntactic ambiguity with the concatenation  operator.   This  restriction
       does not apply to the built-in functions listed above.

       Functions  may call each other and may be recursive.  Function parameters used as local variables are initial‐
       ized to the null string and the number zero upon function invocation.

       Use return expr to return a value from a function.  The return value is undefined if no value is provided,  or
       if the function returns by “falling off” the end.

       As  a  gawk  extension,  functions may be called indirectly. To do this, assign the name of the function to be
       called, as a string, to a variable.  Then use the variable as if it were the name of a function, prefixed with
       an @ sign, like so:
              function myfunc()
              {
                   print "myfunc called"
                   ...
              }

              {    ...
                   the_func = "myfunc"
                   @the_func()    # call through the_func to myfunc
                   ...
              }
       As of version 4.1.2, this works with user-defined functions, built-in functions, and extension functions.

       If  --lint  has  been provided, gawk warns about calls to undefined functions at parse time, instead of at run
       time.  Calling an undefined function at run time is a fatal error.

       The word func may be used in place of function, although this is deprecated.

DYNAMICALLY LOADING NEW FUNCTIONS
       You can dynamically add new functions written in C or C++ to the  running  gawk  interpreter  with  the  @load
       statement.  The full details are beyond the scope of this manual page; see GAWK: Effective AWK Programming.

SIGNALS
       The  gawk  profiler  accepts  two signals.  SIGUSR1 causes it to dump a profile and function call stack to the
       profile file, which is either awkprof.out, or whatever file was named with the --profile option.  It then con‐
       tinues to run.  SIGHUP causes gawk to dump the profile and function call stack and then exit.

INTERNATIONALIZATION
       String constants are sequences of characters enclosed in double quotes.  In non-English speaking environments,
       it is possible to mark strings in the AWK program as requiring translation to the local natural language. Such
       strings are marked in the AWK program with a leading underscore (“_”).  For example,

              gawk 'BEGIN { print "hello, world" }'

       always prints hello, world.  But,

              gawk 'BEGIN { print _"hello, world" }'

       might print bonjour, monde in France.

       There are several steps involved in producing and running a localizable AWK program.

       1.  Add  a  BEGIN action to assign a value to the TEXTDOMAIN variable to set the text domain to a name associ‐
           ated with your program:

                BEGIN { TEXTDOMAIN = "myprog" }

           This allows gawk to find the .gmo file associated with your program.  Without this  step,  gawk  uses  the
           messages text domain, which likely does not contain translations for your program.

       2.  Mark all strings that should be translated with leading underscores.

       3.  If necessary, use the dcgettext() and/or bindtextdomain() functions in your program, as appropriate.

       4.  Run gawk --gen-pot -f myprog.awk > myprog.pot to generate a .pot file for your program.

       5.  Provide appropriate translations, and build and install the corresponding .gmo files.

       The internationalization features are described in full detail in GAWK: Effective AWK Programming.

POSIX COMPATIBILITY
       A  primary goal for gawk is compatibility with the POSIX standard, as well as with the latest version of Brian
       Kernighan's awk.  To this end, gawk incorporates the following user visible features which are  not  described
       in the AWK book, but are part of the Brian Kernighan's version of awk, and are in the POSIX standard.

       The book indicates that command line variable assignment happens when awk would otherwise open the argument as
       a file, which is after the BEGIN rule is executed.  However, in earlier implementations, when such an  assign‐
       ment  appeared before any file names, the assignment would happen before the BEGIN rule was run.  Applications
       came to depend on this “feature.”  When awk was changed to match its documentation, the -v option for  assign‐
       ing variables before program execution was added to accommodate applications that depended upon the old behav‐
       ior.  (This feature was agreed upon by both the Bell Laboratories developers and the GNU developers.)

       When processing arguments, gawk uses the special option “--” to signal the end of arguments.  In compatibility
       mode,  it warns about but otherwise ignores undefined options.  In normal operation, such arguments are passed
       on to the AWK program for it to process.

       The AWK book does not define the return value of srand().  The POSIX standard has it return the  seed  it  was
       using,  to allow keeping track of random number sequences.  Therefore srand() in gawk also returns its current
       seed.

       Other features are: The use of multiple -f options (from MKS awk); the ENVIRON array; the \a,  and  \v  escape
       sequences  (done  originally in gawk and fed back into the Bell Laboratories version); the tolower() and toup‐
       per() built-in functions (from the Bell Laboratories version); and the  ISO  C  conversion  specifications  in
       printf (done first in the Bell Laboratories version).

HISTORICAL FEATURES
       There is one feature of historical AWK implementations that gawk supports: It is possible to call the length()
       built-in function not only with no argument, but even without parentheses!  Thus,

              a = length     # Holy Algol 60, Batman!

       is the same as either of

              a = length()
              a = length($0)

       Using this feature is poor practice, and gawk issues a warning about its use if --lint  is  specified  on  the
       command line.

GNU EXTENSIONS
       Gawk  has  a too-large number of extensions to POSIX awk.  They are described in this section.  All the exten‐
       sions described here can be disabled by invoking gawk with the --traditional or --posix options.

       The following features of gawk are not available in POSIX awk.

       • No path search is performed for files named via the -f option.  Therefore the AWKPATH  environment  variable
         is not special.

       • There is no facility for doing file inclusion (gawk's @include mechanism).

       • There is no facility for dynamically adding new functions written in C (gawk's @load mechanism).

       • The \x escape sequence.

       • The ability to continue lines after ?  and :.

       • Octal and hexadecimal constants in AWK programs.

       • The ARGIND, BINMODE, ERRNO, LINT, PREC, ROUNDMODE, RT and TEXTDOMAIN variables are not special.

       • The IGNORECASE variable and its side-effects are not available.

       • The FIELDWIDTHS variable and fixed-width field splitting.

       • The FPAT variable and field splitting based on field values.

       • The FUNCTAB, SYMTAB, and PROCINFO arrays are not available.

       • The use of RS as a regular expression.

       • The special file names available for I/O redirection are not recognized.

       • The |& operator for creating coprocesses.

       • The BEGINFILE and ENDFILE special patterns are not available.

       • The  ability  to  split out individual characters using the null string as the value of FS, and as the third
         argument to split().

       • An optional fourth argument to split() to receive the separator texts.

       • The optional second argument to the close() function.

       • The optional third argument to the match() function.

       • The ability to use positional specifiers with printf and sprintf().

       • The ability to pass an array to length().

       • The and(), asort(), asorti(), bindtextdomain(), compl(), dcgettext(), dcngettext(), gensub(), lshift(),  mk‐
         time(), or(), patsplit(), rshift(), strftime(), strtonum(), systime() and xor() functions.

       • Localizable strings.

       • Non-fatal I/O.

       • Retryable I/O.

       The  AWK book does not define the return value of the close() function.  Gawk's close() returns the value from
       fclose(3), or pclose(3), when closing an output file or pipe, respectively.  It  returns  the  process's  exit
       status when closing an input pipe.  The return value is -1 if the named file, pipe or coprocess was not opened
       with a redirection.

       When gawk is invoked with the --traditional option, if the fs argument to the -F option is “t”, then FS is set
       to  the tab character.  Note that typing gawk -F\t ...  simply causes the shell to quote the “t,” and does not
       pass “\t” to the -F option.  Since this is a rather ugly special case, it is not the default  behavior.   This
       behavior  also does not occur if --posix has been specified.  To really get a tab character as the field sepa‐
       rator, it is best to use single quotes: gawk -F'\t' ....

ENVIRONMENT VARIABLES
       The AWKPATH environment variable can be used to provide a list of directories that gawk searches when  looking
       for  files  named  via  the  -f, --file, -i and --include options, and the @include directive.  If the initial
       search fails, the path is searched again after appending .awk to the filename.

       The AWKLIBPATH environment variable can be used to provide a list of directories that gawk searches when look‐
       ing for files named via the -l and --load options.

       The  GAWK_READ_TIMEOUT environment variable can be used to specify a timeout in milliseconds for reading input
       from a terminal, pipe or two-way communication including sockets.

       For connection  to  a  remote  host  via  socket,  GAWK_SOCK_RETRIES  controls  the  number  of  retries,  and
       GAWK_MSEC_SLEEP the interval between retries.  The interval is in milliseconds. On systems that do not support
       usleep(3), the value is rounded up to an integral number of seconds.

       If POSIXLY_CORRECT exists in the environment, then gawk behaves exactly as if --posix had  been  specified  on
       the command line.  If --lint has been specified, gawk issues a warning message to this effect.

EXIT STATUS
       If the exit statement is used with a value, then gawk exits with the numeric value given to it.

       Otherwise,  if  there were no problems during execution, gawk exits with the value of the C constant EXIT_SUC‐
       CESS.  This is usually zero.

       If an error occurs, gawk exits with the value of the C constant EXIT_FAILURE.  This is usually one.

       If gawk exits because of a fatal error, the exit status is 2.  On non-POSIX systems, this value may be  mapped
       to EXIT_FAILURE.

VERSION INFORMATION
       This man page documents gawk, version 5.1.

AUTHORS
       The  original  version  of  UNIX  awk  was designed and implemented by Alfred Aho, Peter Weinberger, and Brian
       Kernighan of Bell Laboratories.  Brian Kernighan continues to maintain and enhance it.

       Paul Rubin and Jay Fenlason, of the Free Software Foundation, wrote gawk, to be compatible with  the  original
       version  of  awk  distributed  in  Seventh Edition UNIX.  John Woods contributed a number of bug fixes.  David
       Trueman, with contributions from Arnold Robbins, made gawk compatible  with  the  new  version  of  UNIX  awk.
       Arnold Robbins is the current maintainer.

       See GAWK: Effective AWK Programming for a full list of the contributors to gawk and its documentation.

       See  the README file in the gawk distribution for up-to-date information about maintainers and which ports are
       currently supported.

BUG REPORTS
       If you find a bug in gawk, please send electronic mail to bug-gawk@gnu.org.   Please  include  your  operating
       system  and  its revision, the version of gawk (from gawk --version), which C compiler you used to compile it,
       and a test program and data that are as small as possible for reproducing the problem.

       Before sending a bug report, please do the following things.  First, verify that you have the  latest  version
       of  gawk.  Many bugs (usually subtle ones) are fixed at each release, and if yours is out of date, the problem
       may already have been solved.  Second, please see if setting  the  environment  variable  LC_ALL  to  LC_ALL=C
       causes  things  to  behave as you expect. If so, it's a locale issue, and may or may not really be a bug.  Fi‐
       nally, please read this man page and the reference manual carefully to be sure that what you think  is  a  bug
       really is, instead of just a quirk in the language.

       Whatever  you do, do NOT post a bug report in comp.lang.awk.  While the gawk developers occasionally read this
       newsgroup, posting bug reports there is an unreliable way to report bugs.  Similarly, do NOT use a  web  forum
       (such  as  Stack Overflow) for reporting bugs.  Instead, please use the electronic mail addresses given above.
       Really.

       If you're using a GNU/Linux or BSD-based system, you may wish to submit a bug report to  the  vendor  of  your
       distribution.   That's  fine,  but  please send a copy to the official email address as well, since there's no
       guarantee that the bug report will be forwarded to the gawk maintainer.

BUGS
       The -F option is not necessary given the command line variable assignment feature; it remains only  for  back‐
       wards compatibility.

SEE ALSO
       egrep(1),  sed(1),  getpid(2),  getppid(2),  getpgrp(2),  getuid(2),  geteuid(2),  getgid(2), getegid(2), get‐
       groups(2), printf(3), strftime(3), usleep(3)

       The AWK Programming Language, Alfred V. Aho, Brian W. Kernighan, Peter J.  Weinberger,  Addison-Wesley,  1988.
       ISBN 0-201-07981-X.

       GAWK: Effective AWK Programming, Edition 5.1, shipped with the gawk source.  The current version of this docu‐
       ment is available online at https://www.gnu.org/software/gawk/manual.

       The GNU gettext documentation, available online at https://www.gnu.org/software/gettext.

EXAMPLES
       Print and sort the login names of all users:

            BEGIN     { FS = ":" }
                 { print $1 | "sort" }

       Count lines in a file:

                 { nlines++ }
            END  { print nlines }

       Precede each line by its number in the file:

            { print FNR, $0 }

       Concatenate and line number (a variation on a theme):

            { print NR, $0 }

       Run an external command for particular lines of data:

            tail -f access_log |
            awk '/myhome.html/ { system("nmap " $1 ">> logdir/myhome.html") }'

ACKNOWLEDGEMENTS
       Brian Kernighan provided valuable assistance during testing and debugging.  We thank him.

COPYING PERMISSIONS
       Copyright © 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2002, 2003,  2004,  2005,  2007,
       2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, Free Software Foundation, Inc.

       Permission is granted to make and distribute verbatim copies of this manual page provided the copyright notice
       and this permission notice are preserved on all copies.

       Permission is granted to copy and distribute modified versions of this manual page under  the  conditions  for
       verbatim  copying, provided that the entire resulting derived work is distributed under the terms of a permis‐
       sion notice identical to this one.

       Permission is granted to copy and distribute translations of this manual page into another language, under the
       above  conditions for modified versions, except that this permission notice may be stated in a translation ap‐
       proved by the Foundation.

Free Software Foundation                             Mar 23 2020                                              GAWK(1)

================================================================================

COMMAND: sed
SED(1)                                              User Commands                                              SED(1)

NAME
       sed - stream editor for filtering and transforming text

SYNOPSIS
       sed [OPTION]... {script-only-if-no-other-script} [input-file]...

DESCRIPTION
       Sed  is  a stream editor.  A stream editor is used to perform basic text transformations on an input stream (a
       file or input from a pipeline).  While in some ways similar to an editor which permits scripted edits (such as
       ed), sed works by making only one pass over the input(s), and is consequently more efficient.  But it is sed's
       ability to filter text in a pipeline which particularly distinguishes it from other types of editors.

       -n, --quiet, --silent

              suppress automatic printing of pattern space

       --debug

              annotate program execution

       -e script, --expression=script

              add the script to the commands to be executed

       -f script-file, --file=script-file

              add the contents of script-file to the commands to be executed

       --follow-symlinks

              follow symlinks when processing in place

       -i[SUFFIX], --in-place[=SUFFIX]

              edit files in place (makes backup if SUFFIX supplied)

       -l N, --line-length=N

              specify the desired line-wrap length for the `l' command

       --posix

              disable all GNU extensions.

       -E, -r, --regexp-extended

              use extended regular expressions in the script (for portability use POSIX -E).

       -s, --separate

              consider files as separate rather than as a single, continuous long stream.

       --sandbox

              operate in sandbox mode (disable e/r/w commands).

       -u, --unbuffered

              load minimal amounts of data from the input files and flush the output buffers more often

       -z, --null-data

              separate lines by NUL characters

       --help
              display this help and exit

       --version
              output version information and exit

       If no -e, --expression, -f, or --file option is given, then the first non-option argument is taken as the  sed
       script  to interpret.  All remaining arguments are names of input files; if no input files are specified, then
       the standard input is read.

       GNU   sed   home   page:   <https://www.gnu.org/software/sed/>.    General   help    using    GNU    software:
       <https://www.gnu.org/gethelp/>.  E-mail bug reports to: <bug-sed@gnu.org>.

COMMAND SYNOPSIS
       This is just a brief synopsis of sed commands to serve as a reminder to those who already know sed; other doc‐
       umentation (such as the texinfo document) must be consulted for fuller descriptions.

   Zero-address ``commands''
       : label
              Label for b and t commands.

       #comment
              The comment extends until the next newline (or the end of a -e script fragment).

       }      The closing bracket of a { } block.

   Zero- or One- address commands
       =      Print the current line number.

       a \

       text   Append text, which has each embedded newline preceded by a backslash.

       i \

       text   Insert text, which has each embedded newline preceded by a backslash.

       q [exit-code]
              Immediately quit the sed script without processing any more input, except that  if  auto-print  is  not
              disabled the current pattern space will be printed.  The exit code argument is a GNU extension.

       Q [exit-code]
              Immediately quit the sed script without processing any more input.  This is a GNU extension.

       r filename
              Append text read from filename.

       R filename
              Append  a line read from filename.  Each invocation of the command reads a line from the file.  This is
              a GNU extension.

   Commands which accept address ranges
       {      Begin a block of commands (end with a }).

       b label
              Branch to label; if label is omitted, branch to end of script.

       c \

       text   Replace the selected lines with text, which has each embedded newline preceded by a backslash.

       d      Delete pattern space.  Start next cycle.

       D      If pattern space contains no newline, start a normal new cycle as if the d command was issued.   Other‐
              wise,  delete  text  in the pattern space up to the first newline, and restart cycle with the resultant
              pattern space, without reading a new line of input.

       h H    Copy/append pattern space to hold space.

       g G    Copy/append hold space to pattern space.

       l      List out the current line in a ``visually unambiguous'' form.

       l width
              List out the current line in a ``visually unambiguous'' form, breaking it at width characters.  This is
              a GNU extension.

       n N    Read/append the next line of input into the pattern space.

       p      Print the current pattern space.

       P      Print up to the first embedded newline of the current pattern space.

       s/regexp/replacement/
              Attempt  to  match  regexp against the pattern space.  If successful, replace that portion matched with
              replacement.  The replacement may contain the special character & to refer to that portion of the  pat‐
              tern  space which matched, and the special escapes \1 through \9 to refer to the corresponding matching
              sub-expressions in the regexp.

       t label
              If a s/// has done a successful substitution since the last input line was read and since the last t or
              T command, then branch to label; if label is omitted, branch to end of script.

       T label
              If  no  s/// has done a successful substitution since the last input line was read and since the last t
              or T command, then branch to label; if label is omitted, branch to end of script.  This is a GNU exten‐
              sion.

       w filename
              Write the current pattern space to filename.

       W filename
              Write the first line of the current pattern space to filename.  This is a GNU extension.

       x      Exchange the contents of the hold and pattern spaces.

       y/source/dest/
              Transliterate the characters in the pattern space which appear in source to the corresponding character
              in dest.

Addresses
       Sed commands can be given with no addresses, in which case the command will be executed for all  input  lines;
       with one address, in which case the command will only be executed for input lines which match that address; or
       with two addresses, in which case the command will be executed for all input lines which match  the  inclusive
       range  of  lines  starting  from the first address and continuing to the second address.  Three things to note
       about address ranges: the syntax is addr1,addr2 (i.e., the addresses are separated by a comma); the line which
       addr1  matched  will  always  be accepted, even if addr2 selects an earlier line; and if addr2 is a regexp, it
       will not be tested against the line that addr1 matched.

       After the address (or address-range), and before the command, a !  may be inserted, which specifies  that  the
       command shall only be executed if the address (or address-range) does not match.

       The following address types are supported:

       number Match  only the specified line number (which increments cumulatively across files, unless the -s option
              is specified on the command line).

       first~step
              Match every step'th line starting with line first.  For example, ``sed -n 1~2p''  will  print  all  the
              odd-numbered  lines in the input stream, and the address 2~5 will match every fifth line, starting with
              the second.  first can be zero; in this case, sed operates as if it were equal to step.   (This  is  an
              extension.)

       $      Match the last line.

       /regexp/
              Match  lines  matching  the  regular  expression  regexp.  Matching is performed on the current pattern
              space, which can be modified with commands such as ``s///''.

       \cregexpc
              Match lines matching the regular expression regexp.  The c may be any character.

       GNU sed also supports some special 2-address forms:

       0,addr2
              Start out in "matched first address" state, until addr2 is found.  This is similar to  1,addr2,  except
              that  if  addr2  matches the very first line of input the 0,addr2 form will be at the end of its range,
              whereas the 1,addr2 form will still be at the beginning of its range.  This works only when addr2 is  a
              regular expression.

       addr1,+N
              Will match addr1 and the N lines following addr1.

       addr1,~N
              Will  match addr1 and the lines following addr1 until the next line whose input line number is a multi‐
              ple of N.

REGULAR EXPRESSIONS
       POSIX.2 BREs should be supported, but they aren't completely because of performance problems.  The \n sequence
       in  a regular expression matches the newline character, and similarly for \a, \t, and other sequences.  The -E
       option switches to using extended regular expressions instead; it has been supported for years by GNU sed, and
       is now included in POSIX.

BUGS
       E-mail  bug  reports  to bug-sed@gnu.org.  Also, please include the output of ``sed --version'' in the body of
       your report if at all possible.

AUTHOR
       Written by Jay Fenlason, Tom Lord, Ken Pizzini, Paolo Bonzini, Jim Meyering, and Assaf Gordon.

       This sed program was built with SELinux support.  SELinux is enabled on this system.

       GNU   sed   home   page:   <https://www.gnu.org/software/sed/>.    General   help    using    GNU    software:
       <https://www.gnu.org/gethelp/>.  E-mail bug reports to: <bug-sed@gnu.org>.

COPYRIGHT
       Copyright   ©   2020   Free   Software   Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later
       <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the  extent  per‐
       mitted by law.

SEE ALSO
       awk(1), ed(1), grep(1), tr(1), perlre(1), sed.info, any of various books on sed, the sed FAQ
       (http://sed.sf.net/grabbag/tutorials/sedfaq.txt), http://sed.sf.net/grabbag/.

       The full documentation for sed is maintained as a Texinfo manual.  If the info and sed programs are properly
       installed at your site, the command

              info sed

       should give you access to the complete manual.

sed 4.8                                              January 2020                                              SED(1)

================================================================================

COMMAND: top
TOP(1)                                              User Commands                                              TOP(1)

NAME
       top - display Linux processes

SYNOPSIS
       top -hv|-bcEeHiOSs1 -d secs -n max -u|U user -p pids -o field -w [cols]

       The traditional switches `-' and whitespace are optional.

DESCRIPTION
       The  top  program  provides  a  dynamic  real-time  view  of  a running system.  It can display system summary
       information as well as a list of processes or threads currently being managed by the Linux kernel.  The  types
       of  system  summary information shown and the types, order and size of information displayed for processes are
       all user configurable and that configuration can be made persistent across restarts.

       The program provides a limited interactive interface for process manipulation as well as a much more extensive
       interface  for  personal  configuration   --   encompassing  every  aspect of its operation.  And while top is
       referred to throughout this document, you are free to name the program anything  you  wish.   That  new  name,
       possibly  an  alias, will then be reflected on top's display and used when reading and writing a configuration
       file.

OVERVIEW
   Documentation
       The remaining Table of Contents

           OVERVIEW
              Operation
              Linux Memory Types
           1. COMMAND-LINE Options
           2. SUMMARY Display
              a. UPTIME and LOAD Averages
              b. TASK and CPU States
              c. MEMORY Usage
           3. FIELDS / Columns Display
              a. DESCRIPTIONS of Fields
              b. MANAGING Fields
           4. INTERACTIVE Commands
              a. GLOBAL Commands
              b. SUMMARY AREA Commands
              c. TASK AREA Commands
                 1. Appearance
                 2. Content
                 3. Size
                 4. Sorting
              d. COLOR Mapping
           5. ALTERNATE-DISPLAY Provisions
              a. WINDOWS Overview
              b. COMMANDS for Windows
              c. SCROLLING a Window
              d. SEARCHING in a Window
              e. FILTERING in a Window
           6. FILES
              a. PERSONAL Configuration File
              b. ADDING INSPECT Entries
              c. SYSTEM Configuration File
              d. SYSTEM Restrictions File
           7. STUPID TRICKS Sampler
              a. Kernel Magic
              b. Bouncing Windows
              c. The Big Bird Window
              d. The Ol' Switcheroo
           8. BUGS, 9. SEE Also

   Operation
       When operating top, the two most important keys are the help (h or ?)  key and quit (`q') key.  Alternatively,
       you could simply use the traditional interrupt key (^C) when you're done.

       When  started  for the first time, you'll be presented with these traditional elements on the main top screen:
       1) Summary Area; 2) Fields/Columns Header; 3) Task Area.  Each of these will be explored in the sections  that
       follow.   There  is  also  an  Input/Message  line  between the Summary Area and Columns Header which needs no
       further explanation.

       The main top screen is generally quite adaptive to changes in terminal dimensions under X-Windows.  Other  top
       screens may be less so, especially those with static text.  It ultimately depends, however, on your particular
       window manager and terminal emulator.  There may be occasions when their view of  terminal  size  and  current
       contents differs from top's view, which is always based on operating system calls.

       Following any re-size operation, if a top screen is corrupted, appears incomplete or disordered, simply typing
       something innocuous like a punctuation character or cursor motion key will usually  restore  it.   In  extreme
       cases, the following sequence almost certainly will:
              key/cmd  objective
              ^Z       suspend top
              fg       resume top
              <Left>   force a screen redraw (if necessary)

       But  if  the  display is still corrupted, there is one more step you could try.  Insert this command after top
       has been suspended but before resuming it.
              key/cmd  objective
              reset    restore your terminal settings

       Note: the width of  top's  display  will  be  limited  to  512  positions.   Displaying  all  fields  requires
       approximately  250  characters.   Remaining  screen  width  is usually allocated to any variable width columns
       currently visible.  The variable width columns, such as COMMAND,  are  noted  in  topic  3a.  DESCRIPTIONS  of
       Fields.   Actual  output  width  may  also  be  influenced  by  the  -w switch, which is discussed in topic 1.
       COMMAND-LINE Options.

       Lastly, some of top's screens or functions require the use of cursor motion keys like the standard arrow  keys
       plus  the  Home,  End,  PgUp  and  PgDn  keys.   If your terminal or emulator does not provide those keys, the
       following combinations are accepted as alternatives:
              key      equivalent-keys
              Left     alt + h
              Down     alt + j
              Up       alt + k
              Right    alt + l
              Home     alt + ctrl + h
              PgDn     alt + ctrl + j
              PgUp     alt + ctrl + k
              End      alt + ctrl + l

       The Up and Down arrow keys have special significance when prompted for line input terminated with the  <Enter>
       key.   Those keys, or their aliases, can be used to retrieve previous input lines which can then be edited and
       re-input.  And there are four additional keys available with line oriented input.
              key      special-significance
              Up       recall older strings for re-editing
              Down     recall newer strings or erase entire line
              Insert   toggle between insert and overtype modes
              Delete   character removed at cursor, moving others left
              Home     jump to beginning of input line
              End      jump to end of input line

   Linux Memory Types
       For our purposes there are three types of memory, and one is optional.  First is physical  memory,  a  limited
       resource  where  code and data must reside when executed or referenced.  Next is the optional swap file, where
       modified (dirty) memory can be saved and later retrieved if too many demands  are  made  on  physical  memory.
       Lastly we have virtual memory, a nearly unlimited resource serving the following goals:

          1. abstraction, free from physical memory addresses/limits
          2. isolation, every process in a separate address space
          3. sharing, a single mapping can serve multiple needs
          4. flexibility, assign a virtual address to a file

       Regardless  of  which  of  these  forms  memory  may take, all are managed as pages (typically 4096 bytes) but
       expressed by default in top as KiB (kibibyte).  The memory discussed under topic `2c. MEMORY Usage' deals with
       physical  memory  and  the  swap  file  for  the system as a whole.  The memory reviewed in topic `3. FIELDS /
       Columns Display' embraces all three memory types, but for individual processes.

       For each such process, every memory page is restricted to a  single  quadrant  from  the  table  below.   Both
       physical  memory  and virtual memory can include any of the four, while the swap file only includes #1 through
       #3.  The memory in quadrant #4, when modified, acts as its own dedicated swap file.

                                     Private | Shared
                                 1           |          2
            Anonymous  . stack               |
                       . malloc()            |
                       . brk()/sbrk()        | . POSIX shm*
                       . mmap(PRIVATE, ANON) | . mmap(SHARED, ANON)
                      -----------------------+----------------------
                       . mmap(PRIVATE, fd)   | . mmap(SHARED, fd)
          File-backed  . pgms/shared libs    |
                                 3           |          4

       The following may help in interpreting process level memory values displayed as scalable columns and discussed
       under topic `3a. DESCRIPTIONS of Fields'.

          %MEM - simply RES divided by total physical memory
          CODE - the `pgms' portion of quadrant 3
          DATA - the entire quadrant 1 portion of VIRT plus all
                 explicit mmap file-backed pages of quadrant 3
          RES  - anything occupying physical memory which, beginning with
                 Linux-4.5, is the sum of the following three fields:
                 RSan - quadrant 1 pages, which include any
                        former quadrant 3 pages if modified
                 RSfd - quadrant 3 and quadrant 4 pages
                 RSsh - quadrant 2 pages
          RSlk - subset of RES which cannot be swapped out (any quadrant)
          SHR  - subset of RES (excludes 1, includes all 2 & 4, some 3)
          SWAP - potentially any quadrant except 4
          USED - simply the sum of RES and SWAP
          VIRT - everything in-use and/or reserved (all quadrants)

       Note:  Even  though  program  images  and  shared  libraries are considered private to a process, they will be
       accounted for as shared (SHR) by the kernel.

1. COMMAND-LINE Options
       The command-line syntax for top consists of:

         -hv|-bcEeHiOSs1 -d secs -n max -u|U user -p pids -o field -w [cols]

       The typically mandatory switch (`-') and even whitespace are completely optional.

       -h | -v  :Help/Version
            Show library version and the usage prompt, then quit.

       -b  :Batch-mode operation
            Starts top in Batch mode, which could be useful for sending output from top to other  programs  or  to  a
            file.   In  this  mode, top will not accept input and runs until the iterations limit you've set with the
            `-n' command-line option or until killed.

       -c  :Command-line/Program-name toggle
            Starts top with the last remembered `c' state reversed.  Thus, if top was displaying command  lines,  now
            that  field  will  show  program  names,  and vice versa.  See the `c' interactive command for additional
            information.

       -d  :Delay-time interval as:  -d ss.t (secs.tenths)
            Specifies the delay between screen updates, and overrides  the  corresponding  value  in  one's  personal
            configuration  file  or  the  startup default.  Later this can be changed with the `d' or `s' interactive
            commands.

            Fractional seconds are honored, but a negative number is  not  allowed.   In  all  cases,  however,  such
            changes  are  prohibited  if  top is running in Secure mode, except for root (unless the `s' command-line
            option was used).  For additional information on Secure mode see topic 6d. SYSTEM Restrictions File.

       -e  :Enforce-Task-Memory-Scaling as:  -e  k | m | g | t | p
            Instructs top to force task area memory to be scaled as:
               k - kibibytes
               m - mebibytes
               g - gibibytes
               t - tebibytes
               p - pebibytes

            Later this can be changed with the `e' command toggle.

       -E  :Enforce-Summary-Memory-Scaling as:  -E  k | m | g | t | p | e
            Instructs top to force summary area memory to be scaled as:
               k - kibibytes
               m - mebibytes
               g - gibibytes
               t - tebibytes
               p - pebibytes
               e - exbibytes

            Later this can be changed with the `E' command toggle.

       -H  :Threads-mode operation
            Instructs top to display individual threads.  Without this command-line option a summation of all threads
            in each process is shown.  Later this can be changed with the `H' interactive command.

       -i  :Idle-process toggle
            Starts  top  with  the  last remembered `i' state reversed.  When this toggle is Off, tasks that have not
            used any CPU since the last update will not be displayed.   For  additional  information  regarding  this
            toggle see topic 4c. TASK AREA Commands, SIZE.

       -n  :Number-of-iterations limit as:  -n number
            Specifies the maximum number of iterations, or frames, top should produce before ending.

       -o  :Override-sort-field as:  -o fieldname
            Specifies  the  name  of the field on which tasks will be sorted, independent of what is reflected in the
            configuration file.  You can prepend a `+' or `-' to the field name to also override the sort  direction.
            A leading `+' will force sorting high to low, whereas a `-' will ensure a low to high ordering.

            This option exists primarily to support automated/scripted batch mode operation.

       -O  :Output-field-names
            This  option  acts  as  a  form  of help for the above -o option.  It will cause top to print each of the
            available field names on a separate line, then quit.  Such names are subject to  NLS  (National  Language
            Support) translation.

       -p  :Monitor-PIDs mode as:  -pN1 -pN2 ...  or  -pN1,N2,N3 ...
            Monitor  only  processes with specified process IDs.  This option can be given up to 20 times, or you can
            provide a comma delimited list with up to 20 pids.  Co-mingling both approaches is permitted.

            A pid value of zero will be treated as the process id of the top program itself once it is running.

            This is a command-line option only and should you wish to return to normal operation, it is not necessary
            to quit and restart top  --  just issue any of these interactive commands: `=', `u' or `U'.

            The `p', `u' and `U' command-line options are mutually exclusive.

       -s  :Secure-mode operation
            Starts  top  with secure mode forced, even for root.  This mode is far better controlled through a system
            configuration file (see topic 6. FILES).

       -S  :Cumulative-time toggle
            Starts top with the last remembered `S' state reversed.  When Cumulative time mode is On, each process is
            listed  with  the  cpu time that it and its dead children have used.  See the `S' interactive command for
            additional information regarding this mode.

       -u | -U  :User-filter-mode as:  -u | -U number or name
            Display only processes with a user id or user name matching that  given.   The  `-u'  option  matches  on
            effective user whereas the `-U' option matches on any user (real, effective, saved, or filesystem).

            Prepending an exclamation point (`!') to the user id or name instructs top to display only processes with
            users not matching the one provided.

            The `p', `u' and `U' command-line options are mutually exclusive.

       -w  :Output-width-override as:  -w [ number ]
            In Batch mode, when used without an argument top  will  format  output  using  the  COLUMNS=  and  LINES=
            environment  variables,  if  set.   Otherwise,  width  will be fixed at the maximum 512 columns.  With an
            argument, output width can be decreased or increased (up to 512) but the number  of  rows  is  considered
            unlimited.

            In  normal  display  mode,  when  used  without  an  argument top will attempt to format output using the
            COLUMNS= and LINES= environment variables, if set.  With an argument, output width can only be decreased,
            not increased.  Whether using environment variables or an argument with -w, when not in Batch mode actual
            terminal dimensions can never be exceeded.

            Note: Without the use of this command-line option, output width is always based on the terminal at  which
            top was invoked whether or not in Batch mode.

       -1  :Single/Separate-Cpu-States toggle
            Starts  top  with  the  last  remembered Cpu States portion of the summary area reversed.  Either all cpu
            information will be displayed in a single line or each cpu will be displayed separately, depending on the
            state of the NUMA Node command toggle ('2').

            See the `1' and '2' interactive commands for additional information.

2. SUMMARY Display
       Each  of  the following three areas are individually controlled through one or more interactive commands.  See
       topic 4b. SUMMARY AREA Commands for additional information regarding these provisions.

   2a. UPTIME and LOAD Averages
       This portion consists of a single line containing:
           program or window name, depending on display mode
           current time and length of time since last boot
           total number of users
           system load avg over the last 1, 5 and 15 minutes

   2b. TASK and CPU States
       This portion consists of a minimum of two  lines.   In  an  SMP  environment,  additional  lines  can  reflect
       individual CPU state percentages.

       Line 1 shows total tasks or threads, depending on the state of the Threads-mode toggle.  That total is further
       classified as:
           running; sleeping; stopped; zombie

       Line 2 shows CPU state percentages based on the interval since the last refresh.

       As a default, percentages for these individual categories are displayed.  Where two labels  are  shown  below,
       those for more recent kernel versions are shown first.
           us, user    : time running un-niced user processes
           sy, system  : time running kernel processes
           ni, nice    : time running niced user processes
           id, idle    : time spent in the kernel idle handler
           wa, IO-wait : time waiting for I/O completion
           hi : time spent servicing hardware interrupts
           si : time spent servicing software interrupts
           st : time stolen from this vm by the hypervisor

       In  the  alternate  cpu  states  display modes, beyond the first tasks/threads line, an abbreviated summary is
       shown consisting of these elements:
                      a    b     c    d
           %Cpu(s):  75.0/25.0  100[ ...

       Where: a) is the `user' (us + ni) percentage; b) is the `system' (sy + hi + si) percentage; c) is  the  total;
       and  d) is one of two visual graphs of those representations.  See topic 4b. SUMMARY AREA Commands and the `t'
       command for additional information on that special 4-way toggle.

   2c. MEMORY Usage
       This portion consists of two lines which may  express  values  in  kibibytes  (KiB)  through  exbibytes  (EiB)
       depending on the scaling factor enforced with the `E' interactive command.

       As a default, Line 1 reflects physical memory, classified as:
           total, free, used and buff/cache

       Line 2 reflects mostly virtual memory, classified as:
           total, free, used and avail (which is physical memory)

       The  avail  number  on  line  2  is  an estimation of physical memory available for starting new applications,
       without swapping.  Unlike the free field, it attempts to account for readily reclaimable page cache and memory
       slabs.  It is available on kernels 3.14, emulated on kernels 2.6.27+, otherwise the same as free.

       In the alternate memory display modes, two abbreviated summary lines are shown consisting of these elements:
                      a    b          c
           GiB Mem : 18.7/15.738   [ ...
           GiB Swap:  0.0/7.999    [ ...

       Where:  a)  is  the  percentage  used;  b) is the total available; and c) is one of two visual graphs of those
       representations.

       In the case of physical memory, the percentage represents the total minus the  estimated  avail  noted  above.
       The  `Mem' graph itself is divided between used and any remaining memory not otherwise accounted for by avail.
       See topic 4b. SUMMARY AREA Commands and the `m' command for  additional  information  on  that  special  4-way
       toggle.

       This table may help in interpreting the scaled values displayed:
           KiB = kibibyte = 1024 bytes
           MiB = mebibyte = 1024 KiB = 1,048,576 bytes
           GiB = gibibyte = 1024 MiB = 1,073,741,824 bytes
           TiB = tebibyte = 1024 GiB = 1,099,511,627,776 bytes
           PiB = pebibyte = 1024 TiB = 1,125,899,906,842,624 bytes
           EiB = exbibyte = 1024 PiB = 1,152,921,504,606,846,976 bytes

3. FIELDS / Columns
   3a. DESCRIPTIONS of Fields
       Listed below are top's available process fields (columns).  They are shown in strict ascii alphabetical order.
       You may customize their position and whether or  not  they  are  displayable  with  the  `f'  or  `F'  (Fields
       Management) interactive commands.

       Any field is selectable as the sort field, and you control whether they are sorted high-to-low or low-to-high.
       For additional information on sort provisions see topic 4c. TASK AREA Commands, SORTING.

       The fields related to physical memory or virtual memory reference `(KiB)'  which  is  the  unsuffixed  display
       mode.   Such  fields  may,  however,  be  scaled from KiB through PiB.  That scaling is influenced via the `e'
       interactive command or established for startup through a build option.

        1. %CPU  --  CPU Usage
           The task's share of the elapsed CPU time since the last screen update, expressed as a percentage of  total
           CPU time.

           In  a  true  SMP  environment,  if  a  process is multi-threaded and top is not operating in Threads mode,
           amounts greater than 100% may be reported.  You toggle Threads mode with the `H' interactive command.

           Also for multi-processor environments, if Irix mode is Off, top will  operate  in  Solaris  mode  where  a
           task's  cpu usage will be divided by the total number of CPUs.  You toggle Irix/Solaris modes with the `I'
           interactive command.

           Note: When running in forest view mode (`V') with children collapsed (`v'), this field will  also  include
           the  CPU  time  of  those unseen children.  See topic 4c. TASK AREA Commands, CONTENT for more information
           regarding the `V' and `v' toggles.

        2. %MEM  --  Memory Usage (RES)
           A task's currently resident share of available physical memory.

           See `OVERVIEW, Linux Memory Types' for additional details.

        3. CGNAME  --  Control Group Name
           The name of the control group to which a process belongs, or `-' if not applicable for that process.

           This will typically be the last entry in the full list of control groups as shown under the  next  heading
           (CGROUPS).  And as is true there, this field is also variable width.

        4. CGROUPS  --  Control Groups
           The names of the control group(s) to which a process belongs, or `-' if not applicable for that process.

           Control Groups provide for allocating resources (cpu, memory, network bandwidth, etc.) among installation-
           defined groups of processes.  They enable fine-grained control  over  allocating,  denying,  prioritizing,
           managing and monitoring those resources.

           Many  different hierarchies of cgroups can exist simultaneously on a system and each hierarchy is attached
           to one or more subsystems.  A subsystem represents a single resource.

           Note: The CGROUPS field, unlike most columns, is not fixed-width.   When  displayed,  it  plus  any  other
           variable  width  columns  will be allocated all remaining screen width (up to the maximum 512 characters).
           Even so, such variable width fields could still suffer truncation.  See topic 5c. SCROLLING a  Window  for
           additional information on accessing any truncated data.

        5. CODE  --  Code Size (KiB)
           The  amount  of  physical memory currently devoted to executable code, also known as the Text Resident Set
           size or TRS.

           See `OVERVIEW, Linux Memory Types' for additional details.

        6. COMMAND  --  Command Name or Command Line
           Display the command line used to start a task or the name of the associated program.  You  toggle  between
           command line and name with `c', which is both a command-line option and an interactive command.

           When  you've  chosen to display command lines, processes without a command line (like kernel threads) will
           be shown with only the program name in brackets, as in this example:
               [kthreadd]

           This field may also be impacted by the forest view display mode.  See  the  `V'  interactive  command  for
           additional information regarding that mode.

           Note:  The  COMMAND  field,  unlike  most  columns, is not fixed-width.  When displayed, it plus any other
           variable width columns will be allocated all remaining screen width (up to the  maximum  512  characters).
           Even so, such variable width fields could still suffer truncation.  This is especially true for this field
           when command lines are being displayed (the `c' interactive command.)  See topic 5c.  SCROLLING  a  Window
           for additional information on accessing any truncated data.

        7. DATA  --  Data + Stack Size (KiB)
           The  amount  of  private  memory reserved by a process.  It is also known as the Data Resident Set or DRS.
           Such memory may not yet be mapped to physical memory (RES) but will always  be  included  in  the  virtual
           memory (VIRT) amount.

           See `OVERVIEW, Linux Memory Types' for additional details.

        8. ENVIRON  --  Environment variables
           Display  all  of  the environment variables, if any, as seen by the respective processes.  These variables
           will be displayed in their raw native order, not the sorted order you are accustomed  to  seeing  with  an
           unqualified `set'.

           Note:  The  ENVIRON  field,  unlike  most  columns, is not fixed-width.  When displayed, it plus any other
           variable width columns will be allocated all remaining screen width (up to the  maximum  512  characters).
           Even  so,  such  variable  width  fields  could still suffer truncation.  This is especially true for this
           field.  See topic 5c. SCROLLING a Window for additional information on accessing any truncated data.

        9. Flags  --  Task Flags
           This column represents the task's current scheduling flags which are expressed in hexadecimal notation and
           with zeros suppressed.  These flags are officially documented in <linux/sched.h>.

       10. GID  --  Group Id
           The effective group ID.

       11. GROUP  --  Group Name
           The effective group name.

       12. LXC  --  Lxc Container Name
           The  name  of  the  lxc  container  within  which a task is running.  If a process is not running inside a
           container, a dash (`-') will be shown.

       13. NI  --  Nice Value
           The nice value of the task.  A negative nice value means higher priority, whereas a  positive  nice  value
           means  lower  priority.   Zero  in  this field simply means priority will not be adjusted in determining a
           task's dispatch-ability.

       14. NU  --  Last known NUMA node
           A number representing the NUMA node associated with the last used processor (`P').  When -1  is  displayed
           it means that NUMA information is not available.

           See the `'2' and `3' interactive commands for additional NUMA provisions affecting the summary area.

       15. OOMa  --  Out of Memory Adjustment Factor
           The value, ranging from -1000 to +1000, added to the current out of memory score (OOMs) which is then used
           to determine which task to kill when memory is exhausted.

       16. OOMs  --  Out of Memory Score
           The value, ranging from 0 to +1000, used to select  task(s)  to  kill  when  memory  is  exhausted.   Zero
           translates to `never kill' whereas 1000 means `always kill'.

       17. P  --  Last used CPU (SMP)
           A  number  representing  the  last  used  processor.   In  a  true SMP environment this will likely change
           frequently since the kernel intentionally uses weak affinity.  Also, the very act of running top may break
           this weak affinity and cause more processes to change CPUs more often (because of the extra demand for cpu
           time).

       18. PGRP  --  Process Group Id
           Every process is member of a unique process group which  is  used  for  distribution  of  signals  and  by
           terminals  to  arbitrate  requests  for  their  input  and output.  When a process is created (forked), it
           becomes a member of the process group of its parent.  By convention, this value equals the process ID (see
           PID) of the first member of a process group, called the process group leader.

       19. PID  --  Process Id
           The task's unique process ID, which periodically wraps, though never restarting at zero.  In kernel terms,
           it is a dispatchable entity defined by a task_struct.

           This value may also be used as: a process group ID (see PGRP); a session ID for the  session  leader  (see
           SID); a thread group ID for the thread group leader (see TGID); and a TTY process group ID for the process
           group leader (see TPGID).

       20. PPID  --  Parent Process Id
           The process ID (pid) of a task's parent.

       21. PR  --  Priority
           The scheduling priority of the task.  If you see `rt' in this field, it means the task  is  running  under
           real time scheduling priority.

           Under  linux,  real  time priority is somewhat misleading since traditionally the operating itself was not
           preemptible.  And while the 2.6 kernel can be made mostly preemptible, it is not always so.

       22. RES  --  Resident Memory Size (KiB)
           A subset of the virtual address space (VIRT) representing  the  non-swapped  physical  memory  a  task  is
           currently using.  It is also the sum of the RSan, RSfd and RSsh fields.

           It can include private anonymous pages, private pages mapped to files (including program images and shared
           libraries) plus shared anonymous pages.  All such memory is backed by the swap file represented separately
           under SWAP.

           Lastly, this field may also include shared file-backed pages which, when modified, act as a dedicated swap
           file and thus will never impact SWAP.

           See `OVERVIEW, Linux Memory Types' for additional details.

       23. RSan  --  Resident Anonymous Memory Size (KiB)
           A subset of resident memory (RES) representing private pages not mapped to a file.

       24. RSfd  --  Resident File-Backed Memory Size (KiB)
           A subset of resident memory (RES) representing the implicitly shared pages supporting program  images  and
           shared libraries.  It also includes explicit file mappings, both private and shared.

       25. RSlk  --  Resident Locked Memory Size (KiB)
           A subset of resident memory (RES) which cannot be swapped out.

       26. RSsh  --  Resident Shared Memory Size (KiB)
           A subset of resident memory (RES) representing the explicitly shared anonymous shm*/mmap pages.

       27. RUID  --  Real User Id
           The real user ID.

       28. RUSER  --  Real User Name
           The real user name.

       29. S  --  Process Status
           The status of the task which can be one of:
               D = uninterruptible sleep
               I = idle
               R = running
               S = sleeping
               T = stopped by job control signal
               t = stopped by debugger during trace
               Z = zombie

           Tasks shown as running should be more properly thought of as ready to run  --  their task_struct is simply
           represented on the Linux run-queue.  Even without a true SMP machine, you may see numerous tasks  in  this
           state depending on top's delay interval and nice value.

       30. SHR  --  Shared Memory Size (KiB)
           A  subset  of resident memory (RES) that may be used by other processes.  It will include shared anonymous
           pages and shared file-backed pages.  It also includes private pages mapped to files  representing  program
           images and shared libraries.

           See `OVERVIEW, Linux Memory Types' for additional details.

       31. SID  --  Session Id
           A  session  is a collection of process groups (see PGRP), usually established by the login shell.  A newly
           forked process joins the session of its creator.  By convention, this value equals  the  process  ID  (see
           PID) of the first member of the session, called the session leader, which is usually the login shell.

       32. SUID  --  Saved User Id
           The saved user ID.

       33. SUPGIDS  --  Supplementary Group IDs
           The  IDs  of  any supplementary group(s) established at login or inherited from a task's parent.  They are
           displayed in a comma delimited list.

           Note: The SUPGIDS field, unlike most columns, is not fixed-width.   When  displayed,  it  plus  any  other
           variable  width  columns  will be allocated all remaining screen width (up to the maximum 512 characters).
           Even so, such variable width fields could still suffer truncation.  See topic 5c. SCROLLING a  Window  for
           additional information on accessing any truncated data.

       34. SUPGRPS  --  Supplementary Group Names
           The  names of any supplementary group(s) established at login or inherited from a task's parent.  They are
           displayed in a comma delimited list.

           Note: The SUPGRPS field, unlike most columns, is not fixed-width.   When  displayed,  it  plus  any  other
           variable  width  columns  will be allocated all remaining screen width (up to the maximum 512 characters).
           Even so, such variable width fields could still suffer truncation.  See topic 5c. SCROLLING a  Window  for
           additional information on accessing any truncated data.

       35. SUSER  --  Saved User Name
           The saved user name.

       36. SWAP  --  Swapped Size (KiB)
           The  formerly  resident  portion  of  a task's address space written to the swap file when physical memory
           becomes over committed.

           See `OVERVIEW, Linux Memory Types' for additional details.

       37. TGID  --  Thread Group Id
           The ID of the thread group to which a task belongs.  It is the PID of the thread group leader.  In  kernel
           terms, it represents those tasks that share an mm_struct.

       38. TIME  --  CPU Time
           Total  CPU  time  the  task has used since it started.  When Cumulative mode is On, each process is listed
           with the cpu time that it and its dead children have used.  You toggle Cumulative mode with `S', which  is
           both  a  command-line  option  and an interactive command.  See the `S' interactive command for additional
           information regarding this mode.

       39. TIME+  --  CPU Time, hundredths
           The same as TIME, but reflecting more granularity through hundredths of a second.

       40. TPGID  --  Tty Process Group Id
           The process group ID of the foreground process for the connected tty, or -1 if a process is not  connected
           to a terminal.  By convention, this value equals the process ID (see PID) of the process group leader (see
           PGRP).

       41. TTY  --  Controlling Tty
           The name of the controlling terminal.  This is usually the device (serial port, pty, etc.) from which  the
           process was started, and which it uses for input or output.  However, a task need not be associated with a
           terminal, in which case you'll see `?' displayed.

       42. UID  --  User Id
           The effective user ID of the task's owner.

       43. USED  --  Memory in Use (KiB)
           This field represents the non-swapped physical memory a task is using (RES) plus the swapped  out  portion
           of its address space (SWAP).

           See `OVERVIEW, Linux Memory Types' for additional details.

       44. USER  --  User Name
           The effective user name of the task's owner.

       45. VIRT  --  Virtual Memory Size (KiB)
           The total amount of virtual memory used by the task.  It includes all code, data and shared libraries plus
           pages that have been swapped out and pages that have been mapped but not used.

           See `OVERVIEW, Linux Memory Types' for additional details.

       46. WCHAN  --  Sleeping in Function
           This field will show the name of the kernel function in which the task  is  currently  sleeping.   Running
           tasks will display a dash (`-') in this column.

       47. nDRT  --  Dirty Pages Count
           The  number  of  pages  that  have been modified since they were last written to auxiliary storage.  Dirty
           pages must be written to auxiliary storage before the corresponding physical memory location can  be  used
           for some other virtual page.

           This field was deprecated with linux 2.6 and is always zero.

       48. nMaj  --  Major Page Fault Count
           The  number  of  major  page  faults  that  have  occurred for a task.  A page fault occurs when a process
           attempts to read from or write to a virtual page that is not currently present in its  address  space.   A
           major page fault is when auxiliary storage access is involved in making that page available.

       49. nMin  --  Minor Page Fault count
           The  number  of  minor  page  faults  that  have  occurred for a task.  A page fault occurs when a process
           attempts to read from or write to a virtual page that is not currently present in its  address  space.   A
           minor page fault does not involve auxiliary storage access in making that page available.

       50. nTH  --  Number of Threads
           The number of threads associated with a process.

       51. nsIPC  --  IPC namespace
           The Inode of the namespace used to isolate interprocess communication (IPC) resources such as System V IPC
           objects and POSIX message queues.

       52. nsMNT  --  MNT namespace
           The Inode of the namespace used to isolate filesystem mount points thus offering different  views  of  the
           filesystem hierarchy.

       53. nsNET  --  NET namespace
           The  Inode  of  the namespace used to isolate resources such as network devices, IP addresses, IP routing,
           port numbers, etc.

       54. nsPID  --  PID namespace
           The Inode of the namespace used to isolate process ID numbers meaning they need not remain unique.   Thus,
           each  such namespace could have its own `init/systemd' (PID #1) to manage various initialization tasks and
           reap orphaned child processes.

       55. nsUSER  --  USER namespace
           The Inode of the namespace used to isolate the user and group ID numbers.  Thus, a process  could  have  a
           normal  unprivileged  user  ID  outside  a  user  namespace  while  having  a user ID of 0, with full root
           privileges, inside that namespace.

       56. nsUTS  --  UTS namespace
           The Inode of the namespace used to isolate hostname and NIS domain name.  UTS  simply  means  "UNIX  Time-
           sharing System".

       57. vMj  --  Major Page Fault Count Delta
           The number of major page faults that have occurred since the last update (see nMaj).

       58. vMn  --  Minor Page Fault Count Delta
           The number of minor page faults that have occurred since the last update (see nMin).

   3b. MANAGING Fields
       After  pressing  the  interactive  command  `f' or `F' (Fields Management) you will be presented with a screen
       showing: 1) the `current' window name; 2) the designated sort field; 3) all  fields  in  their  current  order
       along  with  descriptions.   Entries  marked with an asterisk are the currently displayed fields, screen width
       permitting.

           •  As the on screen instructions indicate, you navigate among the fields with the Up and Down arrow  keys.
              The PgUp, PgDn, Home and End keys can also be used to quickly reach the first or last available field.

           •  The Right arrow key selects a field for repositioning and the Left arrow key or the <Enter> key commits
              that field's placement.

           •  The `d' key or the <Space> bar toggles a field's display status, and thus the presence  or  absence  of
              the asterisk.

           •  The  `s'  key  designates  a  field  as  the sort field.  See topic 4c. TASK AREA Commands, SORTING for
              additional information regarding your selection of a sort field.

           •  The `a' and `w' keys can be used to cycle through all available windows and the `q' or <Esc> keys  exit
              Fields Management.

       The Fields Management screen can also be used to change the `current' window/field group in either full-screen
       mode or alternate-display mode.  Whatever was targeted when `q' or <Esc> was pressed will be made  current  as
       you  return to the top display.  See topic 5. ALTERNATE-DISPLAY Provisions and the `g' interactive command for
       insight into `current' windows and field groups.

       Note: Any window that has been scrolled horizontally will be reset if any  field  changes  are  made  via  the
       Fields  Management  screen.   Any  vertical  scrolled  position, however, will not be affected.  See topic 5c.
       SCROLLING a Window for additional information regarding vertical and horizontal scrolling.

4. INTERACTIVE Commands
       Listed below is a brief index of commands within categories.  Some commands appear more than once   --   their
       meaning or scope may vary depending on the context in which they are issued.

         4a. Global-Commands
               <Ent/Sp> ?, =, 0,
               A, B, d, E, e, g, h, H, I, k, q, r, s, W, X, Y, Z
         4b. Summary-Area-Commands
               C, l, t, m, 1, 2, 3, 4, !
         4c. Task-Area-Commands
               Appearance:  b, J, j, x, y, z
               Content:     c, f, F, o, O, S, u, U, V, v
               Size:        #, i, n
               Sorting:     <, >, f, F, R
         4d. Color-Mapping
               <Ret>, a, B, b, H, M, q, S, T, w, z, 0 - 7
         5b. Commands-for-Windows
               -, _, =, +, A, a, g, G, w
         5c. Scrolling-a-Window
               C, Up, Dn, Left, Right, PgUp, PgDn, Home, End
         5d. Searching-in-a-Window
               L, &

   4a. GLOBAL Commands
       The  global  interactive  commands  are  always available in both full-screen mode and alternate-display mode.
       However, some of these interactive commands are not available when running in Secure mode.

       If you wish to know in advance whether or not your top has been secured, simply ask  for  help  and  view  the
       system summary on the second line.

         <Enter> or <Space>  :Refresh-Display
              These  commands  awaken  top  and  following receipt of any input the entire display will be repainted.
              They also force an update of any hotplugged cpu or physical memory changes.

              Use either of these keys if you have a large delay interval and wish to see current status,

          ? | h  :Help
              There are two help levels available.  The first will provide a reminder of all  the  basic  interactive
              commands.  If top is secured, that screen will be abbreviated.

              Typing  `h'  or `?' on that help screen will take you to help for those interactive commands applicable
              to alternate-display mode.

          =  :Exit-Display-Limits
              Removes restrictions on what is shown.  This command will reverse any `i' (idle tasks), `n' (max tasks)
              and  `v'  (hide  children)  commands  that  might  be  active.   It  also provides for an exit from PID
              monitoring, User filtering, Other filtering, Locate processing and Combine Cpus mode.

              Additionally, if the window has been scrolled it will be reset with this command.

          0  :Zero-Suppress toggle
              This command determines whether zeros are shown or suppressed for many of the fields in a task  window.
              Fields like UID, GID, NI, PR or P are not affected by this toggle.

          A  :Alternate-Display-Mode toggle
              This  command  will  switch  between  full-screen  mode  and  alternate-display  mode.   See  topic  5.
              ALTERNATE-DISPLAY Provisions and the `g' interactive command for insight  into  `current'  windows  and
              field groups.

          B  :Bold-Disable/Enable toggle
              This  command  will  influence use of the bold terminfo capability and alters both the summary area and
              task area for the `current' window.  While it is intended primarily for use with dumb terminals, it can
              be applied anytime.

              Note: When this toggle is On and top is operating in monochrome mode, the entire display will appear as
              normal text.  Thus, unless the `x' and/or `y' toggles are using reverse for emphasis, there will be  no
              visual confirmation that they are even on.

       *  d | s  :Change-Delay-Time-interval
              You will be prompted to enter the delay time, in seconds, between display updates.

              Fractional  seconds  are  honored,  but  a  negative number is not allowed.  Entering 0 causes (nearly)
              continuous updates, with an unsatisfactory display as the system and tty driver try  to  keep  up  with
              top's demands.  The delay value is inversely proportional to system loading, so set it with care.

              If at any time you wish to know the current delay time, simply ask for help and view the system summary
              on the second line.

          E  :Enforce-Summary-Memory-Scale in Summary Area
              With this command you can cycle through the available summary area memory scaling which ranges from KiB
              (kibibytes or 1,024 bytes) through EiB (exbibytes or 1,152,921,504,606,846,976 bytes).

              If  you  see  a `+' between a displayed number and the following label, it means that top was forced to
              truncate some portion of that number.  By raising the scaling factor, such truncation can be avoided.

          e  :Enforce-Task-Memory-Scale in Task Area
              With this command you can cycle through the available task area memory scaling which  ranges  from  KiB
              (kibibytes or 1,024 bytes) through PiB (pebibytes or 1,125,899,906,842,624 bytes).

              While  top  will try to honor the selected target range, additional scaling might still be necessary in
              order to accommodate current values.  If you wish to see  a  more  homogeneous  result  in  the  memory
              columns, raising the scaling range will usually accomplish that goal.  Raising it too high, however, is
              likely to produce an all zero result which cannot be suppressed with the `0' interactive command.

          g  :Choose-Another-Window/Field-Group
              You will be prompted to enter a number between 1 and 4 designating the field group which should be made
              the  `current'  window.   You  will  soon  grow  comfortable  with  these  4  windows, especially after
              experimenting with alternate-display mode.

          H  :Threads-mode toggle
              When this toggle is On, individual threads will be displayed for all  processes  in  all  visible  task
              windows.  Otherwise, top displays a summation of all threads in each process.

          I  :Irix/Solaris-Mode toggle
              When  operating  in  Solaris  mode  (`I'  toggled Off), a task's cpu usage will be divided by the total
              number of CPUs.  After issuing this command, you'll be told the new state of this toggle.

       *  k  :Kill-a-task
              You will be prompted for a PID and then the signal to send.

              Entering no PID or a negative number will be interpreted as the default shown in the prompt (the  first
              task displayed).  A PID value of zero means the top program itself.

              The  default  signal,  as  reflected  in the prompt, is SIGTERM.  However, you can send any signal, via
              number or name.

              If you wish to abort the kill process, do one of the following depending on your progress:
                  1) at the pid prompt, type an invalid number
                  2) at the signal prompt, type 0 (or any invalid signal)
                  3) at any prompt, type <Esc>

          q  :Quit

       *  r  :Renice-a-Task
              You will be prompted for a PID and then the value to nice it to.

              Entering no PID or a negative number will be interpreted as the default shown in the prompt (the  first
              task displayed).  A PID value of zero means the top program itself.

              A  positive  nice  value will cause a process to lose priority.  Conversely, a negative nice value will
              cause a process to be viewed more favorably by the kernel.  As a general rule, ordinary users can  only
              increase the nice value and are prevented from lowering it.

              If you wish to abort the renice process, do one of the following depending on your progress:
                  1) at the pid prompt, type an invalid number
                  2) at the nice prompt, type <Enter> with no input
                  3) at any prompt, type <Esc>

          W  :Write-the-Configuration-File
              This  will  save  all  of  your  options  and toggles plus the current display mode and delay time.  By
              issuing this command just before quitting top, you will be able restart  later  in  exactly  that  same
              state.

          X  :Extra-Fixed-Width
              Some  fields  are fixed width and not scalable.  As such, they are subject to truncation which would be
              indicated by a `+' in the last position.

              This interactive command can be used to alter the widths of the following fields:

                  field  default    field  default    field  default
                  GID       5       GROUP     8       WCHAN    10
                  RUID      5       LXC       8       nsIPC    10
                  SUID      5       RUSER     8       nsMNT    10
                  UID       5       SUSER     8       nsNET    10
                                    TTY       8       nsPID    10
                                    USER      8       nsUSER   10
                                                      nsUTS    10

              You will be prompted for the amount to be added to the  default  widths  shown  above.   Entering  zero
              forces a return to those defaults.

              If  you  enter a negative number, top will automatically increase the column size as needed until there
              is no more truncated data.  You can accelerate this process by reducing the delay interval  or  holding
              down the <Space> bar.

              Note: Whether explicitly or automatically increased, the widths for these fields are never decreased by
              top.  To narrow them you must specify a smaller number or restore the defaults.

          Y  :Inspect-Other-Output
              After issuing the `Y' interactive command, you will be prompted for a target PID.  Typing  a  value  or
              accepting the default results in a separate screen.  That screen can be used to view a variety of files
              or piped command output while the normal top iterative display is paused.

              Note: This interactive command is only fully realized when supporting entries have been manually  added
              to  the end of the top configuration file.  For details on creating those entries, see topic 6b. ADDING
              INSPECT Entries.

              Most of the keys used to navigate the Inspect feature are reflected in its header prologue.  There are,
              however,  additional  keys  available  once  you  have selected a particular file or command.  They are
              familiar to anyone who has used the pager `less' and are summarized here for future reference.

                  key      function
                  =        alternate status-line, file or pipeline
                  /        find, equivalent to `L' locate
                  n        find next, equivalent to `&' locate next
                  <Space>  scroll down, equivalent to <PgDn>
                  b        scroll up, equivalent to <PgUp>
                  g        first line, equivalent to <Home>
                  G        last line, equivalent to <End>

          Z  :Change-Color-Mapping
              This key will take you to a separate screen where you can change the colors for the  `current'  window,
              or for all windows.  For details regarding this interactive command see topic 4d. COLOR Mapping.

       *  The  commands  shown with an asterisk (`*') are not available in Secure mode, nor will they be shown on the
          level-1 help screen.

   4b. SUMMARY AREA Commands
       The summary area interactive commands are always available in  both  full-screen  mode  and  alternate-display
       mode.   They  affect  the  beginning  lines  of  your  display and will determine the position of messages and
       prompts.

       These commands always impact just the `current' window/field group.  See topic 5. ALTERNATE-DISPLAY Provisions
       and the `g' interactive command for insight into `current' windows and field groups.

          C  :Show-scroll-coordinates toggle
              Toggle  an  informational  message  which is displayed whenever the message line is not otherwise being
              used.  For additional information see topic 5c. SCROLLING a Window.

          l  :Load-Average/Uptime toggle
              This is also the line containing the program name (possibly an alias)  when  operating  in  full-screen
              mode or the `current' window name when operating in alternate-display mode.

          t  :Task/Cpu-States toggle
              This  command  affects from 2 to many summary area lines, depending on the state of the `1', `2' or `3'
              command toggles and whether or not top is running under true SMP.

              This portion of the summary area is also influenced by the `H' interactive command toggle, as reflected
              in the total label which shows either Tasks or Threads.

              This command serves as a 4-way toggle, cycling through these modes:
                  1. detailed percentages by category
                  2. abbreviated user/system and total % + bar graph
                  3. abbreviated user/system and total % + block graph
                  4. turn off task and cpu states display

              When operating in either of the graphic modes, the display becomes much more meaningful when individual
              CPUs or NUMA nodes are also displayed.  See the the `1', `2' and  `3'  commands  below  for  additional
              information.

          m  :Memory/Swap-Usage toggle
              This command affects the two summary area lines dealing with physical and virtual memory.

              This command serves as a 4-way toggle, cycling through these modes:
                  1. detailed percentages by memory type
                  2. abbreviated % used/total available + bar graph
                  3. abbreviated % used/total available + block graph
                  4. turn off memory display

          1  :Single/Separate-Cpu-States toggle
              This  command  affects  how the `t' command's Cpu States portion is shown.  Although this toggle exists
              primarily to serve massively-parallel SMP machines, it is not restricted to solely SMP environments.

              When you see `%Cpu(s):' in the summary area, the `1' toggle is On and all cpu information  is  gathered
              in a single line.  Otherwise, each cpu is displayed separately as: `%Cpu0, %Cpu1, ...'  up to available
              screen height.

          2  :NUMA-Nodes/Cpu-Summary toggle
              This command toggles between the `1' command cpu summary display (only) or a summary display  plus  the
              cpu  usage  statistics  for  each  NUMA  Node.  It is only available if a system has the requisite NUMA
              support.

          3  :Expand-NUMA-Node
              You will be invited to enter a number representing a NUMA Node.  Thereafter, a node  summary  plus  the
              statistics for each cpu in that node will be shown until the `1', `2' or `4' command toggle is pressed.
              This interactive command is only available if a system has the requisite NUMA support.

          4  :Display-Cpus-Two-Abreast
              This command turns the `1' toggle Off for individual cpu display but prints the  results  two  abreast.
              It  requires  a  terminal with a minimum width of 80 columns.  If a terminal's width is decreased below
              the minimum while top is running, top reverts to the normal `1' toggle Off state.

              To avoid truncation when displaying detailed cpu statistcs, as opposed to the graphic  representations,
              a minimum width of 165 columns would be required.

          !  :Combine-Cpus-Mode
              This  command  toggle  is  intended  for  massively  parallel SMP environments where, even with the `4'
              command toggle, not all processors can be displayed.  With each press of `!' the number  of  additional
              cpu's combined is doubled thus reducing the total number of cpu lines displayed.

              For  example,  with  the  first press of `!' one additional cpu will be combined and displayed as `0-1,
              2-3, ...' instead of the normal `%Cpu0, %Cpu1, %Cpu2, %Cpu3, ...'.  With a second  `!'  command  toggle
              two  additional  cpus  are  combined and shown as `0-2, 3-5, ...'.  Then the third '!' press, combining
              four additional cpus, shows as `0-4, 5-9, ...', etc.

              Such progression continues until individual cpus are again displayed and impacts both the `1'  and  `4'
              toggles (one or two columns).  Use the `=' command to exit Combine Cpus mode.

       Note:  If the entire summary area has been toggled Off for any window, you would be left with just the message
       line.  In that way, you will have maximized available task rows but (temporarily) sacrificed the program  name
       in full-screen mode or the `current' window name when in alternate-display mode.

   4c. TASK AREA Commands
       The task area interactive commands are always available in full-screen mode.

       The  task  area  interactive  commands are never available in alternate-display mode if the `current' window's
       task display has been toggled Off (see topic 5. ALTERNATE-DISPLAY Provisions).

       APPEARANCE of task window

          J  :Justify-Numeric-Columns toggle
              Alternates between right-justified (the default) and left-justified numeric data.  If the numeric  data
              completely fills the available column, this command toggle may impact the column header only.

          j  :Justify-Character-Columns toggle
              Alternates  between  left-justified (the default) and right-justified character data.  If the character
              data completely fills the available column, this command toggle may impact the column header only.

         The following commands will also be influenced by the state of the global `B' (bold enable) toggle.

          b  :Bold/Reverse toggle
              This command will impact how the `x' and `y' toggles are displayed.  It may  also  impact  the  summary
              area when a bar graph has been selected for cpu states or memory usage via the `t' or `m' toggles.

          x  :Column-Highlight toggle
              Changes  highlighting  for  the  current  sort  field.   If you forget which field is being sorted this
              command can serve as a quick visual reminder, providing the sort field is being  displayed.   The  sort
              field might not be visible because:
                  1) there is insufficient Screen Width
                  2) the `f' interactive command turned it Off

              Note:  Whenever  Searching  and/or  Other  Filtering  is  active  in  a  window, column highlighting is
              temporarily disabled.  See the notes at the end of topics  5d.  SEARCHING  and  5e.  FILTERING  for  an
              explanation why.

          y  :Row-Highlight toggle
              Changes  highlighting  for "running" tasks.  For additional insight into this task state, see topic 3a.
              DESCRIPTIONS of Fields, the `S' field (Process Status).

              Use of this provision provides important insight into your system's health.  The only costs will  be  a
              few additional tty escape sequences.

          z  :Color/Monochrome toggle
              Switches  the `current' window between your last used color scheme and the older form of black-on-white
              or white-on-black.  This command will alter both the summary area and task area but does not affect the
              state of the `x', `y' or `b' toggles.

       CONTENT of task window

          c  :Command-Line/Program-Name toggle
              This  command  will  be  honored whether or not the COMMAND column is currently visible.  Later, should
              that field come into view, the change you applied will be seen.

          f | F  :Fields-Management
              These keys display a separate screen where you can change which fields are displayed, their  order  and
              also  designate the sort field.  For additional information on these interactive commands see topic 3b.
              MANAGING Fields.

          o | O  :Other-Filtering
              You will be prompted for the selection criteria which then determines which tasks will be shown in  the
              `current'  window.  Your criteria can be made case sensitive or case can be ignored.  And you determine
              if top should include or exclude matching tasks.

              See topic 5e. FILTERING in a window for details on these and additional related interactive commands.

          S  :Cumulative-Time-Mode toggle
              When Cumulative mode is On, each process is listed with the cpu time that it and its dead children have
              used.

              When  Off,  programs  that fork into many separate tasks will appear less demanding.  For programs like
              `init' or a shell this is appropriate but for others, like compilers, perhaps not.  Experiment with two
              task windows sharing the same sort field but with different `S' states and see which representation you
              prefer.

              After issuing this command, you'll be informed of the new state of this toggle.  If you wish to know in
              advance whether or not Cumulative mode is in effect, simply ask for help and view the window summary on
              the second line.

          u | U  :Show-Specific-User-Only
              You will be prompted for the uid or name of the user to display.  The -u option matches  on   effective
              user whereas the -U option matches on any user (real, effective, saved, or filesystem).

              Thereafter,  in  that  task  window only matching users will be shown, or possibly no processes will be
              shown.  Prepending an exclamation point (`!') to the user id or name  instructs  top  to  display  only
              processes with users not matching the one provided.

              Different  task windows can be used to filter different users.  Later, if you wish to monitor all users
              again in the `current' window, re-issue this command but just press <Enter> at the prompt.

          V  :Forest-View-Mode toggle
              In this mode, processes are reordered according to their parents and the layout of the  COMMAND  column
              resembles  that of a tree.  In forest view mode it is still possible to toggle between program name and
              command line (see the  `c'  interactive  command)  or  between  processes  and  threads  (see  the  `H'
              interactive command).

              Note:  Typing any key affecting the sort order will exit forest view mode in the `current' window.  See
              topic 4c. TASK AREA Commands, SORTING for information on those keys.

          v  :Hide/Show-Children toggle
              When in forest view mode, this key serves as a toggle to collapse or expand the children of a parent.

              The toggle is applied against the first (topmost) process in  the  `current'  window.   See  topic  5c.
              SCROLLING a Window for additional information regarding vertical scrolling.

              If  the target process has not forked any children, this key has no effect.  It also has no effect when
              not in forest view mode.

       SIZE of task window

          i  :Idle-Process toggle
              Displays all tasks or just active tasks.  When this toggle is Off, tasks that have  not  used  any  CPU
              since  the  last  update  will not be displayed.  However, due to the granularity of the %CPU and TIME+
              fields, some processes may still be displayed that appear to have used no CPU.

              If this command is applied to the last task display when in alternate-display mode, then  it  will  not
              affect the window's size, as all prior task displays will have already been painted.

          n | #  :Set-Maximum-Tasks
              You  will be prompted to enter the number of tasks to display.  The lessor of your number and available
              screen rows will be used.

              When used in alternate-display mode, this is the command that gives you precise control over  the  size
              of each currently visible task display, except for the very last.  It will not affect the last window's
              size, as all prior task displays will have already been painted.

              Note: If you wish to increase the size of the last visible task display when in alternate-display mode,
              simply decrease the size of the task display(s) above it.

       SORTING of task window

          For  compatibility,  this top supports most of the former top sort keys.  Since this is primarily a service
          to former top users, these commands do not appear on any help screen.
                command   sorted-field                  supported
                A         start time (non-display)      No
                M         %MEM                          Yes
                N         PID                           Yes
                P         %CPU                          Yes
                T         TIME+                         Yes

          Before using any of the following sort provisions,  top  suggests  that  you  temporarily  turn  on  column
          highlighting  using  the  `x'  interactive command.  That will help ensure that the actual sort environment
          matches your intent.

          The following interactive commands will only be honored when the current sort field is visible.   The  sort
          field might not be visible because:
                1) there is insufficient Screen Width
                2) the `f' interactive command turned it Off

             <  :Move-Sort-Field-Left
                 Moves the sort column to the left unless the current sort field is the first field being displayed.

             >  :Move-Sort-Field-Right
                 Moves the sort column to the right unless the current sort field is the last field being displayed.

          The following interactive commands will always be honored whether or not the current sort field is visible.

             f | F  :Fields-Management
                 These  keys  display  a separate screen where you can change which field is used as the sort column,
                 among other functions.  This can be a convenient way to simply verify the current sort  field,  when
                 running top with column highlighting turned Off.

             R  :Reverse/Normal-Sort-Field toggle
                 Using this interactive command you can alternate between high-to-low and low-to-high sorts.

          Note: Field sorting uses internal values, not those in column display.  Thus, the TTY and WCHAN fields will
          violate strict ASCII collating sequence.

   4d. COLOR Mapping
       When you issue the `Z' interactive command, you will be presented with a separate screen.  That screen can  be
       used  to  change  the  colors  in just the `current' window or in all four windows before returning to the top
       display.

       The following interactive commands are available.
           4 upper case letters to select a target
           8 numbers to select a color
           normal toggles available
               B         :bold disable/enable
               b         :running tasks "bold"/reverse
               z         :color/mono
           other commands available
               a/w       :apply, then go to next/prior
               <Enter>   :apply and exit
               q         :abandon current changes and exit

       If you use `a' or `w' to cycle the targeted window, you will have applied the color scheme that was  displayed
       when  you  left  that window.  You can, of course, easily return to any window and reapply different colors or
       turn colors Off completely with the `z' toggle.

       The Color Mapping screen can also be used to change the `current' window/field  group  in  either  full-screen
       mode or alternate-display mode.  Whatever was targeted when `q' or <Enter> was pressed will be made current as
       you return to the top display.

5. ALTERNATE-DISPLAY Provisions
   5a. WINDOWS Overview
       Field Groups/Windows:
          In full-screen mode there is a single window represented by the entire  screen.   That  single  window  can
          still  be  changed  to  display  1  of  4 different field groups (see the `g' interactive command, repeated
          below).  Each of the 4 field groups  has  a  unique  separately  configurable  summary  area  and  its  own
          configurable task area.

          In  alternate-display  mode, those 4 underlying field groups can now be made visible simultaneously, or can
          be turned Off individually at your command.

          The summary area will always exist, even if it's only the message line.  At any given time only one summary
          area can be displayed.  However, depending on your commands, there could be from zero to four separate task
          displays currently showing on the screen.

       Current Window:
          The `current' window is the window associated with the summary area and the window to  which  task  related
          commands  are  always  directed.  Since in alternate-display mode you can toggle the task display Off, some
          commands might be restricted for the `current' window.

          A further complication arises when you have toggled the first summary area line Off.  With the loss of  the
          window name (the `l' toggled line), you'll not easily know what window is the `current' window.

   5b. COMMANDS for Windows
          - | _  :Show/Hide-Window(s) toggles
              The  `-' key turns the `current' window's task display On and Off.  When On, that task area will show a
              minimum of the columns header you've established with  the  `f'  interactive  command.   It  will  also
              reflect any other task area options/toggles you've applied yielding zero or more tasks.

              The  `_'  key  does  the same for all task displays.  In other words, it switches between the currently
              visible task display(s) and any task display(s) you had toggled  Off.   If  all  4  task  displays  are
              currently visible, this interactive command will leave the summary area as the only display element.

       *  = | +  :Equalize/Reset-Window(s)
              The  `=' key forces the `current' window's task display to be visible.  It also reverses any active `i'
              (idle tasks), `n' (max tasks), `u/U' (user filter), `o/O' (other  filter),  `v'  (hide  children),  `L'
              (locate) and `!' (combine cpus) commands.  Also, if the window had been scrolled, it will be reset with
              this command.  See topic 5c. SCROLLING a Window  for  additional  information  regarding  vertical  and
              horizontal scrolling.

              The  `+'  key  does  the  same for all windows.  The four task displays will reappear, evenly balanced,
              while retaining any customizations previously applied beyond those noted for the `=' command toggle.

       *  A  :Alternate-Display-Mode toggle
              This command will switch between full-screen mode and alternate-display mode.

              The first time you issue this command, all four task displays  will  be  shown.   Thereafter  when  you
              switch modes, you will see only the task display(s) you've chosen to make visible.

       *  a | w  :Next-Window-Forward/Backward
              This will change the `current' window, which in turn changes the window to which commands are directed.
              These keys act in a circular fashion so you can reach any desired window using either key.

              Assuming the window name is visible (you have not toggled `l' Off), whenever the `current' window  name
              loses  its  emphasis/color,  that's  a  reminder  the  task  display  is  Off and many commands will be
              restricted.

       *  g  :Choose-Another-Window/Field-Group
              You will be prompted to enter a number between 1 and 4 designating the field group which should be made
              the `current' window.

              In  full-screen  mode,  this  command is necessary to alter the `current' window.  In alternate-display
              mode, it is simply a less convenient alternative to the `a' and `w' commands.

          G  :Change-Window/Field-Group-Name
              You will be prompted for a new name to be applied to the `current' window.  It does  not  require  that
              the window name be visible (the `l' toggle to be On).

       *  The interactive commands shown with an asterisk (`*') have use beyond alternate-display mode.
              =, A, g    are always available
              a, w       act the same with color mapping
                         and fields management

   5c. SCROLLING a Window
       Typically  a  task  window is a partial view into a systems's total tasks/threads which shows only some of the
       available fields/columns.  With these scrolling keys, you can move that view  vertically  or  horizontally  to
       reveal any desired task or column.

       Up,PgUp  :Scroll-Tasks
           Move  the view up toward the first task row, until the first task is displayed at the top of the `current'
           window.  The Up arrow key moves a single line while PgUp scrolls the entire window.

       Down,PgDn  :Scroll-Tasks
           Move the view down toward the last task row, until the last task is the only task displayed at the top  of
           the `current' window.  The Down arrow key moves a single line while PgDn scrolls the entire window.

       Left,Right  :Scroll-Columns
           Move the view of displayable fields horizontally one column at a time.

           Note: As a reminder, some fields/columns are not fixed-width but allocated all remaining screen width when
           visible.  When scrolling right or left, that feature may produce some unexpected results initially.

           Additionally, there are special provisions for any variable  width  field  when  positioned  as  the  last
           displayed  field.   Once that field is reached via the right arrow key, and is thus the only column shown,
           you can continue scrolling horizontally within such a field.  See the `C' interactive  command  below  for
           additional information.

       Home  :Jump-to-Home-Position
           Reposition the display to the un-scrolled coordinates.

       End  :Jump-to-End-Position
           Reposition  the  display  so  that the rightmost column reflects the last displayable field and the bottom
           task row represents the last task.

           Note: From this position it is still possible to scroll down and right using the arrow keys.  This is true
           until a single column and a single task is left as the only display element.

       C  :Show-scroll-coordinates toggle
           Toggle  an informational message which is displayed whenever the message line is not otherwise being used.
           That message will take one of two forms depending on whether or not a variable width column has also  been
           scrolled.

             scroll coordinates: y = n/n (tasks), x = n/n (fields)
             scroll coordinates: y = n/n (tasks), x = n/n (fields) + nn

           The  coordinates  shown  as  n/n  are  relative  to  the  upper  left corner of the `current' window.  The
           additional `+ nn' represents the displacement into a variable width  column  when  it  has  been  scrolled
           horizontally.   Such  displacement  occurs  in  normal 8 character tab stop amounts via the right and left
           arrow keys.

           y = n/n (tasks)
               The first n represents the topmost visible task and is controlled by scrolling keys.  The second n  is
               updated automatically to reflect total tasks.

           x = n/n (fields)
               The  first n represents the leftmost displayed column and is controlled by scrolling keys.  The second
               n is the total number of displayable fields and is established with the `f' interactive command.

       The  above  interactive  commands  are  always  available  in  full-screen  mode  but   never   available   in
       alternate-display mode if the `current' window's task display has been toggled Off.

       Note:  When  any  form of filtering is active, you can expect some slight aberrations when scrolling since not
       all tasks will be visible.  This is particularly apparent when using the Up/Down arrow keys.

   5d. SEARCHING in a Window
       You can use these interactive commands to locate a task row containing a particular value.

       L  :Locate-a-string
           You will be prompted for the case-sensitive string to locate starting from the current window coordinates.
           There are no restrictions on search string content.

           Searches  are  not limited to values from a single field or column.  All of the values displayed in a task
           row are allowed in a search string.  You may  include  spaces,  numbers,  symbols  and  even  forest  view
           artwork.

           Keying <Enter> with no input will effectively disable the `&' key until a new search string is entered.

       &  :Locate-next
           Assuming a search string has been established, top will attempt to locate the next occurrence.

       When a match is found, the current window is repositioned vertically so the task row containing that string is
       first.  The scroll coordinates message can provide confirmation of such vertical repositioning  (see  the  `C'
       interactive command).  Horizontal scrolling, however, is never altered via searching.

       The availability of a matching string will be influenced by the following factors.

          a. Which fields are displayable from the total available,
             see topic 3b. MANAGING Fields.

          b. Scrolling a window vertically and/or horizontally,
             see topic 5c. SCROLLING a Window.

          c. The state of the command/command-line toggle,
             see the `c' interactive command.

          d. The stability of the chosen sort column,
             for example PID is good but %CPU bad.

       If  a  search  fails,  restoring  the  `current'  window  home  (unscrolled) position, scrolling horizontally,
       displaying command-lines or choosing a more stable sort field could yet produce a successful `&' search.

       The  above  interactive  commands  are  always  available  in  full-screen  mode  but   never   available   in
       alternate-display mode if the `current' window's task display has been toggled Off.

       Note:  Whenever a Search is active in a window, top will turn column highlighting Off to prevent false matches
       on internal non-display escape sequences.  Such highlighting will be restored when a window's search string is
       empty.  See the `x' interactive command for additional information on sort column highlighting.

   5e. FILTERING in a Window
       You  can use this `Other Filter' feature to establish selection criteria which will then determine which tasks
       are shown in the `current' window.  Such filters can be made presistent if preserved in the rcfile via the 'W'
       interactive command.

       Establishing a filter requires: 1) a field name; 2) an operator; and 3) a selection value, as a minimum.  This
       is the most complex of top's user input requirements so, when you make a mistake, command recall will be  your
       friend.  Remember the Up/Down arrow keys or their aliases when prompted for input.

       Filter Basics

          1. field names are case sensitive and spelled as in the header

          2. selection values need not comprise the full displayed field

          3. a selection is either case insensitive or sensitive to case

          4. the default is inclusion, prepending `!' denotes exclusions

          5. multiple selection criteria can be applied to a task window

          6. inclusion and exclusion criteria can be used simultaneously

          7. the 1 equality and 2 relational filters can be freely mixed

          8. separate unique filters are maintained for each task window

          If  a  field is not turned on or is not currently in view, then your selection criteria will not affect the
          display.  Later, should a filtered field become visible, the selection criteria will then be applied.

       Keyboard Summary

         o  :Other-Filter (lower case)
             You will be prompted to establish a filter that ignores case when matching.

         O  :Other-Filter (upper case)
             You will be prompted to establish a case sensitive filter.

        ^O  :Show-Active-Filters (Ctrl key + `o')
             This can serve as a reminder of which filters are active in the `current' window.   A  summary  will  be
             shown on the message line until you press the <Enter> key.

         =  :Reset-Filtering in current window
             This  clears  all  of your selection criteria in the `current' window.  It also has additional impact so
             please see topic 4a. GLOBAL Commands.

         +  :Reset-Filtering in all windows
             This clears the selection criteria in all windows, assuming you are in alternate-display mode.  As  with
             the  `='  interactive  command,  it  too  has additional consequences so you might wish to see topic 5b.
             COMMANDS for Windows.

       Input Requirements

          When prompted for selection criteria, the data you provide must  take  one  of  two  forms.   There  are  3
          required  pieces  of  information,  with a 4th as optional.  These examples use spaces for clarity but your
          input generally would not.
                  #1           #2  #3              ( required )
                  Field-Name   ?   include-if-value
               !  Field-Name   ?   exclude-if-value
               #4                                  ( optional )

          Items #1, #3 and #4 should be self-explanatory.  Item #2 represents  both  a  required  delimiter  and  the
          operator which must be one of either equality (`=') or relation (`<' or `>').

          The  `='  equality  operator  requires  only  a  partial  match  and  that can reduce your `if-value' input
          requirements.  The `>' or `<' relational operators always employ  string  comparisons,  even  with  numeric
          fields.   They  are  designed to work with a field's default justification and with homogeneous data.  When
          some field's numeric amounts have been subjected to scaling while others have not, that data is  no  longer
          homogeneous.

          If  you  establish a relational filter and you have changed the default Numeric or Character justification,
          that filter is likely to fail.  When a relational filter is applied to a memory  field  and  you  have  not
          changed  the scaling, it may produce misleading results.  This happens, for example, because `100.0m' (MiB)
          would appear greater than `1.000g' (GiB) when compared as strings.

          If your filtered results appear suspect, simply altering justification  or  scaling  may  yet  achieve  the
          desired objective.  See the `j', `J' and `e' interactive commands for additional information.

       Potential Problems

          These  GROUP  filters  could produce the exact same results or the second one might not display anything at
          all, just a blank task window.
               GROUP=root        ( only the same results when )
               GROUP=ROOT        ( invoked via lower case `o' )

          Either of these RES filters might yield inconsistent and/or misleading results, depending  on  the  current
          memory scaling factor.  Or both filters could produce the exact same results.
               RES>9999          ( only the same results when )
               !RES<10000        ( memory scaling is at `KiB' )

          This  nMin  filter  illustrates  a  problem unique to scalable fields.  This particular field can display a
          maximum of 4 digits, beyond which values are automatically scaled  to  KiB  or  above.   So  while  amounts
          greater than 9999 exist, they will appear as 2.6m, 197k, etc.
               nMin>9999         ( always a blank task window )

       Potential Solutions

          These  examples  illustrate  how  Other  Filtering  can be creatively applied to achieve almost any desired
          result.  Single quotes are sometimes shown to delimit the spaces which are part of a filter or to represent
          a  request  for status (^O) accurately.  But if you used them with if-values in real life, no matches would
          be found.

          Assuming field nTH is displayed, the first filter will result in only multi-threaded processes being shown.
          It  also reminds us that a trailing space is part of every displayed field.  The second filter achieves the
          exact same results with less typing.
               !nTH=` 1 '                ( ' for clarity only )
               nTH>1                     ( same with less i/p )

          With Forest View mode active and the COMMAND column  in  view,  this  filter  effectively  collapses  child
          processes so that just 3 levels are shown.
               !COMMAND=`       `- '     ( ' for clarity only )

          The  final two filters appear as in response to the status request key (^O).  In reality, each filter would
          have required separate input.  The PR example shows the two concurrent filters necessary to  display  tasks
          with  priorities of 20 or more, since some might be negative.  Then by exploiting trailing spaces, the nMin
          series of filters could achieve the failed `9999' objective discussed above.
               `PR>20' + `!PR=-'         ( 2 for right result )
               `!nMin=0 ' + `!nMin=1 ' + `!nMin=2 ' + `!nMin=3 ' ...

       Note: Whenever Other Filtering is active in a window, top will turn column highlighting Off to  prevent  false
       matches  on  internal  non-display  escape  sequences.  Such highlighting will be restored when a window is no
       longer subject to filtering.  See the `x' interactive  command  for  additional  information  on  sort  column
       highlighting.

6. FILES
   6a. PERSONAL Configuration File
       This file is created or updated via the 'W' interactive command.

       The legacy version is written as `$HOME/.your-name-4-top' + `rc' with a leading period.

       A newly created configuration file is written as procps/your-name-4-top' + `rc' without a leading period.  The
       procps directory will be subordinate  to  either  $XDG_CONFIG_HOME  when  set  as  an  absolute  path  or  the
       $HOME/.config directory.

       While not intended to be edited manually, here is the general layout:
           global   # line  1: the program name/alias notation
             "      # line  2: id,altscr,irixps,delay,curwin
           per ea   # line  a: winname,fieldscur
           window   # line  b: winflags,sortindx,maxtasks,etc
             "      # line  c: summclr,msgsclr,headclr,taskclr
           global   # line 15: additional miscellaneous settings
             "      # any remaining lines are devoted to optional
             "      # active 'other filters' discussed in section 5e above
             "      # plus 'inspect' entries discussed in section 6b below

       If  a  valid  absolute  path to the rcfile cannot be established, customizations made to a running top will be
       impossible to preserve.

   6b. ADDING INSPECT Entries
       To exploit the `Y' interactive command, you must add entries at the end  of  the  top  personal  configuration
       file.   Such  entries  simply  reflect a file to be read or command/pipeline to be executed whose results will
       then be displayed in a separate scrollable, searchable window.

       If you don't know the location or name of your top rcfile, use the `W' interactive command to rewrite  it  and
       note those details.

       Inspect entries can be added with a redirected echo or by editing the configuration file.  Redirecting an echo
       risks overwriting the rcfile should it replace (>) rather than append (>>) to  that  file.   Conversely,  when
       using  an editor care must be taken not to corrupt existing lines, some of which will contain unprintable data
       or unusual characters.

       Those Inspect entries beginning with a `#' character are  ignored,  regardless  of  content.   Otherwise  they
       consist of the following 3 elements, each of which must be separated by a tab character (thus 2 `\t' total):

         .type:  literal `file' or `pipe'
         .name:  selection shown on the Inspect screen
         .fmts:  string representing a path or command

       The  two  types  of  Inspect  entries are not interchangeable.  Those designated `file' will be accessed using
       fopen and must reference a single file in the `.fmts' element.  Entries specifying `pipe' will  employ  popen,
       their `.fmts' element could contain many pipelined commands and, none can be interactive.

       If  the  file  or  pipeline  represented  in  your  `.fmts' deals with the specific PID input or accepted when
       prompted, then the format string must also contain the `%d' specifier, as these examples illustrate.

         .fmts=  /proc/%d/numa_maps
         .fmts=  lsof -P -p %d

       For `pipe' type entries only, you may also wish to redirect stderr to stdout for a more comprehensive  result.
       Thus the format string becomes:

         .fmts=  pmap -x %d 2>&1

       Here  are  examples of both types of Inspect entries as they might appear in the rcfile.  The first entry will
       be ignored due to the initial `#' character.  For clarity, the pseudo tab depictions (^I) are surrounded by an
       extra space but the actual tabs would not be.

         # pipe ^I Sockets ^I lsof -n -P -i 2>&1
         pipe ^I Open Files ^I lsof -P -p %d 2>&1
         file ^I NUMA Info ^I /proc/%d/numa_maps
         pipe ^I Log ^I tail -n100 /var/log/syslog | sort -Mr

       Except  for  the  commented  entry  above,  these  next  examples show what could be echoed to achieve similar
       results, assuming the rcfile name was `.toprc'.  However, due to the embedded tab characters,  each  of  these
       lines  should  be  preceded by `/bin/echo -e', not just a simple an `echo', to enable backslash interpretation
       regardless of which shell you use.

         "pipe\tOpen Files\tlsof -P -p %d 2>&1" >> ~/.toprc
         "file\tNUMA Info\t/proc/%d/numa_maps" >> ~/.toprc
         "pipe\tLog\ttail -n200 /var/log/syslog | sort -Mr" >> ~/.toprc

       If any inspect entry you create produces output with unprintable characters they will be displayed  in  either
       the  ^C  notation or hexadecimal <FF> form, depending on their value.  This applies to tab characters as well,
       which will show as `^I'.  If you want a truer representation, any  embedded  tabs  should  be  expanded.   The
       following  example  takes what could have been a `file' entry but employs a `pipe' instead so as to expand the
       embedded tabs.

         # next would have contained `\t' ...
         # file ^I <your_name> ^I /proc/%d/status
         # but this will eliminate embedded `\t' ...
         pipe ^I <your_name> ^I cat /proc/%d/status | expand -

       Note: Some programs might rely on SIGINT to end.  Therefore, if a `pipe' such as the following is established,
       one  must use Ctrl-C to terminate it in order to review the results.  This is the single occasion where a `^C'
       will not also terminate top.

         pipe ^I Trace ^I /usr/bin/strace -p %d 2>&1

       Lastly, while `pipe' type entries have been discussed in terms of pipelines and commands, there is nothing  to
       prevent  you  from including  shell scripts as well.  Perhaps even newly created scripts designed specifically
       for the `Y' interactive command.

       For example, as the number of your Inspect entries grows over time, the `Options:' row will be truncated  when
       screen  width  is  exceeded.   That  does  not  affect operation other than to make some selections invisible.
       However, if some choices are lost to truncation but you want to see more options, there is  an  easy  solution
       hinted at below.

         Inspection Pause at pid ...
         Use:  left/right then <Enter> ...
         Options:  help  1  2  3  4  5  6  7  8  9  10  11 ...

       The  entries in the top rcfile would have a number for the `.name' element and the `help' entry would identify
       a shell script you've written explaining what those numbered selections actually mean.  In that way, many more
       choices can be made visible.

   6c. SYSTEM Configuration File
       This  configuration  file  represents defaults for users who have not saved their own configuration file.  The
       format mirrors exactly the personal configuration file and can also include  `inspect'  entries  as  explained
       above.

       Creating it is a simple process.

       1.  Configure top appropriately for your installation and preserve that configuration with the `W' interactive
       command.

       2. Add and test any desired `inspect' entries.

       3. Copy that configuration file to the /etc/ directory as `topdefaultrc'.

   6d. SYSTEM Restrictions File
       The presence of this file will influence which version of the help screen is shown to an ordinary user.

       More importantly, it will limit what ordinary users are allowed to do when top is running.  They will  not  be
       able to issue the following commands.
           k        Kill a task
           r        Renice a task
           d or s   Change delay/sleep interval

       This  configuration  file  is  not  created by top.  Rather, it is created manually and placed it in the /etc/
       directory as `toprc'.

       It should have exactly two lines, as shown in this example:
           s        # line 1: secure mode switch
           5.0      # line 2: delay interval in seconds

7. STUPID TRICKS Sampler
       Many of these tricks work best when you give top a scheduling boost.  So plan on  starting  him  with  a  nice
       value of -10, assuming you've got the authority.

   7a. Kernel Magic
       For these stupid tricks, top needs full-screen mode.

       •  The  user  interface, through prompts and help, intentionally implies that the delay interval is limited to
          tenths of a second.  However, you're free to set any desired delay.  If  you  want  to  see  Linux  at  his
          scheduling best, try a delay of .09 seconds or less.

          For this experiment, under x-windows open an xterm and maximize it.  Then do the following:
            . provide a scheduling boost and tiny delay via:
                nice -n -10 top -d.09
            . keep sorted column highlighting Off so as to
              minimize path length
            . turn On reverse row highlighting for emphasis
            . try various sort columns (TIME/MEM work well),
              and normal or reverse sorts to bring the most
              active processes into view

          What  you'll  see  is  a  very  busy  Linux  doing  what he's always done for you, but there was no program
          available to illustrate this.

       •  Under an xterm using `white-on-black' colors, on top's Color Mapping screen set the task color to black and
          be  sure  that  task  highlighting  is  set to bold, not reverse.  Then set the delay interval to around .3
          seconds.

          After bringing the most active processes into view, what you'll see are the  ghostly  images  of  just  the
          currently running tasks.

       •  Delete  the  existing rcfile, or create a new symlink.  Start this new version then type `T' (a secret key,
          see topic 4c. Task Area Commands, SORTING) followed by `W' and `q'.  Finally, restart the program with  -d0
          (zero delay).

          Your  display  will be refreshed at three times the rate of the former top, a 300% speed advantage.  As top
          climbs the TIME ladder, be as patient as you can while speculating on whether or not top  will  ever  reach
          the top.

   7b. Bouncing Windows
       For these stupid tricks, top needs alternate-display mode.

       •  With  3  or  4 task displays visible, pick any window other than the last and turn idle processes Off using
          the `i' command toggle.  Depending on where you applied `i', sometimes several task displays  are  bouncing
          and sometimes it's like an accordion, as top tries his best to allocate space.

       •  Set  each window's summary lines differently: one with no memory (`m'); another with no states (`t'); maybe
          one with nothing at all, just the message line.  Then hold down  `a'  or  `w'  and  watch  a  variation  on
          bouncing windows  --  hopping windows.

       •  Display  all  4  windows  and  for  each,  in turn, set idle processes to Off using the `i' command toggle.
          You've just entered the "extreme bounce" zone.

   7c. The Big Bird Window
       This stupid trick also requires alternate-display mode.

       •  Display all 4 windows and make sure that 1:Def is the `current' window.  Then, keep increasing window  size
          with the `n' interactive command until all the other task displays are "pushed out of the nest".

          When they've all been displaced, toggle between all visible/invisible windows using the `_' command toggle.
          Then ponder this:
             is top fibbing or telling honestly your imposed truth?

   7d. The Ol' Switcheroo
       This stupid trick works best without alternate-display mode, since justification is active  on  a  per  window
       basis.

       •  Start top and make COMMAND the last (rightmost) column displayed.  If necessary, use the `c' command toggle
          to display command lines and ensure that forest view mode is active with the `V' command toggle.

          Then use the up/down arrow keys to position the display so that some truncated command lines are shown (`+'
          in last position).  You may have to resize your xterm to produce truncation.

          Lastly, use the `j' command toggle to make the COMMAND column right justified.

          Now  use  the  right  arrow  key  to  reach the COMMAND column.  Continuing with the right arrow key, watch
          closely the direction of travel for the command lines being shown.

             some lines travel left, while others travel right

             eventually all lines will Switcheroo, and move right

8. BUGS
       Please send bug reports to ⟨procps@freelists.org⟩.

9. SEE Also
       free(1), ps(1), uptime(1), atop(1), slabtop(1), vmstat(8), w(1)

procps-ng                                           September 2020                                             TOP(1)

================================================================================

COMMAND: ssh
SSH(1)                                       BSD General Commands Manual                                       SSH(1)

NAME
     ssh — OpenSSH remote login client

SYNOPSIS
     ssh [-46AaCfGgKkMNnqsTtVvXxYy] [-B bind_interface] [-b bind_address] [-c cipher_spec] [-D [bind_address:]port]
         [-E log_file] [-e escape_char] [-F configfile] [-I pkcs11] [-i identity_file] [-J destination] [-L address]
         [-l login_name] [-m mac_spec] [-O ctl_cmd] [-o option] [-p port] [-Q query_option] [-R address]
         [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]] destination [command [argument ...]]

DESCRIPTION
     ssh (SSH client) is a program for logging into a remote machine and for executing commands on a remote machine.
     It is intended to provide secure encrypted communications between two untrusted hosts over an insecure network.
     X11 connections, arbitrary TCP ports and UNIX-domain sockets can also be forwarded over the secure channel.

     ssh connects and logs into the specified destination, which may be specified as either [user@]hostname or a URI
     of the form ssh://[user@]hostname[:port].  The user must prove their identity to the remote machine using one of
     several methods (see below).

     If a command is specified, it will be executed on the remote host instead of a login shell.  A complete command
     line may be specified as command, or it may have additional arguments.  If supplied, the arguments will be ap‐
     pended to the command, separated by spaces, before it is sent to the server to be executed.

     The options are as follows:

     -4      Forces ssh to use IPv4 addresses only.

     -6      Forces ssh to use IPv6 addresses only.

     -A      Enables forwarding of connections from an authentication agent such as ssh-agent(1).  This can also be
             specified on a per-host basis in a configuration file.

             Agent forwarding should be enabled with caution.  Users with the ability to bypass file permissions on
             the remote host (for the agent's UNIX-domain socket) can access the local agent through the forwarded
             connection.  An attacker cannot obtain key material from the agent, however they can perform operations
             on the keys that enable them to authenticate using the identities loaded into the agent.  A safer alter‐
             native may be to use a jump host (see -J).

     -a      Disables forwarding of the authentication agent connection.

     -B bind_interface
             Bind to the address of bind_interface before attempting to connect to the destination host.  This is
             only useful on systems with more than one address.

     -b bind_address
             Use bind_address on the local machine as the source address of the connection.  Only useful on systems
             with more than one address.

     -C      Requests compression of all data (including stdin, stdout, stderr, and data for forwarded X11, TCP and
             UNIX-domain connections).  The compression algorithm is the same used by gzip(1).  Compression is desir‐
             able on modem lines and other slow connections, but will only slow down things on fast networks.  The
             default value can be set on a host-by-host basis in the configuration files; see the Compression option.

     -c cipher_spec
             Selects the cipher specification for encrypting the session.  cipher_spec is a comma-separated list of
             ciphers listed in order of preference.  See the Ciphers keyword in ssh_config(5) for more information.

     -D [bind_address:]port
             Specifies a local “dynamic” application-level port forwarding.  This works by allocating a socket to
             listen to port on the local side, optionally bound to the specified bind_address.  Whenever a connection
             is made to this port, the connection is forwarded over the secure channel, and the application protocol
             is then used to determine where to connect to from the remote machine.  Currently the SOCKS4 and SOCKS5
             protocols are supported, and ssh will act as a SOCKS server.  Only root can forward privileged ports.
             Dynamic port forwardings can also be specified in the configuration file.

             IPv6 addresses can be specified by enclosing the address in square brackets.  Only the superuser can
             forward privileged ports.  By default, the local port is bound in accordance with the GatewayPorts set‐
             ting.  However, an explicit bind_address may be used to bind the connection to a specific address.  The
             bind_address of “localhost” indicates that the listening port be bound for local use only, while an
             empty address or ‘*’ indicates that the port should be available from all interfaces.

     -E log_file
             Append debug logs to log_file instead of standard error.

     -e escape_char
             Sets the escape character for sessions with a pty (default: ‘~’).  The escape character is only recog‐
             nized at the beginning of a line.  The escape character followed by a dot (‘.’) closes the connection;
             followed by control-Z suspends the connection; and followed by itself sends the escape character once.
             Setting the character to “none” disables any escapes and makes the session fully transparent.

     -F configfile
             Specifies an alternative per-user configuration file.  If a configuration file is given on the command
             line, the system-wide configuration file (/etc/ssh/ssh_config) will be ignored.  The default for the
             per-user configuration file is ~/.ssh/config.  If set to “none”, no configuration files will be read.

     -f      Requests ssh to go to background just before command execution.  This is useful if ssh is going to ask
             for passwords or passphrases, but the user wants it in the background.  This implies -n.  The recom‐
             mended way to start X11 programs at a remote site is with something like ssh -f host xterm.

             If the ExitOnForwardFailure configuration option is set to “yes”, then a client started with -f will
             wait for all remote port forwards to be successfully established before placing itself in the back‐
             ground.  Refer to the description of ForkAfterAuthentication in ssh_config(5) for details.

     -G      Causes ssh to print its configuration after evaluating Host and Match blocks and exit.

     -g      Allows remote hosts to connect to local forwarded ports.  If used on a multiplexed connection, then this
             option must be specified on the master process.

     -I pkcs11
             Specify the PKCS#11 shared library ssh should use to communicate with a PKCS#11 token providing keys for
             user authentication.

     -i identity_file
             Selects a file from which the identity (private key) for public key authentication is read.  You can
             also specify a public key file to use the corresponding private key that is loaded in ssh-agent(1) when
             the private key file is not present locally.  The default is ~/.ssh/id_rsa, ~/.ssh/id_ecdsa,
             ~/.ssh/id_ecdsa_sk, ~/.ssh/id_ed25519, ~/.ssh/id_ed25519_sk and ~/.ssh/id_dsa.  Identity files may also
             be specified on a per-host basis in the configuration file.  It is possible to have multiple -i options
             (and multiple identities specified in configuration files).  If no certificates have been explicitly
             specified by the CertificateFile directive, ssh will also try to load certificate information from the
             filename obtained by appending -cert.pub to identity filenames.

     -J destination
             Connect to the target host by first making a ssh connection to the jump host described by destination
             and then establishing a TCP forwarding to the ultimate destination from there.  Multiple jump hops may
             be specified separated by comma characters.  This is a shortcut to specify a ProxyJump configuration di‐
             rective.  Note that configuration directives supplied on the command-line generally apply to the desti‐
             nation host and not any specified jump hosts.  Use ~/.ssh/config to specify configuration for jump
             hosts.

     -K      Enables GSSAPI-based authentication and forwarding (delegation) of GSSAPI credentials to the server.

     -k      Disables forwarding (delegation) of GSSAPI credentials to the server.

     -L [bind_address:]port:host:hostport
     -L [bind_address:]port:remote_socket
     -L local_socket:host:hostport
     -L local_socket:remote_socket
             Specifies that connections to the given TCP port or Unix socket on the local (client) host are to be
             forwarded to the given host and port, or Unix socket, on the remote side.  This works by allocating a
             socket to listen to either a TCP port on the local side, optionally bound to the specified bind_address,
             or to a Unix socket.  Whenever a connection is made to the local port or socket, the connection is for‐
             warded over the secure channel, and a connection is made to either host port hostport, or the Unix
             socket remote_socket, from the remote machine.

             Port forwardings can also be specified in the configuration file.  Only the superuser can forward privi‐
             leged ports.  IPv6 addresses can be specified by enclosing the address in square brackets.

             By default, the local port is bound in accordance with the GatewayPorts setting.  However, an explicit
             bind_address may be used to bind the connection to a specific address.  The bind_address of “localhost”
             indicates that the listening port be bound for local use only, while an empty address or ‘*’ indicates
             that the port should be available from all interfaces.

     -l login_name
             Specifies the user to log in as on the remote machine.  This also may be specified on a per-host basis
             in the configuration file.

     -M      Places the ssh client into “master” mode for connection sharing.  Multiple -M options places ssh into
             “master” mode but with confirmation required using ssh-askpass(1) before each operation that changes the
             multiplexing state (e.g. opening a new session).  Refer to the description of ControlMaster in
             ssh_config(5) for details.

     -m mac_spec
             A comma-separated list of MAC (message authentication code) algorithms, specified in order of prefer‐
             ence.  See the MACs keyword for more information.

     -N      Do not execute a remote command.  This is useful for just forwarding ports.  Refer to the description of
             SessionType in ssh_config(5) for details.

     -n      Redirects stdin from /dev/null (actually, prevents reading from stdin).  This must be used when ssh is
             run in the background.  A common trick is to use this to run X11 programs on a remote machine.  For ex‐
             ample, ssh -n shadows.cs.hut.fi emacs & will start an emacs on shadows.cs.hut.fi, and the X11 connection
             will be automatically forwarded over an encrypted channel.  The ssh program will be put in the back‐
             ground.  (This does not work if ssh needs to ask for a password or passphrase; see also the -f option.)
             Refer to the description of StdinNull in ssh_config(5) for details.

     -O ctl_cmd
             Control an active connection multiplexing master process.  When the -O option is specified, the ctl_cmd
             argument is interpreted and passed to the master process.  Valid commands are: “check” (check that the
             master process is running), “forward” (request forwardings without command execution), “cancel” (cancel
             forwardings), “exit” (request the master to exit), and “stop” (request the master to stop accepting fur‐
             ther multiplexing requests).

     -o option
             Can be used to give options in the format used in the configuration file.  This is useful for specifying
             options for which there is no separate command-line flag.  For full details of the options listed below,
             and their possible values, see ssh_config(5).

                   AddKeysToAgent
                   AddressFamily
                   BatchMode
                   BindAddress
                   CanonicalDomains
                   CanonicalizeFallbackLocal
                   CanonicalizeHostname
                   CanonicalizeMaxDots
                   CanonicalizePermittedCNAMEs
                   CASignatureAlgorithms
                   CertificateFile
                   CheckHostIP
                   Ciphers
                   ClearAllForwardings
                   Compression
                   ConnectionAttempts
                   ConnectTimeout
                   ControlMaster
                   ControlPath
                   ControlPersist
                   DynamicForward
                   EscapeChar
                   ExitOnForwardFailure
                   FingerprintHash
                   ForkAfterAuthentication
                   ForwardAgent
                   ForwardX11
                   ForwardX11Timeout
                   ForwardX11Trusted
                   GatewayPorts
                   GlobalKnownHostsFile
                   GSSAPIAuthentication
                   GSSAPIKeyExchange
                   GSSAPIClientIdentity
                   GSSAPIDelegateCredentials
                   GSSAPIKexAlgorithms
                   GSSAPIRenewalForcesRekey
                   GSSAPIServerIdentity
                   GSSAPITrustDns
                   HashKnownHosts
                   Host
                   HostbasedAcceptedAlgorithms
                   HostbasedAuthentication
                   HostKeyAlgorithms
                   HostKeyAlias
                   Hostname
                   IdentitiesOnly
                   IdentityAgent
                   IdentityFile
                   IPQoS
                   KbdInteractiveAuthentication
                   KbdInteractiveDevices
                   KexAlgorithms
                   KnownHostsCommand
                   LocalCommand
                   LocalForward
                   LogLevel
                   MACs
                   Match
                   NoHostAuthenticationForLocalhost
                   NumberOfPasswordPrompts
                   PasswordAuthentication
                   PermitLocalCommand
                   PermitRemoteOpen
                   PKCS11Provider
                   Port
                   PreferredAuthentications
                   ProxyCommand
                   ProxyJump
                   ProxyUseFdpass
                   PubkeyAcceptedAlgorithms
                   PubkeyAuthentication
                   RekeyLimit
                   RemoteCommand
                   RemoteForward
                   RequestTTY
                   SendEnv
                   ServerAliveInterval
                   ServerAliveCountMax
                   SessionType
                   SetEnv
                   StdinNull
                   StreamLocalBindMask
                   StreamLocalBindUnlink
                   StrictHostKeyChecking
                   TCPKeepAlive
                   Tunnel
                   TunnelDevice
                   UpdateHostKeys
                   User
                   UserKnownHostsFile
                   VerifyHostKeyDNS
                   VisualHostKey
                   XAuthLocation

     -p port
             Port to connect to on the remote host.  This can be specified on a per-host basis in the configuration
             file.

     -Q query_option
             Queries for the algorithms supported by one of the following features: cipher (supported symmetric ci‐
             phers), cipher-auth (supported symmetric ciphers that support authenticated encryption), help (supported
             query terms for use with the -Q flag), mac (supported message integrity codes), kex (key exchange algo‐
             rithms), kex-gss (GSSAPI key exchange algorithms), key (key types), key-cert (certificate key types),
             key-plain (non-certificate key types), key-sig (all key types and signature algorithms),
             protocol-version (supported SSH protocol versions), and sig (supported signature algorithms).  Alterna‐
             tively, any keyword from ssh_config(5) or sshd_config(5) that takes an algorithm list may be used as an
             alias for the corresponding query_option.

     -q      Quiet mode.  Causes most warning and diagnostic messages to be suppressed.

     -R [bind_address:]port:host:hostport
     -R [bind_address:]port:local_socket
     -R remote_socket:host:hostport
     -R remote_socket:local_socket
     -R [bind_address:]port
             Specifies that connections to the given TCP port or Unix socket on the remote (server) host are to be
             forwarded to the local side.

             This works by allocating a socket to listen to either a TCP port or to a Unix socket on the remote side.
             Whenever a connection is made to this port or Unix socket, the connection is forwarded over the secure
             channel, and a connection is made from the local machine to either an explicit destination specified by
             host port hostport, or local_socket, or, if no explicit destination was specified, ssh will act as a
             SOCKS 4/5 proxy and forward connections to the destinations requested by the remote SOCKS client.

             Port forwardings can also be specified in the configuration file.  Privileged ports can be forwarded
             only when logging in as root on the remote machine.  IPv6 addresses can be specified by enclosing the
             address in square brackets.

             By default, TCP listening sockets on the server will be bound to the loopback interface only.  This may
             be overridden by specifying a bind_address.  An empty bind_address, or the address ‘*’, indicates that
             the remote socket should listen on all interfaces.  Specifying a remote bind_address will only succeed
             if the server's GatewayPorts option is enabled (see sshd_config(5)).

             If the port argument is ‘0’, the listen port will be dynamically allocated on the server and reported to
             the client at run time.  When used together with -O forward the allocated port will be printed to the
             standard output.

     -S ctl_path
             Specifies the location of a control socket for connection sharing, or the string “none” to disable con‐
             nection sharing.  Refer to the description of ControlPath and ControlMaster in ssh_config(5) for de‐
             tails.

     -s      May be used to request invocation of a subsystem on the remote system.  Subsystems facilitate the use of
             SSH as a secure transport for other applications (e.g. sftp(1)).  The subsystem is specified as the re‐
             mote command.  Refer to the description of SessionType in ssh_config(5) for details.

     -T      Disable pseudo-terminal allocation.

     -t      Force pseudo-terminal allocation.  This can be used to execute arbitrary screen-based programs on a re‐
             mote machine, which can be very useful, e.g. when implementing menu services.  Multiple -t options force
             tty allocation, even if ssh has no local tty.

     -V      Display the version number and exit.

     -v      Verbose mode.  Causes ssh to print debugging messages about its progress.  This is helpful in debugging
             connection, authentication, and configuration problems.  Multiple -v options increase the verbosity.
             The maximum is 3.

     -W host:port
             Requests that standard input and output on the client be forwarded to host on port over the secure chan‐
             nel.  Implies -N, -T, ExitOnForwardFailure and ClearAllForwardings, though these can be overridden in
             the configuration file or using -o command line options.

     -w local_tun[:remote_tun]
             Requests tunnel device forwarding with the specified tun(4) devices between the client (local_tun) and
             the server (remote_tun).

             The devices may be specified by numerical ID or the keyword “any”, which uses the next available tunnel
             device.  If remote_tun is not specified, it defaults to “any”.  See also the Tunnel and TunnelDevice di‐
             rectives in ssh_config(5).

             If the Tunnel directive is unset, it will be set to the default tunnel mode, which is “point-to-point”.
             If a different Tunnel forwarding mode it desired, then it should be specified before -w.

     -X      Enables X11 forwarding.  This can also be specified on a per-host basis in a configuration file.

             X11 forwarding should be enabled with caution.  Users with the ability to bypass file permissions on the
             remote host (for the user's X authorization database) can access the local X11 display through the for‐
             warded connection.  An attacker may then be able to perform activities such as keystroke monitoring.

             For this reason, X11 forwarding is subjected to X11 SECURITY extension restrictions by default.  Refer
             to the ssh -Y option and the ForwardX11Trusted directive in ssh_config(5) for more information.

             (Debian-specific: X11 forwarding is not subjected to X11 SECURITY extension restrictions by default, be‐
             cause too many programs currently crash in this mode.  Set the ForwardX11Trusted option to “no” to re‐
             store the upstream behaviour.  This may change in future depending on client-side improvements.)

     -x      Disables X11 forwarding.

     -Y      Enables trusted X11 forwarding.  Trusted X11 forwardings are not subjected to the X11 SECURITY extension
             controls.

             (Debian-specific: In the default configuration, this option is equivalent to -X, since ForwardX11Trusted
             defaults to “yes” as described above.  Set the ForwardX11Trusted option to “no” to restore the upstream
             behaviour.  This may change in future depending on client-side improvements.)

     -y      Send log information using the syslog(3) system module.  By default this information is sent to stderr.

     ssh may additionally obtain configuration data from a per-user configuration file and a system-wide configura‐
     tion file.  The file format and configuration options are described in ssh_config(5).

AUTHENTICATION
     The OpenSSH SSH client supports SSH protocol 2.

     The methods available for authentication are: GSSAPI-based authentication, host-based authentication, public key
     authentication, keyboard-interactive authentication, and password authentication.  Authentication methods are
     tried in the order specified above, though PreferredAuthentications can be used to change the default order.

     Host-based authentication works as follows: If the machine the user logs in from is listed in /etc/hosts.equiv
     or /etc/ssh/shosts.equiv on the remote machine, the user is non-root and the user names are the same on both
     sides, or if the files ~/.rhosts or ~/.shosts exist in the user's home directory on the remote machine and con‐
     tain a line containing the name of the client machine and the name of the user on that machine, the user is con‐
     sidered for login.  Additionally, the server must be able to verify the client's host key (see the description
     of /etc/ssh/ssh_known_hosts and ~/.ssh/known_hosts, below) for login to be permitted.  This authentication
     method closes security holes due to IP spoofing, DNS spoofing, and routing spoofing.  [Note to the administra‐
     tor: /etc/hosts.equiv, ~/.rhosts, and the rlogin/rsh protocol in general, are inherently insecure and should be
     disabled if security is desired.]

     Public key authentication works as follows: The scheme is based on public-key cryptography, using cryptosystems
     where encryption and decryption are done using separate keys, and it is unfeasible to derive the decryption key
     from the encryption key.  The idea is that each user creates a public/private key pair for authentication pur‐
     poses.  The server knows the public key, and only the user knows the private key.  ssh implements public key au‐
     thentication protocol automatically, using one of the DSA, ECDSA, Ed25519 or RSA algorithms.  The HISTORY sec‐
     tion of ssl(8) (on non-OpenBSD systems, see http://www.openbsd.org/cgi-bin/man.cgi?query=ssl&sektion=8#HISTORY)
     contains a brief discussion of the DSA and RSA algorithms.

     The file ~/.ssh/authorized_keys lists the public keys that are permitted for logging in.  When the user logs in,
     the ssh program tells the server which key pair it would like to use for authentication.  The client proves that
     it has access to the private key and the server checks that the corresponding public key is authorized to accept
     the account.

     The server may inform the client of errors that prevented public key authentication from succeeding after au‐
     thentication completes using a different method.  These may be viewed by increasing the LogLevel to DEBUG or
     higher (e.g. by using the -v flag).

     The user creates their key pair by running ssh-keygen(1).  This stores the private key in ~/.ssh/id_dsa (DSA),
     ~/.ssh/id_ecdsa (ECDSA), ~/.ssh/id_ecdsa_sk (authenticator-hosted ECDSA), ~/.ssh/id_ed25519 (Ed25519),
     ~/.ssh/id_ed25519_sk (authenticator-hosted Ed25519), or ~/.ssh/id_rsa (RSA) and stores the public key in
     ~/.ssh/id_dsa.pub (DSA), ~/.ssh/id_ecdsa.pub (ECDSA), ~/.ssh/id_ecdsa_sk.pub (authenticator-hosted ECDSA),
     ~/.ssh/id_ed25519.pub (Ed25519), ~/.ssh/id_ed25519_sk.pub (authenticator-hosted Ed25519), or ~/.ssh/id_rsa.pub
     (RSA) in the user's home directory.  The user should then copy the public key to ~/.ssh/authorized_keys in their
     home directory on the remote machine.  The authorized_keys file corresponds to the conventional ~/.rhosts file,
     and has one key per line, though the lines can be very long.  After this, the user can log in without giving the
     password.

     A variation on public key authentication is available in the form of certificate authentication: instead of a
     set of public/private keys, signed certificates are used.  This has the advantage that a single trusted certifi‐
     cation authority can be used in place of many public/private keys.  See the CERTIFICATES section of
     ssh-keygen(1) for more information.

     The most convenient way to use public key or certificate authentication may be with an authentication agent.
     See ssh-agent(1) and (optionally) the AddKeysToAgent directive in ssh_config(5) for more information.

     Keyboard-interactive authentication works as follows: The server sends an arbitrary "challenge" text and prompts
     for a response, possibly multiple times.  Examples of keyboard-interactive authentication include BSD Authenti‐
     cation (see login.conf(5)) and PAM (some non-OpenBSD systems).

     Finally, if other authentication methods fail, ssh prompts the user for a password.  The password is sent to the
     remote host for checking; however, since all communications are encrypted, the password cannot be seen by some‐
     one listening on the network.

     ssh automatically maintains and checks a database containing identification for all hosts it has ever been used
     with.  Host keys are stored in ~/.ssh/known_hosts in the user's home directory.  Additionally, the file
     /etc/ssh/ssh_known_hosts is automatically checked for known hosts.  Any new hosts are automatically added to the
     user's file.  If a host's identification ever changes, ssh warns about this and disables password authentication
     to prevent server spoofing or man-in-the-middle attacks, which could otherwise be used to circumvent the encryp‐
     tion.  The StrictHostKeyChecking option can be used to control logins to machines whose host key is not known or
     has changed.

     When the user's identity has been accepted by the server, the server either executes the given command in a non-
     interactive session or, if no command has been specified, logs into the machine and gives the user a normal
     shell as an interactive session.  All communication with the remote command or shell will be automatically en‐
     crypted.

     If an interactive session is requested ssh by default will only request a pseudo-terminal (pty) for interactive
     sessions when the client has one.  The flags -T and -t can be used to override this behaviour.

     If a pseudo-terminal has been allocated the user may use the escape characters noted below.

     If no pseudo-terminal has been allocated, the session is transparent and can be used to reliably transfer binary
     data.  On most systems, setting the escape character to “none” will also make the session transparent even if a
     tty is used.

     The session terminates when the command or shell on the remote machine exits and all X11 and TCP connections
     have been closed.

ESCAPE CHARACTERS
     When a pseudo-terminal has been requested, ssh supports a number of functions through the use of an escape char‐
     acter.

     A single tilde character can be sent as ~~ or by following the tilde by a character other than those described
     below.  The escape character must always follow a newline to be interpreted as special.  The escape character
     can be changed in configuration files using the EscapeChar configuration directive or on the command line by the
     -e option.

     The supported escapes (assuming the default ‘~’) are:

     ~.      Disconnect.

     ~^Z     Background ssh.

     ~#      List forwarded connections.

     ~&      Background ssh at logout when waiting for forwarded connection / X11 sessions to terminate.

     ~?      Display a list of escape characters.

     ~B      Send a BREAK to the remote system (only useful if the peer supports it).

     ~C      Open command line.  Currently this allows the addition of port forwardings using the -L, -R and -D op‐
             tions (see above).  It also allows the cancellation of existing port-forwardings with
             -KL[bind_address:]port for local, -KR[bind_address:]port for remote and -KD[bind_address:]port for dy‐
             namic port-forwardings.  !command allows the user to execute a local command if the PermitLocalCommand
             option is enabled in ssh_config(5).  Basic help is available, using the -h option.

     ~R      Request rekeying of the connection (only useful if the peer supports it).

     ~V      Decrease the verbosity (LogLevel) when errors are being written to stderr.

     ~v      Increase the verbosity (LogLevel) when errors are being written to stderr.

TCP FORWARDING
     Forwarding of arbitrary TCP connections over a secure channel can be specified either on the command line or in
     a configuration file.  One possible application of TCP forwarding is a secure connection to a mail server; an‐
     other is going through firewalls.

     In the example below, we look at encrypting communication for an IRC client, even though the IRC server it con‐
     nects to does not directly support encrypted communication.  This works as follows: the user connects to the re‐
     mote host using ssh, specifying the ports to be used to forward the connection.  After that it is possible to
     start the program locally, and ssh will encrypt and forward the connection to the remote server.

     The following example tunnels an IRC session from the client to an IRC server at “server.example.com”, joining
     channel “#users”, nickname “pinky”, using the standard IRC port, 6667:

         $ ssh -f -L 6667:localhost:6667 server.example.com sleep 10
         $ irc -c '#users' pinky IRC/127.0.0.1

     The -f option backgrounds ssh and the remote command “sleep 10” is specified to allow an amount of time (10 sec‐
     onds, in the example) to start the program which is going to use the tunnel.  If no connections are made within
     the time specified, ssh will exit.

X11 FORWARDING
     If the ForwardX11 variable is set to “yes” (or see the description of the -X, -x, and -Y options above) and the
     user is using X11 (the DISPLAY environment variable is set), the connection to the X11 display is automatically
     forwarded to the remote side in such a way that any X11 programs started from the shell (or command) will go
     through the encrypted channel, and the connection to the real X server will be made from the local machine.  The
     user should not manually set DISPLAY.  Forwarding of X11 connections can be configured on the command line or in
     configuration files.

     The DISPLAY value set by ssh will point to the server machine, but with a display number greater than zero.
     This is normal, and happens because ssh creates a “proxy” X server on the server machine for forwarding the con‐
     nections over the encrypted channel.

     ssh will also automatically set up Xauthority data on the server machine.  For this purpose, it will generate a
     random authorization cookie, store it in Xauthority on the server, and verify that any forwarded connections
     carry this cookie and replace it by the real cookie when the connection is opened.  The real authentication
     cookie is never sent to the server machine (and no cookies are sent in the plain).

     If the ForwardAgent variable is set to “yes” (or see the description of the -A and -a options above) and the
     user is using an authentication agent, the connection to the agent is automatically forwarded to the remote
     side.

VERIFYING HOST KEYS
     When connecting to a server for the first time, a fingerprint of the server's public key is presented to the
     user (unless the option StrictHostKeyChecking has been disabled).  Fingerprints can be determined using
     ssh-keygen(1):

           $ ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key

     If the fingerprint is already known, it can be matched and the key can be accepted or rejected.  If only legacy
     (MD5) fingerprints for the server are available, the ssh-keygen(1) -E option may be used to downgrade the fin‐
     gerprint algorithm to match.

     Because of the difficulty of comparing host keys just by looking at fingerprint strings, there is also support
     to compare host keys visually, using random art.  By setting the VisualHostKey option to “yes”, a small ASCII
     graphic gets displayed on every login to a server, no matter if the session itself is interactive or not.  By
     learning the pattern a known server produces, a user can easily find out that the host key has changed when a
     completely different pattern is displayed.  Because these patterns are not unambiguous however, a pattern that
     looks similar to the pattern remembered only gives a good probability that the host key is the same, not guaran‐
     teed proof.

     To get a listing of the fingerprints along with their random art for all known hosts, the following command line
     can be used:

           $ ssh-keygen -lv -f ~/.ssh/known_hosts

     If the fingerprint is unknown, an alternative method of verification is available: SSH fingerprints verified by
     DNS.  An additional resource record (RR), SSHFP, is added to a zonefile and the connecting client is able to
     match the fingerprint with that of the key presented.

     In this example, we are connecting a client to a server, “host.example.com”.  The SSHFP resource records should
     first be added to the zonefile for host.example.com:

           $ ssh-keygen -r host.example.com.

     The output lines will have to be added to the zonefile.  To check that the zone is answering fingerprint
     queries:

           $ dig -t SSHFP host.example.com

     Finally the client connects:

           $ ssh -o "VerifyHostKeyDNS ask" host.example.com
           [...]
           Matching host key fingerprint found in DNS.
           Are you sure you want to continue connecting (yes/no)?

     See the VerifyHostKeyDNS option in ssh_config(5) for more information.

SSH-BASED VIRTUAL PRIVATE NETWORKS
     ssh contains support for Virtual Private Network (VPN) tunnelling using the tun(4) network pseudo-device, allow‐
     ing two networks to be joined securely.  The sshd_config(5) configuration option PermitTunnel controls whether
     the server supports this, and at what level (layer 2 or 3 traffic).

     The following example would connect client network 10.0.50.0/24 with remote network 10.0.99.0/24 using a point-
     to-point connection from 10.1.1.1 to 10.1.1.2, provided that the SSH server running on the gateway to the remote
     network, at 192.168.1.15, allows it.

     On the client:

           # ssh -f -w 0:1 192.168.1.15 true
           # ifconfig tun0 10.1.1.1 10.1.1.2 netmask 255.255.255.252
           # route add 10.0.99.0/24 10.1.1.2

     On the server:

           # ifconfig tun1 10.1.1.2 10.1.1.1 netmask 255.255.255.252
           # route add 10.0.50.0/24 10.1.1.1

     Client access may be more finely tuned via the /root/.ssh/authorized_keys file (see below) and the
     PermitRootLogin server option.  The following entry would permit connections on tun(4) device 1 from user “jane”
     and on tun device 2 from user “john”, if PermitRootLogin is set to “forced-commands-only”:

       tunnel="1",command="sh /etc/netstart tun1" ssh-rsa ... jane
       tunnel="2",command="sh /etc/netstart tun2" ssh-rsa ... john

     Since an SSH-based setup entails a fair amount of overhead, it may be more suited to temporary setups, such as
     for wireless VPNs.  More permanent VPNs are better provided by tools such as ipsecctl(8) and isakmpd(8).

ENVIRONMENT
     ssh will normally set the following environment variables:

     DISPLAY               The DISPLAY variable indicates the location of the X11 server.  It is automatically set by
                           ssh to point to a value of the form “hostname:n”, where “hostname” indicates the host
                           where the shell runs, and ‘n’ is an integer ≥ 1.  ssh uses this special value to forward
                           X11 connections over the secure channel.  The user should normally not set DISPLAY explic‐
                           itly, as that will render the X11 connection insecure (and will require the user to manu‐
                           ally copy any required authorization cookies).

     HOME                  Set to the path of the user's home directory.

     LOGNAME               Synonym for USER; set for compatibility with systems that use this variable.

     MAIL                  Set to the path of the user's mailbox.

     PATH                  Set to the default PATH, as specified when compiling ssh.

     SSH_ASKPASS           If ssh needs a passphrase, it will read the passphrase from the current terminal if it was
                           run from a terminal.  If ssh does not have a terminal associated with it but DISPLAY and
                           SSH_ASKPASS are set, it will execute the program specified by SSH_ASKPASS and open an X11
                           window to read the passphrase.  This is particularly useful when calling ssh from a
                           .xsession or related script.  (Note that on some machines it may be necessary to redirect
                           the input from /dev/null to make this work.)

     SSH_ASKPASS_REQUIRE   Allows further control over the use of an askpass program.  If this variable is set to
                           “never” then ssh will never attempt to use one.  If it is set to “prefer”, then ssh will
                           prefer to use the askpass program instead of the TTY when requesting passwords.  Finally,
                           if the variable is set to “force”, then the askpass program will be used for all
                           passphrase input regardless of whether DISPLAY is set.

     SSH_AUTH_SOCK         Identifies the path of a UNIX-domain socket used to communicate with the agent.

     SSH_CONNECTION        Identifies the client and server ends of the connection.  The variable contains four
                           space-separated values: client IP address, client port number, server IP address, and
                           server port number.

     SSH_ORIGINAL_COMMAND  This variable contains the original command line if a forced command is executed.  It can
                           be used to extract the original arguments.

     SSH_TTY               This is set to the name of the tty (path to the device) associated with the current shell
                           or command.  If the current session has no tty, this variable is not set.

     SSH_TUNNEL            Optionally set by sshd(8) to contain the interface names assigned if tunnel forwarding was
                           requested by the client.

     SSH_USER_AUTH         Optionally set by sshd(8), this variable may contain a pathname to a file that lists the
                           authentication methods successfully used when the session was established, including any
                           public keys that were used.

     TZ                    This variable is set to indicate the present time zone if it was set when the daemon was
                           started (i.e. the daemon passes the value on to new connections).

     USER                  Set to the name of the user logging in.

     Additionally, ssh reads ~/.ssh/environment, and adds lines of the format “VARNAME=value” to the environment if
     the file exists and users are allowed to change their environment.  For more information, see the
     PermitUserEnvironment option in sshd_config(5).

FILES
     ~/.rhosts
             This file is used for host-based authentication (see above).  On some machines this file may need to be
             world-readable if the user's home directory is on an NFS partition, because sshd(8) reads it as root.
             Additionally, this file must be owned by the user, and must not have write permissions for anyone else.
             The recommended permission for most machines is read/write for the user, and not accessible by others.

     ~/.shosts
             This file is used in exactly the same way as .rhosts, but allows host-based authentication without per‐
             mitting login with rlogin/rsh.

     ~/.ssh/
             This directory is the default location for all user-specific configuration and authentication informa‐
             tion.  There is no general requirement to keep the entire contents of this directory secret, but the
             recommended permissions are read/write/execute for the user, and not accessible by others.

     ~/.ssh/authorized_keys
             Lists the public keys (DSA, ECDSA, Ed25519, RSA) that can be used for logging in as this user.  The for‐
             mat of this file is described in the sshd(8) manual page.  This file is not highly sensitive, but the
             recommended permissions are read/write for the user, and not accessible by others.

     ~/.ssh/config
             This is the per-user configuration file.  The file format and configuration options are described in
             ssh_config(5).  Because of the potential for abuse, this file must have strict permissions: read/write
             for the user, and not writable by others.  It may be group-writable provided that the group in question
             contains only the user.

     ~/.ssh/environment
             Contains additional definitions for environment variables; see ENVIRONMENT, above.

     ~/.ssh/id_dsa
     ~/.ssh/id_ecdsa
     ~/.ssh/id_ecdsa_sk
     ~/.ssh/id_ed25519
     ~/.ssh/id_ed25519_sk
     ~/.ssh/id_rsa
             Contains the private key for authentication.  These files contain sensitive data and should be readable
             by the user but not accessible by others (read/write/execute).  ssh will simply ignore a private key
             file if it is accessible by others.  It is possible to specify a passphrase when generating the key
             which will be used to encrypt the sensitive part of this file using AES-128.

     ~/.ssh/id_dsa.pub
     ~/.ssh/id_ecdsa.pub
     ~/.ssh/id_ecdsa_sk.pub
     ~/.ssh/id_ed25519.pub
     ~/.ssh/id_ed25519_sk.pub
     ~/.ssh/id_rsa.pub
             Contains the public key for authentication.  These files are not sensitive and can (but need not) be
             readable by anyone.

     ~/.ssh/known_hosts
             Contains a list of host keys for all hosts the user has logged into that are not already in the sys‐
             temwide list of known host keys.  See sshd(8) for further details of the format of this file.

     ~/.ssh/rc
             Commands in this file are executed by ssh when the user logs in, just before the user's shell (or com‐
             mand) is started.  See the sshd(8) manual page for more information.

     /etc/hosts.equiv
             This file is for host-based authentication (see above).  It should only be writable by root.

     /etc/ssh/shosts.equiv
             This file is used in exactly the same way as hosts.equiv, but allows host-based authentication without
             permitting login with rlogin/rsh.

     /etc/ssh/ssh_config
             Systemwide configuration file.  The file format and configuration options are described in
             ssh_config(5).

     /etc/ssh/ssh_host_key
     /etc/ssh/ssh_host_dsa_key
     /etc/ssh/ssh_host_ecdsa_key
     /etc/ssh/ssh_host_ed25519_key
     /etc/ssh/ssh_host_rsa_key
             These files contain the private parts of the host keys and are used for host-based authentication.

     /etc/ssh/ssh_known_hosts
             Systemwide list of known host keys.  This file should be prepared by the system administrator to contain
             the public host keys of all machines in the organization.  It should be world-readable.  See sshd(8) for
             further details of the format of this file.

     /etc/ssh/sshrc
             Commands in this file are executed by ssh when the user logs in, just before the user's shell (or com‐
             mand) is started.  See the sshd(8) manual page for more information.

EXIT STATUS
     ssh exits with the exit status of the remote command or with 255 if an error occurred.

SEE ALSO
     scp(1), sftp(1), ssh-add(1), ssh-agent(1), ssh-argv0(1), ssh-keygen(1), ssh-keyscan(1), tun(4), ssh_config(5),
     ssh-keysign(8), sshd(8)

STANDARDS
     S. Lehtinen and C. Lonvick, The Secure Shell (SSH) Protocol Assigned Numbers, RFC 4250, January 2006.

     T. Ylonen and C. Lonvick, The Secure Shell (SSH) Protocol Architecture, RFC 4251, January 2006.

     T. Ylonen and C. Lonvick, The Secure Shell (SSH) Authentication Protocol, RFC 4252, January 2006.

     T. Ylonen and C. Lonvick, The Secure Shell (SSH) Transport Layer Protocol, RFC 4253, January 2006.

     T. Ylonen and C. Lonvick, The Secure Shell (SSH) Connection Protocol, RFC 4254, January 2006.

     J. Schlyter and W. Griffin, Using DNS to Securely Publish Secure Shell (SSH) Key Fingerprints, RFC 4255, January
     2006.

     F. Cusack and M. Forssen, Generic Message Exchange Authentication for the Secure Shell Protocol (SSH), RFC 4256,
     January 2006.

     J. Galbraith and P. Remaker, The Secure Shell (SSH) Session Channel Break Extension, RFC 4335, January 2006.

     M. Bellare, T. Kohno, and C. Namprempre, The Secure Shell (SSH) Transport Layer Encryption Modes, RFC 4344,
     January 2006.

     B. Harris, Improved Arcfour Modes for the Secure Shell (SSH) Transport Layer Protocol, RFC 4345, January 2006.

     M. Friedl, N. Provos, and W. Simpson, Diffie-Hellman Group Exchange for the Secure Shell (SSH) Transport Layer
     Protocol, RFC 4419, March 2006.

     J. Galbraith and R. Thayer, The Secure Shell (SSH) Public Key File Format, RFC 4716, November 2006.

     D. Stebila and J. Green, Elliptic Curve Algorithm Integration in the Secure Shell Transport Layer, RFC 5656,
     December 2009.

     A. Perrig and D. Song, Hash Visualization: a New Technique to improve Real-World Security, 1999, International
     Workshop on Cryptographic Techniques and E-Commerce (CrypTEC '99).

AUTHORS
     OpenSSH is a derivative of the original and free ssh 1.2.12 release by Tatu Ylonen.  Aaron Campbell, Bob Beck,
     Markus Friedl, Niels Provos, Theo de Raadt and Dug Song removed many bugs, re-added newer features and created
     OpenSSH.  Markus Friedl contributed the support for SSH protocol versions 1.5 and 2.0.

BSD                                                February 6, 2022                                               BSD

================================================================================

COMMAND: nmap
NMAP(1)                                          Nmap Reference Guide                                         NMAP(1)

NAME
       nmap - Network exploration tool and security / port scanner

SYNOPSIS
       nmap [Scan Type...] [Options] {target specification}

DESCRIPTION
       Nmap (“Network Mapper”) is an open source tool for network exploration and security auditing. It was designed
       to rapidly scan large networks, although it works fine against single hosts. Nmap uses raw IP packets in novel
       ways to determine what hosts are available on the network, what services (application name and version) those
       hosts are offering, what operating systems (and OS versions) they are running, what type of packet
       filters/firewalls are in use, and dozens of other characteristics. While Nmap is commonly used for security
       audits, many systems and network administrators find it useful for routine tasks such as network inventory,
       managing service upgrade schedules, and monitoring host or service uptime.

       The output from Nmap is a list of scanned targets, with supplemental information on each depending on the
       options used. Key among that information is the “interesting ports table”.  That table lists the port number
       and protocol, service name, and state. The state is either open, filtered, closed, or unfiltered.  Open means
       that an application on the target machine is listening for connections/packets on that port.  Filtered means
       that a firewall, filter, or other network obstacle is blocking the port so that Nmap cannot tell whether it is
       open or closed.  Closed ports have no application listening on them, though they could open up at any time.
       Ports are classified as unfiltered when they are responsive to Nmap's probes, but Nmap cannot determine
       whether they are open or closed. Nmap reports the state combinations open|filtered and closed|filtered when it
       cannot determine which of the two states describe a port. The port table may also include software version
       details when version detection has been requested. When an IP protocol scan is requested (-sO), Nmap provides
       information on supported IP protocols rather than listening ports.

       In addition to the interesting ports table, Nmap can provide further information on targets, including reverse
       DNS names, operating system guesses, device types, and MAC addresses.

       A typical Nmap scan is shown in Example 1. The only Nmap arguments used in this example are -A, to enable OS
       and version detection, script scanning, and traceroute; -T4 for faster execution; and then the hostname.

       Example 1. A representative Nmap scan

           # nmap -A -T4 scanme.nmap.org

           Nmap scan report for scanme.nmap.org (74.207.244.221)
           Host is up (0.029s latency).
           rDNS record for 74.207.244.221: li86-221.members.linode.com
           Not shown: 995 closed ports
           PORT     STATE    SERVICE     VERSION
           22/tcp   open     ssh         OpenSSH 5.3p1 Debian 3ubuntu7 (protocol 2.0)
           | ssh-hostkey: 1024 8d:60:f1:7c:ca:b7:3d:0a:d6:67:54:9d:69:d9:b9:dd (DSA)
           |_2048 79:f8:09:ac:d4:e2:32:42:10:49:d3:bd:20:82:85:ec (RSA)
           80/tcp   open     http        Apache httpd 2.2.14 ((Ubuntu))
           |_http-title: Go ahead and ScanMe!
           646/tcp  filtered ldp
           1720/tcp filtered H.323/Q.931
           9929/tcp open     nping-echo  Nping echo
           Device type: general purpose
           Running: Linux 2.6.X
           OS CPE: cpe:/o:linux:linux_kernel:2.6.39
           OS details: Linux 2.6.39
           Network Distance: 11 hops
           Service Info: OS: Linux; CPE: cpe:/o:linux:kernel

           TRACEROUTE (using port 53/tcp)
           HOP RTT      ADDRESS
           [Cut first 10 hops for brevity]
           11  17.65 ms li86-221.members.linode.com (74.207.244.221)

           Nmap done: 1 IP address (1 host up) scanned in 14.40 seconds

       The newest version of Nmap can be obtained from https://nmap.org. The newest version of this man page is
       available at https://nmap.org/book/man.html.  It is also included as a chapter of Nmap Network Scanning: The
       Official Nmap Project Guide to Network Discovery and Security Scanning (see https://nmap.org/book/).

OPTIONS SUMMARY
       This options summary is printed when Nmap is run with no arguments, and the latest version is always available
       at https://svn.nmap.org/nmap/docs/nmap.usage.txt. It helps people remember the most common options, but is no
       substitute for the in-depth documentation in the rest of this manual. Some obscure options aren't even
       included here.

           Nmap 7.70SVN ( https://nmap.org )
           Usage: nmap [Scan Type(s)] [Options] {target specification}
           TARGET SPECIFICATION:
             Can pass hostnames, IP addresses, networks, etc.
             Ex: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.0-255.1-254
             -iL <inputfilename>: Input from list of hosts/networks
             -iR <num hosts>: Choose random targets
             --exclude <host1[,host2][,host3],...>: Exclude hosts/networks
             --excludefile <exclude_file>: Exclude list from file
           HOST DISCOVERY:
             -sL: List Scan - simply list targets to scan
             -sn: Ping Scan - disable port scan
             -Pn: Treat all hosts as online -- skip host discovery
             -PS/PA/PU/PY[portlist]: TCP SYN/ACK, UDP or SCTP discovery to given ports
             -PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes
             -PO[protocol list]: IP Protocol Ping
             -n/-R: Never do DNS resolution/Always resolve [default: sometimes]
             --dns-servers <serv1[,serv2],...>: Specify custom DNS servers
             --system-dns: Use OS's DNS resolver
             --traceroute: Trace hop path to each host
           SCAN TECHNIQUES:
             -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans
             -sU: UDP Scan
             -sN/sF/sX: TCP Null, FIN, and Xmas scans
             --scanflags <flags>: Customize TCP scan flags
             -sI <zombie host[:probeport]>: Idle scan
             -sY/sZ: SCTP INIT/COOKIE-ECHO scans
             -sO: IP protocol scan
             -b <FTP relay host>: FTP bounce scan
           PORT SPECIFICATION AND SCAN ORDER:
             -p <port ranges>: Only scan specified ports
               Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9
             --exclude-ports <port ranges>: Exclude the specified ports from scanning
             -F: Fast mode - Scan fewer ports than the default scan
             -r: Scan ports consecutively - don't randomize
             --top-ports <number>: Scan <number> most common ports
             --port-ratio <ratio>: Scan ports more common than <ratio>
           SERVICE/VERSION DETECTION:
             -sV: Probe open ports to determine service/version info
             --version-intensity <level>: Set from 0 (light) to 9 (try all probes)
             --version-light: Limit to most likely probes (intensity 2)
             --version-all: Try every single probe (intensity 9)
             --version-trace: Show detailed version scan activity (for debugging)
           SCRIPT SCAN:
             -sC: equivalent to --script=default
             --script=<Lua scripts>: <Lua scripts> is a comma separated list of
                      directories, script-files or script-categories
             --script-args=<n1=v1,[n2=v2,...]>: provide arguments to scripts
             --script-args-file=filename: provide NSE script args in a file
             --script-trace: Show all data sent and received
             --script-updatedb: Update the script database.
             --script-help=<Lua scripts>: Show help about scripts.
                      <Lua scripts> is a comma-separated list of script-files or
                      script-categories.
           OS DETECTION:
             -O: Enable OS detection
             --osscan-limit: Limit OS detection to promising targets
             --osscan-guess: Guess OS more aggressively
           TIMING AND PERFORMANCE:
             Options which take <time> are in seconds, or append 'ms' (milliseconds),
             's' (seconds), 'm' (minutes), or 'h' (hours) to the value (e.g. 30m).
             -T<0-5>: Set timing template (higher is faster)
             --min-hostgroup/max-hostgroup <size>: Parallel host scan group sizes
             --min-parallelism/max-parallelism <numprobes>: Probe parallelization
             --min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout <time>: Specifies
                 probe round trip time.
             --max-retries <tries>: Caps number of port scan probe retransmissions.
             --host-timeout <time>: Give up on target after this long
             --scan-delay/--max-scan-delay <time>: Adjust delay between probes
             --min-rate <number>: Send packets no slower than <number> per second
             --max-rate <number>: Send packets no faster than <number> per second
           FIREWALL/IDS EVASION AND SPOOFING:
             -f; --mtu <val>: fragment packets (optionally w/given MTU)
             -D <decoy1,decoy2[,ME],...>: Cloak a scan with decoys
             -S <IP_Address>: Spoof source address
             -e <iface>: Use specified interface
             -g/--source-port <portnum>: Use given port number
             --proxies <url1,[url2],...>: Relay connections through HTTP/SOCKS4 proxies
             --data <hex string>: Append a custom payload to sent packets
             --data-string <string>: Append a custom ASCII string to sent packets
             --data-length <num>: Append random data to sent packets
             --ip-options <options>: Send packets with specified ip options
             --ttl <val>: Set IP time-to-live field
             --spoof-mac <mac address/prefix/vendor name>: Spoof your MAC address
             --badsum: Send packets with a bogus TCP/UDP/SCTP checksum
           OUTPUT:
             -oN/-oX/-oS/-oG <file>: Output scan in normal, XML, s|<rIpt kIddi3,
                and Grepable format, respectively, to the given filename.
             -oA <basename>: Output in the three major formats at once
             -v: Increase verbosity level (use -vv or more for greater effect)
             -d: Increase debugging level (use -dd or more for greater effect)
             --reason: Display the reason a port is in a particular state
             --open: Only show open (or possibly open) ports
             --packet-trace: Show all packets sent and received
             --iflist: Print host interfaces and routes (for debugging)
             --append-output: Append to rather than clobber specified output files
             --resume <filename>: Resume an aborted scan
             --stylesheet <path/URL>: XSL stylesheet to transform XML output to HTML
             --webxml: Reference stylesheet from Nmap.Org for more portable XML
             --no-stylesheet: Prevent associating of XSL stylesheet w/XML output
           MISC:
             -6: Enable IPv6 scanning
             -A: Enable OS detection, version detection, script scanning, and traceroute
             --datadir <dirname>: Specify custom Nmap data file location
             --send-eth/--send-ip: Send using raw ethernet frames or IP packets
             --privileged: Assume that the user is fully privileged
             --unprivileged: Assume the user lacks raw socket privileges
             -V: Print version number
             -h: Print this help summary page.
           EXAMPLES:
             nmap -v -A scanme.nmap.org
             nmap -v -sn 192.168.0.0/16 10.0.0.0/8
             nmap -v -iR 10000 -Pn -p 80
           SEE THE MAN PAGE (https://nmap.org/book/man.html) FOR MORE OPTIONS AND EXAMPLES

TARGET SPECIFICATION
       Everything on the Nmap command-line that isn't an option (or option argument) is treated as a target host
       specification. The simplest case is to specify a target IP address or hostname for scanning.

       When a hostname is given as a target, it is resolved via the Domain Name System (DNS) to determine the IP
       address to scan. If the name resolves to more than one IP address, only the first one will be scanned. To make
       Nmap scan all the resolved addresses instead of only the first one, use the --resolve-all option.

       Sometimes you wish to scan a whole network of adjacent hosts. For this, Nmap supports CIDR-style addressing.
       You can append /numbits to an IP address or hostname and Nmap will scan every IP address for which the first
       numbits are the same as for the reference IP or hostname given. For example, 192.168.10.0/24 would scan the
       256 hosts between 192.168.10.0 (binary: 11000000 10101000 00001010 00000000) and 192.168.10.255 (binary:
       11000000 10101000 00001010 11111111), inclusive.  192.168.10.40/24 would scan exactly the same targets. Given
       that the host scanme.nmap.org is at the IP address 64.13.134.52, the specification scanme.nmap.org/16 would
       scan the 65,536 IP addresses between 64.13.0.0 and 64.13.255.255. The smallest allowed value is /0, which
       targets the whole Internet. The largest value for IPv4 is /32, which scans just the named host or IP address
       because all address bits are fixed. The largest value for IPv6 is /128, which does the same thing.

       CIDR notation is short but not always flexible enough. For example, you might want to scan 192.168.0.0/16 but
       skip any IPs ending with .0 or .255 because they may be used as subnet network and broadcast addresses. Nmap
       supports this through octet range addressing. Rather than specify a normal IP address, you can specify a
       comma-separated list of numbers or ranges for each octet. For example, 192.168.0-255.1-254 will skip all
       addresses in the range that end in .0 or .255, and 192.168.3-5,7.1 will scan the four addresses 192.168.3.1,
       192.168.4.1, 192.168.5.1, and 192.168.7.1. Either side of a range may be omitted; the default values are 0 on
       the left and 255 on the right. Using - by itself is the same as 0-255, but remember to use 0- in the first
       octet so the target specification doesn't look like a command-line option. Ranges need not be limited to the
       final octets: the specifier 0-255.0-255.13.37 will perform an Internet-wide scan for all IP addresses ending
       in 13.37. This sort of broad sampling can be useful for Internet surveys and research.

       IPv6 addresses can be specified by their fully qualified IPv6 address or hostname or with CIDR notation for
       subnets. Octet ranges aren't yet supported for IPv6.

       IPv6 addresses with non-global scope need to have a zone ID suffix. On Unix systems, this is a percent sign
       followed by an interface name; a complete address might be fe80::a8bb:ccff:fedd:eeff%eth0. On Windows, use an
       interface index number in place of an interface name: fe80::a8bb:ccff:fedd:eeff%1. You can see a list of
       interface indexes by running the command netsh.exe interface ipv6 show interface.

       Nmap accepts multiple host specifications on the command line, and they don't need to be the same type. The
       command nmap scanme.nmap.org 192.168.0.0/8 10.0.0,1,3-7.- does what you would expect.

       While targets are usually specified on the command lines, the following options are also available to control
       target selection:

       -iL inputfilename (Input from list)
           Reads target specifications from inputfilename. Passing a huge list of hosts is often awkward on the
           command line, yet it is a common desire. For example, your DHCP server might export a list of 10,000
           current leases that you wish to scan. Or maybe you want to scan all IP addresses except for those to
           locate hosts using unauthorized static IP addresses. Simply generate the list of hosts to scan and pass
           that filename to Nmap as an argument to the -iL option. Entries can be in any of the formats accepted by
           Nmap on the command line (IP address, hostname, CIDR, IPv6, or octet ranges). Each entry must be separated
           by one or more spaces, tabs, or newlines. You can specify a hyphen (-) as the filename if you want Nmap to
           read hosts from standard input rather than an actual file.

           The input file may contain comments that start with # and extend to the end of the line.

       -iR num hosts (Choose random targets)
           For Internet-wide surveys and other research, you may want to choose targets at random. The num hosts
           argument tells Nmap how many IPs to generate. Undesirable IPs such as those in certain private, multicast,
           or unallocated address ranges are automatically skipped. The argument 0 can be specified for a
           never-ending scan. Keep in mind that some network administrators bristle at unauthorized scans of their
           networks and may complain. Use this option at your own risk! If you find yourself really bored one rainy
           afternoon, try the command nmap -Pn -sS -p 80 -iR 0 --open to locate random web servers for browsing.

       --exclude host1[,host2[,...]] (Exclude hosts/networks)
           Specifies a comma-separated list of targets to be excluded from the scan even if they are part of the
           overall network range you specify. The list you pass in uses normal Nmap syntax, so it can include
           hostnames, CIDR netblocks, octet ranges, etc. This can be useful when the network you wish to scan
           includes untouchable mission-critical servers, systems that are known to react adversely to port scans, or
           subnets administered by other people.

       --excludefile exclude_file (Exclude list from file)
           This offers the same functionality as the --exclude option, except that the excluded targets are provided
           in a newline-, space-, or tab-delimited exclude_file rather than on the command line.

           The exclude file may contain comments that start with # and extend to the end of the line.

HOST DISCOVERY
       One of the very first steps in any network reconnaissance mission is to reduce a (sometimes huge) set of IP
       ranges into a list of active or interesting hosts. Scanning every port of every single IP address is slow and
       usually unnecessary. Of course what makes a host interesting depends greatly on the scan purposes. Network
       administrators may only be interested in hosts running a certain service, while security auditors may care
       about every single device with an IP address. An administrator may be comfortable using just an ICMP ping to
       locate hosts on his internal network, while an external penetration tester may use a diverse set of dozens of
       probes in an attempt to evade firewall restrictions.

       Because host discovery needs are so diverse, Nmap offers a wide variety of options for customizing the
       techniques used. Host discovery is sometimes called ping scan, but it goes well beyond the simple ICMP echo
       request packets associated with the ubiquitous ping tool. Users can skip the ping step entirely with a list
       scan (-sL) or by disabling ping (-Pn), or engage the network with arbitrary combinations of multi-port TCP
       SYN/ACK, UDP, SCTP INIT and ICMP probes. The goal of these probes is to solicit responses which demonstrate
       that an IP address is actually active (is being used by a host or network device). On many networks, only a
       small percentage of IP addresses are active at any given time. This is particularly common with private
       address space such as 10.0.0.0/8. That network has 16 million IPs, but I have seen it used by companies with
       less than a thousand machines. Host discovery can find those machines in a sparsely allocated sea of IP
       addresses.

       If no host discovery options are given, Nmap sends an ICMP echo request, a TCP SYN packet to port 443, a TCP
       ACK packet to port 80, and an ICMP timestamp request. (For IPv6, the ICMP timestamp request is omitted because
       it is not part of ICMPv6.) These defaults are equivalent to the -PE -PS443 -PA80 -PP options. The exceptions
       to this are the ARP (for IPv4) and Neighbor Discovery (for IPv6) scans which are used for any targets on a
       local ethernet network. For unprivileged Unix shell users, the default probes are a SYN packet to ports 80 and
       443 using the connect system call.  This host discovery is often sufficient when scanning local networks, but
       a more comprehensive set of discovery probes is recommended for security auditing.

       The -P* options (which select ping types) can be combined. You can increase your odds of penetrating strict
       firewalls by sending many probe types using different TCP ports/flags and ICMP codes. Also note that
       ARP/Neighbor Discovery (-PR) is done by default against targets on a local ethernet network even if you
       specify other -P* options, because it is almost always faster and more effective.

       By default, Nmap does host discovery and then performs a port scan against each host it determines is online.
       This is true even if you specify non-default host discovery types such as UDP probes (-PU). Read about the -sn
       option to learn how to perform only host discovery, or use -Pn to skip host discovery and port scan all target
       hosts. The following options control host discovery:

       -sL (List Scan)
           The list scan is a degenerate form of host discovery that simply lists each host of the network(s)
           specified, without sending any packets to the target hosts. By default, Nmap still does reverse-DNS
           resolution on the hosts to learn their names. It is often surprising how much useful information simple
           hostnames give out. For example, fw.chi is the name of one company's Chicago firewall.

           Nmap also reports the total number of IP addresses at the end. The list scan is a good sanity check to
           ensure that you have proper IP addresses for your targets. If the hosts sport domain names you do not
           recognize, it is worth investigating further to prevent scanning the wrong company's network.

           Since the idea is to simply print a list of target hosts, options for higher level functionality such as
           port scanning, OS detection, or ping scanning cannot be combined with this. If you wish to disable ping
           scanning while still performing such higher level functionality, read up on the -Pn (skip ping) option.

       -sn (No port scan)
           This option tells Nmap not to do a port scan after host discovery, and only print out the available hosts
           that responded to the host discovery probes. This is often known as a “ping scan”, but you can also
           request that traceroute and NSE host scripts be run. This is by default one step more intrusive than the
           list scan, and can often be used for the same purposes. It allows light reconnaissance of a target network
           without attracting much attention. Knowing how many hosts are up is more valuable to attackers than the
           list provided by list scan of every single IP and host name.

           Systems administrators often find this option valuable as well. It can easily be used to count available
           machines on a network or monitor server availability. This is often called a ping sweep, and is more
           reliable than pinging the broadcast address because many hosts do not reply to broadcast queries.

           The default host discovery done with -sn consists of an ICMP echo request, TCP SYN to port 443, TCP ACK to
           port 80, and an ICMP timestamp request by default. When executed by an unprivileged user, only SYN packets
           are sent (using a connect call) to ports 80 and 443 on the target. When a privileged user tries to scan
           targets on a local ethernet network, ARP requests are used unless --send-ip was specified. The -sn option
           can be combined with any of the discovery probe types (the -P* options, excluding -Pn) for greater
           flexibility. If any of those probe type and port number options are used, the default probes are
           overridden. When strict firewalls are in place between the source host running Nmap and the target
           network, using those advanced techniques is recommended. Otherwise hosts could be missed when the firewall
           drops probes or their responses.

           In previous releases of Nmap, -sn was known as -sP.

       -Pn (No ping)
           This option skips the Nmap discovery stage altogether. Normally, Nmap uses this stage to determine active
           machines for heavier scanning. By default, Nmap only performs heavy probing such as port scans, version
           detection, or OS detection against hosts that are found to be up. Disabling host discovery with -Pn causes
           Nmap to attempt the requested scanning functions against every target IP address specified. So if a class
           B target address space (/16) is specified on the command line, all 65,536 IP addresses are scanned. Proper
           host discovery is skipped as with the list scan, but instead of stopping and printing the target list,
           Nmap continues to perform requested functions as if each target IP is active. To skip ping scan and port
           scan, while still allowing NSE to run, use the two options -Pn -sn together.

           For machines on a local ethernet network, ARP scanning will still be performed (unless --disable-arp-ping
           or --send-ip is specified) because Nmap needs MAC addresses to further scan target hosts. In previous
           versions of Nmap, -Pn was -P0 and -PN.

       -PS port list (TCP SYN Ping)
           This option sends an empty TCP packet with the SYN flag set. The default destination port is 80
           (configurable at compile time by changing DEFAULT_TCP_PROBE_PORT_SPEC in nmap.h).  Alternate ports can be
           specified as a parameter. The syntax is the same as for the -p except that port type specifiers like T:
           are not allowed. Examples are -PS22 and -PS22-25,80,113,1050,35000. Note that there can be no space
           between -PS and the port list. If multiple probes are specified they will be sent in parallel.

           The SYN flag suggests to the remote system that you are attempting to establish a connection. Normally the
           destination port will be closed, and a RST (reset) packet sent back. If the port happens to be open, the
           target will take the second step of a TCP three-way-handshake by responding with a SYN/ACK TCP packet. The
           machine running Nmap then tears down the nascent connection by responding with a RST rather than sending
           an ACK packet which would complete the three-way-handshake and establish a full connection. The RST packet
           is sent by the kernel of the machine running Nmap in response to the unexpected SYN/ACK, not by Nmap
           itself.

           Nmap does not care whether the port is open or closed. Either the RST or SYN/ACK response discussed
           previously tell Nmap that the host is available and responsive.

           On Unix boxes, only the privileged user root is generally able to send and receive raw TCP packets.  For
           unprivileged users, a workaround is automatically employed whereby the connect system call is initiated
           against each target port. This has the effect of sending a SYN packet to the target host, in an attempt to
           establish a connection. If connect returns with a quick success or an ECONNREFUSED failure, the underlying
           TCP stack must have received a SYN/ACK or RST and the host is marked available. If the connection attempt
           is left hanging until a timeout is reached, the host is marked as down.

       -PA port list (TCP ACK Ping)
           The TCP ACK ping is quite similar to the just-discussed SYN ping. The difference, as you could likely
           guess, is that the TCP ACK flag is set instead of the SYN flag. Such an ACK packet purports to be
           acknowledging data over an established TCP connection, but no such connection exists. So remote hosts
           should always respond with a RST packet, disclosing their existence in the process.

           The -PA option uses the same default port as the SYN probe (80) and can also take a list of destination
           ports in the same format. If an unprivileged user tries this, the connect workaround discussed previously
           is used. This workaround is imperfect because connect is actually sending a SYN packet rather than an ACK.

           The reason for offering both SYN and ACK ping probes is to maximize the chances of bypassing firewalls.
           Many administrators configure routers and other simple firewalls to block incoming SYN packets except for
           those destined for public services like the company web site or mail server. This prevents other incoming
           connections to the organization, while allowing users to make unobstructed outgoing connections to the
           Internet. This non-stateful approach takes up few resources on the firewall/router and is widely supported
           by hardware and software filters. The Linux Netfilter/iptables firewall software offers the --syn
           convenience option to implement this stateless approach. When stateless firewall rules such as this are in
           place, SYN ping probes (-PS) are likely to be blocked when sent to closed target ports. In such cases, the
           ACK probe shines as it cuts right through these rules.

           Another common type of firewall uses stateful rules that drop unexpected packets. This feature was
           initially found mostly on high-end firewalls, though it has become much more common over the years. The
           Linux Netfilter/iptables system supports this through the --state option, which categorizes packets based
           on connection state. A SYN probe is more likely to work against such a system, as unexpected ACK packets
           are generally recognized as bogus and dropped. A solution to this quandary is to send both SYN and ACK
           probes by specifying -PS and -PA.

       -PU port list (UDP Ping)
           Another host discovery option is the UDP ping, which sends a UDP packet to the given ports. For most
           ports, the packet will be empty, though some use a protocol-specific payload that is more likely to elicit
           a response.  The payload database is described at https://nmap.org/book/nmap-payloads.html.

           . Packet content can also be affected with the --data, --data-string, and --data-length options.

           The port list takes the same format as with the previously discussed -PS and -PA options. If no ports are
           specified, the default is 40125.  This default can be configured at compile-time by changing
           DEFAULT_UDP_PROBE_PORT_SPEC in nmap.h.  A highly uncommon port is used by default because sending to open
           ports is often undesirable for this particular scan type.

           Upon hitting a closed port on the target machine, the UDP probe should elicit an ICMP port unreachable
           packet in return. This signifies to Nmap that the machine is up and available. Many other types of ICMP
           errors, such as host/network unreachables or TTL exceeded are indicative of a down or unreachable host. A
           lack of response is also interpreted this way. If an open port is reached, most services simply ignore the
           empty packet and fail to return any response. This is why the default probe port is 40125, which is highly
           unlikely to be in use. A few services, such as the Character Generator (chargen) protocol, will respond to
           an empty UDP packet, and thus disclose to Nmap that the machine is available.

           The primary advantage of this scan type is that it bypasses firewalls and filters that only screen TCP.
           For example, I once owned a Linksys BEFW11S4 wireless broadband router. The external interface of this
           device filtered all TCP ports by default, but UDP probes would still elicit port unreachable messages and
           thus give away the device.

       -PY port list (SCTP INIT Ping)
           This option sends an SCTP packet containing a minimal INIT chunk. The default destination port is 80
           (configurable at compile time by changing DEFAULT_SCTP_PROBE_PORT_SPEC in nmap.h). Alternate ports can be
           specified as a parameter. The syntax is the same as for the -p except that port type specifiers like S:
           are not allowed. Examples are -PY22 and -PY22,80,179,5060. Note that there can be no space between -PY and
           the port list. If multiple probes are specified they will be sent in parallel.

           The INIT chunk suggests to the remote system that you are attempting to establish an association. Normally
           the destination port will be closed, and an ABORT chunk will be sent back. If the port happens to be open,
           the target will take the second step of an SCTP four-way-handshake by responding with an INIT-ACK chunk.
           If the machine running Nmap has a functional SCTP stack, then it tears down the nascent association by
           responding with an ABORT chunk rather than sending a COOKIE-ECHO chunk which would be the next step in the
           four-way-handshake. The ABORT packet is sent by the kernel of the machine running Nmap in response to the
           unexpected INIT-ACK, not by Nmap itself.

           Nmap does not care whether the port is open or closed. Either the ABORT or INIT-ACK response discussed
           previously tell Nmap that the host is available and responsive.

           On Unix boxes, only the privileged user root is generally able to send and receive raw SCTP packets.
           Using SCTP INIT Pings is currently not possible for unprivileged users.

       -PE; -PP; -PM (ICMP Ping Types)
           In addition to the unusual TCP, UDP and SCTP host discovery types discussed previously, Nmap can send the
           standard packets sent by the ubiquitous ping program. Nmap sends an ICMP type 8 (echo request) packet to
           the target IP addresses, expecting a type 0 (echo reply) in return from available hosts.  Unfortunately
           for network explorers, many hosts and firewalls now block these packets, rather than responding as
           required by RFC 1122[2].  For this reason, ICMP-only scans are rarely reliable enough against unknown
           targets over the Internet. But for system administrators monitoring an internal network, they can be a
           practical and efficient approach. Use the -PE option to enable this echo request behavior.

           While echo request is the standard ICMP ping query, Nmap does not stop there. The ICMP standards (RFC
           792[3] and RFC 950[4] ) also specify timestamp request, information request, and address mask request
           packets as codes 13, 15, and 17, respectively. While the ostensible purpose for these queries is to learn
           information such as address masks and current times, they can easily be used for host discovery. A system
           that replies is up and available. Nmap does not currently implement information request packets, as they
           are not widely supported. RFC 1122 insists that “a host SHOULD NOT implement these messages”. Timestamp
           and address mask queries can be sent with the -PP and -PM options, respectively. A timestamp reply (ICMP
           code 14) or address mask reply (code 18) discloses that the host is available. These two queries can be
           valuable when administrators specifically block echo request packets while forgetting that other ICMP
           queries can be used for the same purpose.

       -PO protocol list (IP Protocol Ping)
           One of the newer host discovery options is the IP protocol ping, which sends IP packets with the specified
           protocol number set in their IP header. The protocol list takes the same format as do port lists in the
           previously discussed TCP, UDP and SCTP host discovery options. If no protocols are specified, the default
           is to send multiple IP packets for ICMP (protocol 1), IGMP (protocol 2), and IP-in-IP (protocol 4). The
           default protocols can be configured at compile-time by changing DEFAULT_PROTO_PROBE_PORT_SPEC in nmap.h.
           Note that for the ICMP, IGMP, TCP (protocol 6), UDP (protocol 17) and SCTP (protocol 132), the packets are
           sent with the proper protocol headers while other protocols are sent with no additional data beyond the IP
           header (unless any of --data, --data-string, or --data-length options are specified).

           This host discovery method looks for either responses using the same protocol as a probe, or ICMP protocol
           unreachable messages which signify that the given protocol isn't supported on the destination host. Either
           type of response signifies that the target host is alive.

       -PR (ARP Ping)
           One of the most common Nmap usage scenarios is to scan an ethernet LAN. On most LANs, especially those
           using private address ranges specified by RFC 1918[5], the vast majority of IP addresses are unused at any
           given time. When Nmap tries to send a raw IP packet such as an ICMP echo request, the operating system
           must determine the destination hardware (ARP) address corresponding to the target IP so that it can
           properly address the ethernet frame. This is often slow and problematic, since operating systems weren't
           written with the expectation that they would need to do millions of ARP requests against unavailable hosts
           in a short time period.

           ARP scan puts Nmap and its optimized algorithms in charge of ARP requests. And if it gets a response back,
           Nmap doesn't even need to worry about the IP-based ping packets since it already knows the host is up.
           This makes ARP scan much faster and more reliable than IP-based scans. So it is done by default when
           scanning ethernet hosts that Nmap detects are on a local ethernet network. Even if different ping types
           (such as -PE or -PS) are specified, Nmap uses ARP instead for any of the targets which are on the same
           LAN. If you absolutely don't want to do an ARP scan, specify --disable-arp-ping.

           For IPv6 (-6 option), -PR uses ICMPv6 Neighbor Discovery instead of ARP. Neighbor Discovery, defined in
           RFC 4861, can be seen as the IPv6 equivalent of ARP.

       --disable-arp-ping (No ARP or ND Ping)
           Nmap normally does ARP or IPv6 Neighbor Discovery (ND) discovery of locally connected ethernet hosts, even
           if other host discovery options such as -Pn or -PE are used. To disable this implicit behavior, use the
           --disable-arp-ping option.

           The default behavior is normally faster, but this option is useful on networks using proxy ARP, in which a
           router speculatively replies to all ARP requests, making every target appear to be up according to ARP
           scan.

       --traceroute (Trace path to host)
           Traceroutes are performed post-scan using information from the scan results to determine the port and
           protocol most likely to reach the target. It works with all scan types except connect scans (-sT) and idle
           scans (-sI). All traces use Nmap's dynamic timing model and are performed in parallel.

           Traceroute works by sending packets with a low TTL (time-to-live) in an attempt to elicit ICMP Time
           Exceeded messages from intermediate hops between the scanner and the target host. Standard traceroute
           implementations start with a TTL of 1 and increment the TTL until the destination host is reached. Nmap's
           traceroute starts with a high TTL and then decrements the TTL until it reaches zero. Doing it backwards
           lets Nmap employ clever caching algorithms to speed up traces over multiple hosts. On average Nmap sends
           5–10 fewer packets per host, depending on network conditions. If a single subnet is being scanned (i.e.
           192.168.0.0/24) Nmap may only have to send two packets to most hosts.

       -n (No DNS resolution)
           Tells Nmap to never do reverse DNS

           resolution on the active IP addresses it finds. Since DNS can be slow even with Nmap's built-in parallel
           stub resolver, this option can slash scanning times.

       -R (DNS resolution for all targets)
           Tells Nmap to always do reverse DNS resolution on the target IP addresses. Normally reverse DNS is only
           performed against responsive (online) hosts.

       --resolve-all (Scan each resolved address)
           If a hostname target resolves to more than one address, scan all of them. The default behavior is to only
           scan the first resolved address. Regardless, only addresses in the appropriate address family will be
           scanned: IPv4 by default, IPv6 with -6.

       --system-dns (Use system DNS resolver)
           By default, Nmap reverse-resolves IP addresses by sending queries directly to the name servers configured
           on your host and then listening for responses. Many requests (often dozens) are performed in parallel to
           improve performance. Specify this option to use your system resolver instead (one IP at a time via the
           getnameinfo call). This is slower and rarely useful unless you find a bug in the Nmap parallel resolver
           (please let us know if you do). The system resolver is always used for forward lookups (getting an IP
           address from a hostname).

       --dns-servers server1[,server2[,...]]  (Servers to use for reverse DNS queries)
           By default, Nmap determines your DNS servers (for rDNS resolution) from your resolv.conf file (Unix) or
           the Registry (Win32). Alternatively, you may use this option to specify alternate servers. This option is
           not honored if you are using --system-dns. Using multiple DNS servers is often faster, especially if you
           choose authoritative servers for your target IP space. This option can also improve stealth, as your
           requests can be bounced off just about any recursive DNS server on the Internet.

           This option also comes in handy when scanning private networks. Sometimes only a few name servers provide
           proper rDNS information, and you may not even know where they are. You can scan the network for port 53
           (perhaps with version detection), then try Nmap list scans (-sL) specifying each name server one at a time
           with --dns-servers until you find one which works.

           This option might not be honored if the DNS response exceeds the size of a UDP packet. In such a situation
           our DNS resolver will make the best effort to extract a response from the truncated packet, and if not
           successful it will fall back to using the system resolver. Also, responses that contain CNAME aliases will
           fall back to the system resolver.

PORT SCANNING BASICS
       While Nmap has grown in functionality over the years, it began as an efficient port scanner, and that remains
       its core function. The simple command nmap target scans 1,000 TCP ports on the host target. While many port
       scanners have traditionally lumped all ports into the open or closed states, Nmap is much more granular. It
       divides ports into six states: open, closed, filtered, unfiltered, open|filtered, or closed|filtered.

       These states are not intrinsic properties of the port itself, but describe how Nmap sees them. For example, an
       Nmap scan from the same network as the target may show port 135/tcp as open, while a scan at the same time
       with the same options from across the Internet might show that port as filtered.

       The six port states recognized by Nmap

       open
           An application is actively accepting TCP connections, UDP datagrams or SCTP associations on this port.
           Finding these is often the primary goal of port scanning. Security-minded people know that each open port
           is an avenue for attack. Attackers and pen-testers want to exploit the open ports, while administrators
           try to close or protect them with firewalls without thwarting legitimate users. Open ports are also
           interesting for non-security scans because they show services available for use on the network.

       closed
           A closed port is accessible (it receives and responds to Nmap probe packets), but there is no application
           listening on it. They can be helpful in showing that a host is up on an IP address (host discovery, or
           ping scanning), and as part of OS detection. Because closed ports are reachable, it may be worth scanning
           later in case some open up. Administrators may want to consider blocking such ports with a firewall. Then
           they would appear in the filtered state, discussed next.

       filtered
           Nmap cannot determine whether the port is open because packet filtering prevents its probes from reaching
           the port. The filtering could be from a dedicated firewall device, router rules, or host-based firewall
           software. These ports frustrate attackers because they provide so little information. Sometimes they
           respond with ICMP error messages such as type 3 code 13 (destination unreachable: communication
           administratively prohibited), but filters that simply drop probes without responding are far more common.
           This forces Nmap to retry several times just in case the probe was dropped due to network congestion
           rather than filtering. This slows down the scan dramatically.

       unfiltered
           The unfiltered state means that a port is accessible, but Nmap is unable to determine whether it is open
           or closed. Only the ACK scan, which is used to map firewall rulesets, classifies ports into this state.
           Scanning unfiltered ports with other scan types such as Window scan, SYN scan, or FIN scan, may help
           resolve whether the port is open.

       open|filtered
           Nmap places ports in this state when it is unable to determine whether a port is open or filtered. This
           occurs for scan types in which open ports give no response. The lack of response could also mean that a
           packet filter dropped the probe or any response it elicited. So Nmap does not know for sure whether the
           port is open or being filtered. The UDP, IP protocol, FIN, NULL, and Xmas scans classify ports this way.

       closed|filtered
           This state is used when Nmap is unable to determine whether a port is closed or filtered. It is only used
           for the IP ID idle scan.

PORT SCANNING TECHNIQUES
       As a novice performing automotive repair, I can struggle for hours trying to fit my rudimentary tools (hammer,
       duct tape, wrench, etc.) to the task at hand. When I fail miserably and tow my jalopy to a real mechanic, he
       invariably fishes around in a huge tool chest until pulling out the perfect gizmo which makes the job seem
       effortless. The art of port scanning is similar. Experts understand the dozens of scan techniques and choose
       the appropriate one (or combination) for a given task. Inexperienced users and script kiddies, on the other
       hand, try to solve every problem with the default SYN scan. Since Nmap is free, the only barrier to port
       scanning mastery is knowledge. That certainly beats the automotive world, where it may take great skill to
       determine that you need a strut spring compressor, then you still have to pay thousands of dollars for it.

       Most of the scan types are only available to privileged users.  This is because they send and receive raw
       packets, which requires root access on Unix systems. Using an administrator account on Windows is recommended,
       though Nmap sometimes works for unprivileged users on that platform when Npcap has already been loaded into
       the OS. Requiring root privileges was a serious limitation when Nmap was released in 1997, as many users only
       had access to shared shell accounts. Now, the world is different. Computers are cheaper, far more people have
       always-on direct Internet access, and desktop Unix systems (including Linux and Mac OS X) are prevalent. A
       Windows version of Nmap is now available, allowing it to run on even more desktops. For all these reasons,
       users have less need to run Nmap from limited shared shell accounts. This is fortunate, as the privileged
       options make Nmap far more powerful and flexible.

       While Nmap attempts to produce accurate results, keep in mind that all of its insights are based on packets
       returned by the target machines (or firewalls in front of them). Such hosts may be untrustworthy and send
       responses intended to confuse or mislead Nmap. Much more common are non-RFC-compliant hosts that do not
       respond as they should to Nmap probes. FIN, NULL, and Xmas scans are particularly susceptible to this problem.
       Such issues are specific to certain scan types and so are discussed in the individual scan type entries.

       This section documents the dozen or so port scan techniques supported by Nmap. Only one method may be used at
       a time, except that UDP scan (-sU) and any one of the SCTP scan types (-sY, -sZ) may be combined with any one
       of the TCP scan types. As a memory aid, port scan type options are of the form -sC, where C is a prominent
       character in the scan name, usually the first. The one exception to this is the deprecated FTP bounce scan
       (-b). By default, Nmap performs a SYN Scan, though it substitutes a connect scan if the user does not have
       proper privileges to send raw packets (requires root access on Unix). Of the scans listed in this section,
       unprivileged users can only execute connect and FTP bounce scans.

       -sS (TCP SYN scan)
           SYN scan is the default and most popular scan option for good reasons. It can be performed quickly,
           scanning thousands of ports per second on a fast network not hampered by restrictive firewalls. It is also
           relatively unobtrusive and stealthy since it never completes TCP connections. SYN scan works against any
           compliant TCP stack rather than depending on idiosyncrasies of specific platforms as Nmap's FIN/NULL/Xmas,
           Maimon and idle scans do. It also allows clear, reliable differentiation between the open, closed, and
           filtered states.

           This technique is often referred to as half-open scanning, because you don't open a full TCP connection.
           You send a SYN packet, as if you are going to open a real connection and then wait for a response. A
           SYN/ACK indicates the port is listening (open), while a RST (reset) is indicative of a non-listener. If no
           response is received after several retransmissions, the port is marked as filtered. The port is also
           marked filtered if an ICMP unreachable error (type 3, code 0, 1, 2, 3, 9, 10, or 13) is received. The port
           is also considered open if a SYN packet (without the ACK flag) is received in response. This can be due to
           an extremely rare TCP feature known as a simultaneous open or split handshake connection (see
           https://nmap.org/misc/split-handshake.pdf).

       -sT (TCP connect scan)
           TCP connect scan is the default TCP scan type when SYN scan is not an option. This is the case when a user
           does not have raw packet privileges. Instead of writing raw packets as most other scan types do, Nmap asks
           the underlying operating system to establish a connection with the target machine and port by issuing the
           connect system call. This is the same high-level system call that web browsers, P2P clients, and most
           other network-enabled applications use to establish a connection. It is part of a programming interface
           known as the Berkeley Sockets API. Rather than read raw packet responses off the wire, Nmap uses this API
           to obtain status information on each connection attempt.

           When SYN scan is available, it is usually a better choice. Nmap has less control over the high level
           connect call than with raw packets, making it less efficient. The system call completes connections to
           open target ports rather than performing the half-open reset that SYN scan does. Not only does this take
           longer and require more packets to obtain the same information, but target machines are more likely to log
           the connection. A decent IDS will catch either, but most machines have no such alarm system. Many services
           on your average Unix system will add a note to syslog, and sometimes a cryptic error message, when Nmap
           connects and then closes the connection without sending data. Truly pathetic services crash when this
           happens, though that is uncommon. An administrator who sees a bunch of connection attempts in her logs
           from a single system should know that she has been connect scanned.

       -sU (UDP scans)
           While most popular services on the Internet run over the TCP protocol, UDP[6] services are widely
           deployed. DNS, SNMP, and DHCP (registered ports 53, 161/162, and 67/68) are three of the most common.
           Because UDP scanning is generally slower and more difficult than TCP, some security auditors ignore these
           ports. This is a mistake, as exploitable UDP services are quite common and attackers certainly don't
           ignore the whole protocol. Fortunately, Nmap can help inventory UDP ports.

           UDP scan is activated with the -sU option. It can be combined with a TCP scan type such as SYN scan (-sS)
           to check both protocols during the same run.

           UDP scan works by sending a UDP packet to every targeted port. For some common ports such as 53 and 161, a
           protocol-specific payload is sent to increase response rate, but for most ports the packet is empty unless
           the --data, --data-string, or --data-length options are specified. If an ICMP port unreachable error (type
           3, code 3) is returned, the port is closed. Other ICMP unreachable errors (type 3, codes 0, 1, 2, 9, 10,
           or 13) mark the port as filtered. Occasionally, a service will respond with a UDP packet, proving that it
           is open. If no response is received after retransmissions, the port is classified as open|filtered. This
           means that the port could be open, or perhaps packet filters are blocking the communication. Version
           detection (-sV) can be used to help differentiate the truly open ports from the filtered ones.

           A big challenge with UDP scanning is doing it quickly. Open and filtered ports rarely send any response,
           leaving Nmap to time out and then conduct retransmissions just in case the probe or response were lost.
           Closed ports are often an even bigger problem. They usually send back an ICMP port unreachable error. But
           unlike the RST packets sent by closed TCP ports in response to a SYN or connect scan, many hosts rate
           limit ICMP port unreachable messages by default. Linux and Solaris are particularly strict about this. For
           example, the Linux 2.4.20 kernel limits destination unreachable messages to one per second (in
           net/ipv4/icmp.c).

           Nmap detects rate limiting and slows down accordingly to avoid flooding the network with useless packets
           that the target machine will drop. Unfortunately, a Linux-style limit of one packet per second makes a
           65,536-port scan take more than 18 hours. Ideas for speeding your UDP scans up include scanning more hosts
           in parallel, doing a quick scan of just the popular ports first, scanning from behind the firewall, and
           using --host-timeout to skip slow hosts.

       -sY (SCTP INIT scan)
           SCTP[7] is a relatively new alternative to the TCP and UDP protocols, combining most characteristics of
           TCP and UDP, and also adding new features like multi-homing and multi-streaming. It is mostly being used
           for SS7/SIGTRAN related services but has the potential to be used for other applications as well. SCTP
           INIT scan is the SCTP equivalent of a TCP SYN scan. It can be performed quickly, scanning thousands of
           ports per second on a fast network not hampered by restrictive firewalls. Like SYN scan, INIT scan is
           relatively unobtrusive and stealthy, since it never completes SCTP associations. It also allows clear,
           reliable differentiation between the open, closed, and filtered states.

           This technique is often referred to as half-open scanning, because you don't open a full SCTP association.
           You send an INIT chunk, as if you are going to open a real association and then wait for a response. An
           INIT-ACK chunk indicates the port is listening (open), while an ABORT chunk is indicative of a
           non-listener. If no response is received after several retransmissions, the port is marked as filtered.
           The port is also marked filtered if an ICMP unreachable error (type 3, code 0, 1, 2, 3, 9, 10, or 13) is
           received.

       -sN; -sF; -sX (TCP NULL, FIN, and Xmas scans)
           These three scan types (even more are possible with the --scanflags option described in the next section)
           exploit a subtle loophole in the TCP RFC[8] to differentiate between open and closed ports. Page 65 of RFC
           793 says that “if the [destination] port state is CLOSED .... an incoming segment not containing a RST
           causes a RST to be sent in response.”  Then the next page discusses packets sent to open ports without the
           SYN, RST, or ACK bits set, stating that: “you are unlikely to get here, but if you do, drop the segment,
           and return.”

           When scanning systems compliant with this RFC text, any packet not containing SYN, RST, or ACK bits will
           result in a returned RST if the port is closed and no response at all if the port is open. As long as none
           of those three bits are included, any combination of the other three (FIN, PSH, and URG) are OK. Nmap
           exploits this with three scan types:

           Null scan (-sN)
               Does not set any bits (TCP flag header is 0)

           FIN scan (-sF)
               Sets just the TCP FIN bit.

           Xmas scan (-sX)
               Sets the FIN, PSH, and URG flags, lighting the packet up like a Christmas tree.

           These three scan types are exactly the same in behavior except for the TCP flags set in probe packets. If
           a RST packet is received, the port is considered closed, while no response means it is open|filtered. The
           port is marked filtered if an ICMP unreachable error (type 3, code 0, 1, 2, 3, 9, 10, or 13) is received.

           The key advantage to these scan types is that they can sneak through certain non-stateful firewalls and
           packet filtering routers. Another advantage is that these scan types are a little more stealthy than even
           a SYN scan. Don't count on this though—most modern IDS products can be configured to detect them. The big
           downside is that not all systems follow RFC 793 to the letter. A number of systems send RST responses to
           the probes regardless of whether the port is open or not. This causes all of the ports to be labeled
           closed. Major operating systems that do this are Microsoft Windows, many Cisco devices, BSDI, and IBM
           OS/400. This scan does work against most Unix-based systems though. Another downside of these scans is
           that they can't distinguish open ports from certain filtered ones, leaving you with the response
           open|filtered.

       -sA (TCP ACK scan)
           This scan is different than the others discussed so far in that it never determines open (or even
           open|filtered) ports. It is used to map out firewall rulesets, determining whether they are stateful or
           not and which ports are filtered.

           The ACK scan probe packet has only the ACK flag set (unless you use --scanflags). When scanning unfiltered
           systems, open and closed ports will both return a RST packet. Nmap then labels them as unfiltered, meaning
           that they are reachable by the ACK packet, but whether they are open or closed is undetermined. Ports that
           don't respond, or send certain ICMP error messages back (type 3, code 0, 1, 2, 3, 9, 10, or 13), are
           labeled filtered.

       -sW (TCP Window scan)
           Window scan is exactly the same as ACK scan except that it exploits an implementation detail of certain
           systems to differentiate open ports from closed ones, rather than always printing unfiltered when a RST is
           returned. It does this by examining the TCP Window field of the RST packets returned. On some systems,
           open ports use a positive window size (even for RST packets) while closed ones have a zero window. So
           instead of always listing a port as unfiltered when it receives a RST back, Window scan lists the port as
           open or closed if the TCP Window value in that reset is positive or zero, respectively.

           This scan relies on an implementation detail of a minority of systems out on the Internet, so you can't
           always trust it. Systems that don't support it will usually return all ports closed. Of course, it is
           possible that the machine really has no open ports. If most scanned ports are closed but a few common port
           numbers (such as 22, 25, 53) are filtered, the system is most likely susceptible. Occasionally, systems
           will even show the exact opposite behavior. If your scan shows 1,000 open ports and three closed or
           filtered ports, then those three may very well be the truly open ones.

       -sM (TCP Maimon scan)
           The Maimon scan is named after its discoverer, Uriel Maimon.  He described the technique in Phrack
           Magazine issue #49 (November 1996).  Nmap, which included this technique, was released two issues later.
           This technique is exactly the same as NULL, FIN, and Xmas scans, except that the probe is FIN/ACK.
           According to RFC 793[8] (TCP), a RST packet should be generated in response to such a probe whether the
           port is open or closed. However, Uriel noticed that many BSD-derived systems simply drop the packet if the
           port is open.

       --scanflags (Custom TCP scan)
           Truly advanced Nmap users need not limit themselves to the canned scan types offered. The --scanflags
           option allows you to design your own scan by specifying arbitrary TCP flags.  Let your creative juices
           flow, while evading intrusion detection systems whose vendors simply paged through the Nmap man page
           adding specific rules!

           The --scanflags argument can be a numerical flag value such as 9 (PSH and FIN), but using symbolic names
           is easier. Just mash together any combination of URG, ACK, PSH, RST, SYN, and FIN. For example,
           --scanflags URGACKPSHRSTSYNFIN sets everything, though it's not very useful for scanning. The order these
           are specified in is irrelevant.

           In addition to specifying the desired flags, you can specify a TCP scan type (such as -sA or -sF). That
           base type tells Nmap how to interpret responses. For example, a SYN scan considers no-response to indicate
           a filtered port, while a FIN scan treats the same as open|filtered. Nmap will behave the same way it does
           for the base scan type, except that it will use the TCP flags you specify instead. If you don't specify a
           base type, SYN scan is used.

       -sZ (SCTP COOKIE ECHO scan)
           SCTP COOKIE ECHO scan is a more advanced SCTP scan. It takes advantage of the fact that SCTP
           implementations should silently drop packets containing COOKIE ECHO chunks on open ports, but send an
           ABORT if the port is closed. The advantage of this scan type is that it is not as obvious a port scan than
           an INIT scan. Also, there may be non-stateful firewall rulesets blocking INIT chunks, but not COOKIE ECHO
           chunks. Don't be fooled into thinking that this will make a port scan invisible; a good IDS will be able
           to detect SCTP COOKIE ECHO scans too. The downside is that SCTP COOKIE ECHO scans cannot differentiate
           between open and filtered ports, leaving you with the state open|filtered in both cases.

       -sI zombie host[:probeport] (idle scan)
           This advanced scan method allows for a truly blind TCP port scan of the target (meaning no packets are
           sent to the target from your real IP address). Instead, a unique side-channel attack exploits predictable
           IP fragmentation ID sequence generation on the zombie host to glean information about the open ports on
           the target. IDS systems will display the scan as coming from the zombie machine you specify (which must be
           up and meet certain criteria).  This fascinating scan type is too complex to fully describe in this
           reference guide, so I wrote and posted an informal paper with full details at
           https://nmap.org/book/idlescan.html.

           Besides being extraordinarily stealthy (due to its blind nature), this scan type permits mapping out
           IP-based trust relationships between machines. The port listing shows open ports from the perspective of
           the zombie host.  So you can try scanning a target using various zombies that you think might be trusted
           (via router/packet filter rules).

           You can add a colon followed by a port number to the zombie host if you wish to probe a particular port on
           the zombie for IP ID changes. Otherwise Nmap will use the port it uses by default for TCP pings (80).

       -sO (IP protocol scan)
           IP protocol scan allows you to determine which IP protocols (TCP, ICMP, IGMP, etc.) are supported by
           target machines. This isn't technically a port scan, since it cycles through IP protocol numbers rather
           than TCP or UDP port numbers. Yet it still uses the -p option to select scanned protocol numbers, reports
           its results within the normal port table format, and even uses the same underlying scan engine as the true
           port scanning methods. So it is close enough to a port scan that it belongs here.

           Besides being useful in its own right, protocol scan demonstrates the power of open-source software. While
           the fundamental idea is pretty simple, I had not thought to add it nor received any requests for such
           functionality. Then in the summer of 2000, Gerhard Rieger conceived the idea, wrote an excellent patch
           implementing it, and sent it to the announce mailing list (then called nmap-hackers).  I incorporated that
           patch into the Nmap tree and released a new version the next day. Few pieces of commercial software have
           users enthusiastic enough to design and contribute their own improvements!

           Protocol scan works in a similar fashion to UDP scan. Instead of iterating through the port number field
           of a UDP packet, it sends IP packet headers and iterates through the eight-bit IP protocol field. The
           headers are usually empty, containing no data and not even the proper header for the claimed protocol. The
           exceptions are TCP, UDP, ICMP, SCTP, and IGMP. A proper protocol header for those is included since some
           systems won't send them otherwise and because Nmap already has functions to create them. Instead of
           watching for ICMP port unreachable messages, protocol scan is on the lookout for ICMP protocol unreachable
           messages. If Nmap receives any response in any protocol from the target host, Nmap marks that protocol as
           open. An ICMP protocol unreachable error (type 3, code 2) causes the protocol to be marked as closed while
           port unreachable (type 3, code 3) marks the protocol open. Other ICMP unreachable errors (type 3, code 0,
           1, 9, 10, or 13) cause the protocol to be marked filtered (though they prove that ICMP is open at the same
           time). If no response is received after retransmissions, the protocol is marked open|filtered

       -b FTP relay host (FTP bounce scan)
           An interesting feature of the FTP protocol (RFC 959[9]) is support for so-called proxy FTP connections.
           This allows a user to connect to one FTP server, then ask that files be sent to a third-party server. Such
           a feature is ripe for abuse on many levels, so most servers have ceased supporting it. One of the abuses
           this feature allows is causing the FTP server to port scan other hosts. Simply ask the FTP server to send
           a file to each interesting port of a target host in turn. The error message will describe whether the port
           is open or not. This is a good way to bypass firewalls because organizational FTP servers are often placed
           where they have more access to other internal hosts than any old Internet host would. Nmap supports FTP
           bounce scan with the -b option. It takes an argument of the form username:password@server:port.  Server is
           the name or IP address of a vulnerable FTP server. As with a normal URL, you may omit username:password,
           in which case anonymous login credentials (user: anonymous password:-wwwuser@) are used. The port number
           (and preceding colon) may be omitted as well, in which case the default FTP port (21) on server is used.

           This vulnerability was widespread in 1997 when Nmap was released, but has largely been fixed. Vulnerable
           servers are still around, so it is worth trying when all else fails. If bypassing a firewall is your goal,
           scan the target network for port 21 (or even for any FTP services if you scan all ports with version
           detection) and use the ftp-bounce NSE script. Nmap will tell you whether the host is vulnerable or not. If
           you are just trying to cover your tracks, you don't need to (and, in fact, shouldn't) limit yourself to
           hosts on the target network. Before you go scanning random Internet addresses for vulnerable FTP servers,
           consider that sysadmins may not appreciate you abusing their servers in this way.

PORT SPECIFICATION AND SCAN ORDER
       In addition to all of the scan methods discussed previously, Nmap offers options for specifying which ports
       are scanned and whether the scan order is randomized or sequential. By default, Nmap scans the most common
       1,000 ports for each protocol.

       -p port ranges (Only scan specified ports)
           This option specifies which ports you want to scan and overrides the default. Individual port numbers are
           OK, as are ranges separated by a hyphen (e.g.  1-1023). The beginning and/or end values of a range may be
           omitted, causing Nmap to use 1 and 65535, respectively. So you can specify -p- to scan ports from 1
           through 65535. Scanning port zero is allowed if you specify it explicitly. For IP protocol scanning (-sO),
           this option specifies the protocol numbers you wish to scan for (0–255).

           When scanning a combination of protocols (e.g. TCP and UDP), you can specify a particular protocol by
           preceding the port numbers by T: for TCP, U: for UDP, S: for SCTP, or P: for IP Protocol. The qualifier
           lasts until you specify another qualifier. For example, the argument -p U:53,111,137,T:21-25,80,139,8080
           would scan UDP ports 53, 111,and 137, as well as the listed TCP ports. Note that to scan both UDP and TCP,
           you have to specify -sU and at least one TCP scan type (such as -sS, -sF, or -sT). If no protocol
           qualifier is given, the port numbers are added to all protocol lists.  Ports can also be specified by name
           according to what the port is referred to in the nmap-services. You can even use the wildcards * and ?
           with the names. For example, to scan FTP and all ports whose names begin with “http”, use -p ftp,http*. Be
           careful about shell expansions and quote the argument to -p if unsure.

           Ranges of ports can be surrounded by square brackets to indicate ports inside that range that appear in
           nmap-services. For example, the following will scan all ports in nmap-services equal to or below 1024: -p
           [-1024]. Be careful with shell expansions and quote the argument to -p if unsure.

       --exclude-ports port ranges (Exclude the specified ports from scanning)
           This option specifies which ports you do want Nmap to exclude from scanning. The port ranges are specified
           similar to -p. For IP protocol scanning (-sO), this option specifies the protocol numbers you wish to
           exclude (0–255).

           When ports are asked to be excluded, they are excluded from all types of scans (i.e. they will not be
           scanned under any circumstances). This also includes the discovery phase.

       -F (Fast (limited port) scan)
           Specifies that you wish to scan fewer ports than the default. Normally Nmap scans the most common 1,000
           ports for each scanned protocol. With -F, this is reduced to 100.

           Nmap needs an nmap-services file with frequency information in order to know which ports are the most
           common. If port frequency information isn't available, perhaps because of the use of a custom
           nmap-services file, Nmap scans all named ports plus ports 1-1024. In that case, -F means to scan only
           ports that are named in the services file.

       -r (Don't randomize ports)
           By default, Nmap randomizes the scanned port order (except that certain commonly accessible ports are
           moved near the beginning for efficiency reasons). This randomization is normally desirable, but you can
           specify -r for sequential (sorted from lowest to highest) port scanning instead.

       --port-ratio ratio<decimal number between 0 and 1>
           Scans all ports in nmap-services file with a ratio greater than the one given.  ratio must be between 0.0
           and 1.0.

       --top-ports n
           Scans the n highest-ratio ports found in nmap-services file after excluding all ports specified by
           --exclude-ports.  n must be 1 or greater.

SERVICE AND VERSION DETECTION
       Point Nmap at a remote machine and it might tell you that ports 25/tcp, 80/tcp, and 53/udp are open. Using its
       nmap-services database of about 2,200 well-known services, Nmap would report that those ports probably
       correspond to a mail server (SMTP), web server (HTTP), and name server (DNS) respectively. This lookup is
       usually accurate—the vast majority of daemons listening on TCP port 25 are, in fact, mail servers. However,
       you should not bet your security on this! People can and do run services on strange ports.

       Even if Nmap is right, and the hypothetical server above is running SMTP, HTTP, and DNS servers, that is not a
       lot of information. When doing vulnerability assessments (or even simple network inventories) of your
       companies or clients, you really want to know which mail and DNS servers and versions are running. Having an
       accurate version number helps dramatically in determining which exploits a server is vulnerable to. Version
       detection helps you obtain this information.

       After TCP and/or UDP ports are discovered using one of the other scan methods, version detection interrogates
       those ports to determine more about what is actually running. The nmap-service-probes database contains probes
       for querying various services and match expressions to recognize and parse responses. Nmap tries to determine
       the service protocol (e.g. FTP, SSH, Telnet, HTTP), the application name (e.g. ISC BIND, Apache httpd, Solaris
       telnetd), the version number, hostname, device type (e.g. printer, router), the OS family (e.g. Windows,
       Linux). When possible, Nmap also gets the Common Platform Enumeration (CPE) representation of this
       information. Sometimes miscellaneous details like whether an X server is open to connections, the SSH protocol
       version, or the KaZaA user name, are available. Of course, most services don't provide all of this
       information. If Nmap was compiled with OpenSSL support, it will connect to SSL servers to deduce the service
       listening behind that encryption layer.  Some UDP ports are left in the open|filtered state after a UDP port
       scan is unable to determine whether the port is open or filtered. Version detection will try to elicit a
       response from these ports (just as it does with open ports), and change the state to open if it succeeds.
       open|filtered TCP ports are treated the same way. Note that the Nmap -A option enables version detection among
       other things.  A paper documenting the workings, usage, and customization of version detection is available at
       https://nmap.org/book/vscan.html.

       When RPC services are discovered, the Nmap RPC grinder is automatically used to determine the RPC program and
       version numbers. It takes all the TCP/UDP ports detected as RPC and floods them with SunRPC program NULL
       commands in an attempt to determine whether they are RPC ports, and if so, what program and version number
       they serve up. Thus you can effectively obtain the same info as rpcinfo -p even if the target's portmapper is
       behind a firewall (or protected by TCP wrappers). Decoys do not currently work with RPC scan.

       When Nmap receives responses from a service but cannot match them to its database, it prints out a special
       fingerprint and a URL for you to submit if to if you know for sure what is running on the port. Please take a
       couple minutes to make the submission so that your find can benefit everyone. Thanks to these submissions,
       Nmap has about 6,500 pattern matches for more than 650 protocols such as SMTP, FTP, HTTP, etc.

       Version detection is enabled and controlled with the following options:

       -sV (Version detection)
           Enables version detection, as discussed above. Alternatively, you can use -A, which enables version
           detection among other things.

           -sR is an alias for -sV. Prior to March 2011, it was used to active the RPC grinder separately from
           version detection, but now these options are always combined.

       --allports (Don't exclude any ports from version detection)
           By default, Nmap version detection skips TCP port 9100 because some printers simply print anything sent to
           that port, leading to dozens of pages of HTTP GET requests, binary SSL session requests, etc. This
           behavior can be changed by modifying or removing the Exclude directive in nmap-service-probes, or you can
           specify --allports to scan all ports regardless of any Exclude directive.

       --version-intensity intensity (Set version scan intensity)
           When performing a version scan (-sV), Nmap sends a series of probes, each of which is assigned a rarity
           value between one and nine. The lower-numbered probes are effective against a wide variety of common
           services, while the higher-numbered ones are rarely useful. The intensity level specifies which probes
           should be applied. The higher the number, the more likely it is the service will be correctly identified.
           However, high intensity scans take longer. The intensity must be between 0 and 9.  The default is 7.  When
           a probe is registered to the target port via the nmap-service-probes ports directive, that probe is tried
           regardless of intensity level. This ensures that the DNS probes will always be attempted against any open
           port 53, the SSL probe will be done against 443, etc.

       --version-light (Enable light mode)
           This is a convenience alias for --version-intensity 2. This light mode makes version scanning much faster,
           but it is slightly less likely to identify services.

       --version-all (Try every single probe)
           An alias for --version-intensity 9, ensuring that every single probe is attempted against each port.

       --version-trace (Trace version scan activity)
           This causes Nmap to print out extensive debugging info about what version scanning is doing. It is a
           subset of what you get with --packet-trace.

OS DETECTION
       One of Nmap's best-known features is remote OS detection using TCP/IP stack fingerprinting. Nmap sends a
       series of TCP and UDP packets to the remote host and examines practically every bit in the responses. After
       performing dozens of tests such as TCP ISN sampling, TCP options support and ordering, IP ID sampling, and the
       initial window size check, Nmap compares the results to its nmap-os-db database of more than 2,600 known OS
       fingerprints and prints out the OS details if there is a match. Each fingerprint includes a freeform textual
       description of the OS, and a classification which provides the vendor name (e.g. Sun), underlying OS (e.g.
       Solaris), OS generation (e.g. 10), and device type (general purpose, router, switch, game console, etc). Most
       fingerprints also have a Common Platform Enumeration (CPE) representation, like cpe:/o:linux:linux_kernel:2.6.

       If Nmap is unable to guess the OS of a machine, and conditions are good (e.g. at least one open port and one
       closed port were found), Nmap will provide a URL you can use to submit the fingerprint if you know (for sure)
       the OS running on the machine. By doing this you contribute to the pool of operating systems known to Nmap and
       thus it will be more accurate for everyone.

       OS detection enables some other tests which make use of information that is gathered during the process
       anyway. One of these is TCP Sequence Predictability Classification. This measures approximately how hard it is
       to establish a forged TCP connection against the remote host. It is useful for exploiting source-IP based
       trust relationships (rlogin, firewall filters, etc) or for hiding the source of an attack. This sort of
       spoofing is rarely performed any more, but many machines are still vulnerable to it. The actual difficulty
       number is based on statistical sampling and may fluctuate. It is generally better to use the English
       classification such as “worthy challenge” or “trivial joke”. This is only reported in normal output in verbose
       (-v) mode. When verbose mode is enabled along with -O, IP ID sequence generation is also reported. Most
       machines are in the “incremental” class, which means that they increment the ID field in the IP header for
       each packet they send. This makes them vulnerable to several advanced information gathering and spoofing
       attacks.

       Another bit of extra information enabled by OS detection is a guess at a target's uptime. This uses the TCP
       timestamp option (RFC 1323[10]) to guess when a machine was last rebooted. The guess can be inaccurate due to
       the timestamp counter not being initialized to zero or the counter overflowing and wrapping around, so it is
       printed only in verbose mode.

       A paper documenting the workings, usage, and customization of OS detection is available at
       https://nmap.org/book/osdetect.html.

       OS detection is enabled and controlled with the following options:

       -O (Enable OS detection)
           Enables OS detection, as discussed above. Alternatively, you can use -A to enable OS detection along with
           other things.

       --osscan-limit (Limit OS detection to promising targets)
           OS detection is far more effective if at least one open and one closed TCP port are found. Set this option
           and Nmap will not even try OS detection against hosts that do not meet this criteria. This can save
           substantial time, particularly on -Pn scans against many hosts. It only matters when OS detection is
           requested with -O or -A.

       --osscan-guess; --fuzzy (Guess OS detection results)
           When Nmap is unable to detect a perfect OS match, it sometimes offers up near-matches as possibilities.
           The match has to be very close for Nmap to do this by default. Either of these (equivalent) options make
           Nmap guess more aggressively. Nmap will still tell you when an imperfect match is printed and display its
           confidence level (percentage) for each guess.

       --max-os-tries (Set the maximum number of OS detection tries against a target)
           When Nmap performs OS detection against a target and fails to find a perfect match, it usually repeats the
           attempt. By default, Nmap tries five times if conditions are favorable for OS fingerprint submission, and
           twice when conditions aren't so good. Specifying a lower --max-os-tries value (such as 1) speeds Nmap up,
           though you miss out on retries which could potentially identify the OS. Alternatively, a high value may be
           set to allow even more retries when conditions are favorable. This is rarely done, except to generate
           better fingerprints for submission and integration into the Nmap OS database.

NMAP SCRIPTING ENGINE (NSE)
       The Nmap Scripting Engine (NSE) is one of Nmap's most powerful and flexible features. It allows users to write
       (and share) simple scripts (using the Lua programming language[11]

       ) to automate a wide variety of networking tasks. Those scripts are executed in parallel with the speed and
       efficiency you expect from Nmap. Users can rely on the growing and diverse set of scripts distributed with
       Nmap, or write their own to meet custom needs.

       Tasks we had in mind when creating the system include network discovery, more sophisticated version detection,
       vulnerability detection. NSE can even be used for vulnerability exploitation.

       To reflect those different uses and to simplify the choice of which scripts to run, each script contains a
       field associating it with one or more categories. Currently defined categories are auth, broadcast, default.
       discovery, dos, exploit, external, fuzzer, intrusive, malware, safe, version, and vuln. These are all
       described at https://nmap.org/book/nse-usage.html#nse-categories.

       Scripts are not run in a sandbox and thus could accidentally or maliciously damage your system or invade your
       privacy. Never run scripts from third parties unless you trust the authors or have carefully audited the
       scripts yourself.

       The Nmap Scripting Engine is described in detail at https://nmap.org/book/nse.html

       and is controlled by the following options:

       -sC
           Performs a script scan using the default set of scripts. It is equivalent to --script=default. Some of the
           scripts in this category are considered intrusive and should not be run against a target network without
           permission.

       --script filename|category|directory|expression[,...]
           Runs a script scan using the comma-separated list of filenames, script categories, and directories. Each
           element in the list may also be a Boolean expression describing a more complex set of scripts. Each
           element is interpreted first as an expression, then as a category, and finally as a file or directory
           name.

           There are two special features for advanced users only. One is to prefix script names and expressions with
           + to force them to run even if they normally wouldn't (e.g. the relevant service wasn't detected on the
           target port). The other is that the argument all may be used to specify every script in Nmap's database.
           Be cautious with this because NSE contains dangerous scripts such as exploits, brute force authentication
           crackers, and denial of service attacks.

           File and directory names may be relative or absolute. Absolute names are used directly. Relative paths are
           looked for in the scripts of each of the following places until found:
               --datadir
               $NMAPDIR
               ~/.nmap (not searched on Windows)
               HOME\AppData\Roaming\nmap (only on Windows)
               the directory containing the nmap executable
               the directory containing the nmap executable, followed by ../share/nmap
               NMAPDATADIR
               the current directory.

           When a directory name is given, Nmap loads every file in the directory whose name ends with .nse. All
           other files are ignored and directories are not searched recursively. When a filename is given, it does
           not have to have the .nse extension; it will be added automatically if necessary.  Nmap scripts are stored
           in a scripts subdirectory of the Nmap data directory by default (see
           https://nmap.org/book/data-files.html).

           For efficiency, scripts are indexed in a database stored in scripts/script.db, which lists the category or
           categories in which each script belongs.  When referring to scripts from script.db by name, you can use a
           shell-style ‘*’ wildcard.

           nmap --script "http-*"
               Loads all scripts whose name starts with http-, such as http-auth and http-open-proxy. The argument to
               --script had to be in quotes to protect the wildcard from the shell.

           More complicated script selection can be done using the and, or, and not operators to build Boolean
           expressions. The operators have the same precedence[12] as in Lua: not is the highest, followed by and and
           then or. You can alter precedence by using parentheses. Because expressions contain space characters it is
           necessary to quote them.

           nmap --script "not intrusive"
               Loads every script except for those in the intrusive category.

           nmap --script "default or safe"
               This is functionally equivalent to nmap --script "default,safe". It loads all scripts that are in the
               default category or the safe category or both.

           nmap --script "default and safe"
               Loads those scripts that are in both the default and safe categories.

           nmap --script "(default or safe or intrusive) and not http-*"
               Loads scripts in the default, safe, or intrusive categories, except for those whose names start with
               http-.

       --script-args n1=v1,n2={n3=v3},n4={v4,v5}
           Lets you provide arguments to NSE scripts. Arguments are a comma-separated list of name=value pairs. Names
           and values may be strings not containing whitespace or the characters ‘{’, ‘}’, ‘=’, or ‘,’. To include
           one of these characters in a string, enclose the string in single or double quotes. Within a quoted
           string, ‘\’ escapes a quote. A backslash is only used to escape quotation marks in this special case; in
           all other cases a backslash is interpreted literally. Values may also be tables enclosed in {}, just as in
           Lua. A table may contain simple string values or more name-value pairs, including nested tables. Many
           scripts qualify their arguments with the script name, as in xmpp-info.server_name. You may use that full
           qualified version to affect just the specified script, or you may pass the unqualified version
           (server_name in this case) to affect all scripts using that argument name. A script will first check for
           its fully qualified argument name (the name specified in its documentation) before it accepts an
           unqualified argument name. A complex example of script arguments is --script-args
           'user=foo,pass=",{}=bar",whois={whodb=nofollow+ripe},xmpp-info.server_name=localhost'. The online NSE
           Documentation Portal at https://nmap.org/nsedoc/ lists the arguments that each script accepts.

       --script-args-file filename
           Lets you load arguments to NSE scripts from a file. Any arguments on the command line supersede ones in
           the file. The file can be an absolute path, or a path relative to Nmap's usual search path (NMAPDIR, etc.)
           Arguments can be comma-separated or newline-separated, but otherwise follow the same rules as for
           --script-args, without requiring special quoting and escaping, since they are not parsed by the shell.

       --script-help filename|category|directory|expression|all[,...]
           Shows help about scripts. For each script matching the given specification, Nmap prints the script name,
           its categories, and its description. The specifications are the same as those accepted by --script; so for
           example if you want help about the ftp-anon script, you would run nmap --script-help ftp-anon. In addition
           to getting help for individual scripts, you can use this as a preview of what scripts will be run for a
           specification, for example with nmap --script-help default.

       --script-trace
           This option does what --packet-trace does, just one ISO layer higher. If this option is specified all
           incoming and outgoing communication performed by a script is printed. The displayed information includes
           the communication protocol, the source, the target and the transmitted data. If more than 5% of all
           transmitted data is not printable, then the trace output is in a hex dump format. Specifying
           --packet-trace enables script tracing too.

       --script-updatedb
           This option updates the script database found in scripts/script.db which is used by Nmap to determine the
           available default scripts and categories. It is only necessary to update the database if you have added or
           removed NSE scripts from the default scripts directory or if you have changed the categories of any
           script. This option is generally used by itself: nmap --script-updatedb.

TIMING AND PERFORMANCE
       One of my highest Nmap development priorities has always been performance. A default scan (nmap hostname) of a
       host on my local network takes a fifth of a second. That is barely enough time to blink, but adds up when you
       are scanning hundreds or thousands of hosts. Moreover, certain scan options such as UDP scanning and version
       detection can increase scan times substantially. So can certain firewall configurations, particularly response
       rate limiting. While Nmap utilizes parallelism and many advanced algorithms to accelerate these scans, the
       user has ultimate control over how Nmap runs. Expert users carefully craft Nmap commands to obtain only the
       information they care about while meeting their time constraints.

       Techniques for improving scan times include omitting non-critical tests, and upgrading to the latest version
       of Nmap (performance enhancements are made frequently). Optimizing timing parameters can also make a
       substantial difference. Those options are listed below.

       Some options accept a time parameter. This is specified in seconds by default, though you can append ‘ms’,
       ‘s’, ‘m’, or ‘h’ to the value to specify milliseconds, seconds, minutes, or hours. So the --host-timeout
       arguments 900000ms, 900, 900s, and 15m all do the same thing.

       --min-hostgroup numhosts; --max-hostgroup numhosts (Adjust parallel scan group sizes)
           Nmap has the ability to port scan or version scan multiple hosts in parallel. Nmap does this by dividing
           the target IP space into groups and then scanning one group at a time. In general, larger groups are more
           efficient. The downside is that host results can't be provided until the whole group is finished. So if
           Nmap started out with a group size of 50, the user would not receive any reports (except for the updates
           offered in verbose mode) until the first 50 hosts are completed.

           By default, Nmap takes a compromise approach to this conflict. It starts out with a group size as low as
           five so the first results come quickly and then increases the groupsize to as high as 1024. The exact
           default numbers depend on the options given. For efficiency reasons, Nmap uses larger group sizes for UDP
           or few-port TCP scans.

           When a maximum group size is specified with --max-hostgroup, Nmap will never exceed that size. Specify a
           minimum size with --min-hostgroup and Nmap will try to keep group sizes above that level. Nmap may have to
           use smaller groups than you specify if there are not enough target hosts left on a given interface to
           fulfill the specified minimum. Both may be set to keep the group size within a specific range, though this
           is rarely desired.

           These options do not have an effect during the host discovery phase of a scan. This includes plain ping
           scans (-sn). Host discovery always works in large groups of hosts to improve speed and accuracy.

           The primary use of these options is to specify a large minimum group size so that the full scan runs more
           quickly. A common choice is 256 to scan a network in Class C sized chunks. For a scan with many ports,
           exceeding that number is unlikely to help much. For scans of just a few port numbers, host group sizes of
           2048 or more may be helpful.

       --min-parallelism numprobes; --max-parallelism numprobes (Adjust probe parallelization)
           These options control the total number of probes that may be outstanding for a host group. They are used
           for port scanning and host discovery. By default, Nmap calculates an ever-changing ideal parallelism based
           on network performance. If packets are being dropped, Nmap slows down and allows fewer outstanding probes.
           The ideal probe number slowly rises as the network proves itself worthy. These options place minimum or
           maximum bounds on that variable. By default, the ideal parallelism can drop to one if the network proves
           unreliable and rise to several hundred in perfect conditions.

           The most common usage is to set --min-parallelism to a number higher than one to speed up scans of poorly
           performing hosts or networks. This is a risky option to play with, as setting it too high may affect
           accuracy. Setting this also reduces Nmap's ability to control parallelism dynamically based on network
           conditions. A value of 10 might be reasonable, though I only adjust this value as a last resort.

           The --max-parallelism option is sometimes set to one to prevent Nmap from sending more than one probe at a
           time to hosts. The --scan-delay option, discussed later, is another way to do this.

       --min-rtt-timeout time, --max-rtt-timeout time, --initial-rtt-timeout time (Adjust probe timeouts)
           Nmap maintains a running timeout value for determining how long it will wait for a probe response before
           giving up or retransmitting the probe. This is calculated based on the response times of previous probes.

           If the network latency shows itself to be significant and variable, this timeout can grow to several
           seconds. It also starts at a conservative (high) level and may stay that way for a while when Nmap scans
           unresponsive hosts.

           Specifying a lower --max-rtt-timeout and --initial-rtt-timeout than the defaults can cut scan times
           significantly. This is particularly true for pingless (-Pn) scans, and those against heavily filtered
           networks. Don't get too aggressive though. The scan can end up taking longer if you specify such a low
           value that many probes are timing out and retransmitting while the response is in transit.

           If all the hosts are on a local network, 100 milliseconds (--max-rtt-timeout 100ms) is a reasonable
           aggressive value. If routing is involved, ping a host on the network first with the ICMP ping utility, or
           with a custom packet crafter such as Nping that is more likely to get through a firewall. Look at the
           maximum round trip time out of ten packets or so. You might want to double that for the
           --initial-rtt-timeout and triple or quadruple it for the --max-rtt-timeout. I generally do not set the
           maximum RTT below 100 ms, no matter what the ping times are. Nor do I exceed 1000 ms.

           --min-rtt-timeout is a rarely used option that could be useful when a network is so unreliable that even
           Nmap's default is too aggressive. Since Nmap only reduces the timeout down to the minimum when the network
           seems to be reliable, this need is unusual and should be reported as a bug to the nmap-dev mailing list.

       --max-retries numtries (Specify the maximum number of port scan probe retransmissions)
           When Nmap receives no response to a port scan probe, it could mean the port is filtered. Or maybe the
           probe or response was simply lost on the network. It is also possible that the target host has rate
           limiting enabled that temporarily blocked the response. So Nmap tries again by retransmitting the initial
           probe. If Nmap detects poor network reliability, it may try many more times before giving up on a port.
           While this benefits accuracy, it also lengthens scan times. When performance is critical, scans may be
           sped up by limiting the number of retransmissions allowed. You can even specify --max-retries 0 to prevent
           any retransmissions, though that is only recommended for situations such as informal surveys where
           occasional missed ports and hosts are acceptable.

           The default (with no -T template) is to allow ten retransmissions. If a network seems reliable and the
           target hosts aren't rate limiting, Nmap usually only does one retransmission. So most target scans aren't
           even affected by dropping --max-retries to a low value such as three. Such values can substantially speed
           scans of slow (rate limited) hosts. You usually lose some information when Nmap gives up on ports early,
           though that may be preferable to letting the --host-timeout expire and losing all information about the
           target.

       --host-timeout time (Give up on slow target hosts)
           Some hosts simply take a long time to scan. This may be due to poorly performing or unreliable networking
           hardware or software, packet rate limiting, or a restrictive firewall. The slowest few percent of the
           scanned hosts can eat up a majority of the scan time. Sometimes it is best to cut your losses and skip
           those hosts initially. Specify --host-timeout with the maximum amount of time you are willing to wait. For
           example, specify 30m to ensure that Nmap doesn't waste more than half an hour on a single host. Note that
           Nmap may be scanning other hosts at the same time during that half an hour, so it isn't a complete loss. A
           host that times out is skipped. No port table, OS detection, or version detection results are printed for
           that host.

       --script-timeout time
           While some scripts complete in fractions of a second, others can take hours or more depending on the
           nature of the script, arguments passed in, network and application conditions, and more. The
           --script-timeout option sets a ceiling on script execution time. Any script instance which exceeds that
           time will be terminated and no output will be shown. If debugging (-d) is enabled, Nmap will report on
           each timeout. For host and service scripts, a script instance only scans a single target host or port and
           the timeout period will be reset for the next instance.

       --scan-delay time; --max-scan-delay time (Adjust delay between probes)
           This option causes Nmap to wait at least the given amount of time between each probe it sends to a given
           host. This is particularly useful in the case of rate limiting.  Solaris machines (among many others) will
           usually respond to UDP scan probe packets with only one ICMP message per second. Any more than that sent
           by Nmap will be wasteful. A --scan-delay of 1s will keep Nmap at that slow rate. Nmap tries to detect rate
           limiting and adjust the scan delay accordingly, but it doesn't hurt to specify it explicitly if you
           already know what rate works best.

           When Nmap adjusts the scan delay upward to cope with rate limiting, the scan slows down dramatically. The
           --max-scan-delay option specifies the largest delay that Nmap will allow. A low --max-scan-delay can speed
           up Nmap, but it is risky. Setting this value too low can lead to wasteful packet retransmissions and
           possible missed ports when the target implements strict rate limiting.

           Another use of --scan-delay is to evade threshold based intrusion detection and prevention systems
           (IDS/IPS).

       --min-rate number; --max-rate number (Directly control the scanning rate)
           Nmap's dynamic timing does a good job of finding an appropriate speed at which to scan. Sometimes,
           however, you may happen to know an appropriate scanning rate for a network, or you may have to guarantee
           that a scan will be finished by a certain time. Or perhaps you must keep Nmap from scanning too quickly.
           The --min-rate and --max-rate options are designed for these situations.

           When the --min-rate option is given Nmap will do its best to send packets as fast as or faster than the
           given rate. The argument is a positive real number representing a packet rate in packets per second. For
           example, specifying --min-rate 300 means that Nmap will try to keep the sending rate at or above 300
           packets per second. Specifying a minimum rate does not keep Nmap from going faster if conditions warrant.

           Likewise, --max-rate limits a scan's sending rate to a given maximum. Use --max-rate 100, for example, to
           limit sending to 100 packets per second on a fast network. Use --max-rate 0.1 for a slow scan of one
           packet every ten seconds. Use --min-rate and --max-rate together to keep the rate inside a certain range.

           These two options are global, affecting an entire scan, not individual hosts. They only affect port scans
           and host discovery scans. Other features like OS detection implement their own timing.

           There are two conditions when the actual scanning rate may fall below the requested minimum. The first is
           if the minimum is faster than the fastest rate at which Nmap can send, which is dependent on hardware. In
           this case Nmap will simply send packets as fast as possible, but be aware that such high rates are likely
           to cause a loss of accuracy. The second case is when Nmap has nothing to send, for example at the end of a
           scan when the last probes have been sent and Nmap is waiting for them to time out or be responded to. It's
           normal to see the scanning rate drop at the end of a scan or in between hostgroups. The sending rate may
           temporarily exceed the maximum to make up for unpredictable delays, but on average the rate will stay at
           or below the maximum.

           Specifying a minimum rate should be done with care. Scanning faster than a network can support may lead to
           a loss of accuracy. In some cases, using a faster rate can make a scan take longer than it would with a
           slower rate. This is because Nmap's

           adaptive retransmission algorithms will detect the network congestion caused by an excessive scanning rate
           and increase the number of retransmissions in order to improve accuracy. So even though packets are sent
           at a higher rate, more packets are sent overall. Cap the number of retransmissions with the --max-retries
           option if you need to set an upper limit on total scan time.

       --defeat-rst-ratelimit
           Many hosts have long used rate limiting to reduce the number of ICMP error messages (such as
           port-unreachable errors) they send. Some systems now apply similar rate limits to the RST (reset) packets
           they generate. This can slow Nmap down dramatically as it adjusts its timing to reflect those rate limits.
           You can tell Nmap to ignore those rate limits (for port scans such as SYN scan which don't treat
           non-responsive ports as open) by specifying --defeat-rst-ratelimit.

           Using this option can reduce accuracy, as some ports will appear non-responsive because Nmap didn't wait
           long enough for a rate-limited RST response. With a SYN scan, the non-response results in the port being
           labeled filtered rather than the closed state we see when RST packets are received. This option is useful
           when you only care about open ports, and distinguishing between closed and filtered ports isn't worth the
           extra time.

       --defeat-icmp-ratelimit
           Similar to --defeat-rst-ratelimit, the --defeat-icmp-ratelimit option trades accuracy for speed,
           increasing UDP scanning speed against hosts that rate-limit ICMP error messages. Because this option
           causes Nmap to not delay in order to receive the port unreachable messages, a non-responsive port will be
           labeled closed|filtered instead of the default open|filtered. This has the effect of only treating ports
           which actually respond via UDP as open. Since many UDP services do not respond in this way, the chance for
           inaccuracy is greater with this option than with --defeat-rst-ratelimit.

       --nsock-engine epoll|kqueue|poll|select
           Enforce use of a given nsock IO multiplexing engine. Only the select(2)-based fallback engine is
           guaranteed to be available on your system. Engines are named after the name of the IO management facility
           they leverage. Engines currently implemented are epoll, kqueue, poll, and select, but not all will be
           present on any platform. Use nmap -V to see which engines are supported.

       -T paranoid|sneaky|polite|normal|aggressive|insane (Set a timing template)
           While the fine-grained timing controls discussed in the previous section are powerful and effective, some
           people find them confusing. Moreover, choosing the appropriate values can sometimes take more time than
           the scan you are trying to optimize. Fortunately, Nmap offers a simpler approach, with six timing
           templates. You can specify them with the -T option and their number (0–5) or their name. The template
           names are paranoid (0), sneaky (1), polite (2), normal (3), aggressive (4), and insane (5). The first two
           are for IDS evasion. Polite mode slows down the scan to use less bandwidth and target machine resources.
           Normal mode is the default and so -T3 does nothing. Aggressive mode speeds scans up by making the
           assumption that you are on a reasonably fast and reliable network. Finally insane mode assumes that you
           are on an extraordinarily fast network or are willing to sacrifice some accuracy for speed.

           These templates allow the user to specify how aggressive they wish to be, while leaving Nmap to pick the
           exact timing values. The templates also make some minor speed adjustments for which fine-grained control
           options do not currently exist. For example, -T4 prohibits the dynamic scan delay from exceeding 10 ms for
           TCP ports and -T5 caps that value at 5 ms. Templates can be used in combination with fine-grained
           controls, and the fine-grained controls that you specify will take precedence over the timing template
           default for that parameter. I recommend using -T4 when scanning reasonably modern and reliable networks.
           Keep that option even when you add fine-grained controls so that you benefit from those extra minor
           optimizations that it enables.

           If you are on a decent broadband or ethernet connection, I would recommend always using -T4. Some people
           love -T5 though it is too aggressive for my taste. People sometimes specify -T2 because they think it is
           less likely to crash hosts or because they consider themselves to be polite in general. They often don't
           realize just how slow -T polite really is. Their scan may take ten times longer than a default scan.
           Machine crashes and bandwidth problems are rare with the default timing options (-T3) and so I normally
           recommend that for cautious scanners. Omitting version detection is far more effective than playing with
           timing values at reducing these problems.

           While -T0 and -T1 may be useful for avoiding IDS alerts, they will take an extraordinarily long time to
           scan thousands of machines or ports. For such a long scan, you may prefer to set the exact timing values
           you need rather than rely on the canned -T0 and -T1 values.

           The main effects of T0 are serializing the scan so only one port is scanned at a time, and waiting five
           minutes between sending each probe.  T1 and T2 are similar but they only wait 15 seconds and 0.4 seconds,
           respectively, between probes.  T3 is Nmap's default behavior, which includes parallelization.  -T4 does
           the equivalent of --max-rtt-timeout 1250ms --min-rtt-timeout 100ms --initial-rtt-timeout 500ms
           --max-retries 6 and sets the maximum TCP scan delay to 10 milliseconds.  T5 does the equivalent of
           --max-rtt-timeout 300ms --min-rtt-timeout 50ms --initial-rtt-timeout 250ms --max-retries 2 --host-timeout
           15m --script-timeout 10m as well as setting the maximum TCP scan delay to 5 ms.

FIREWALL/IDS EVASION AND SPOOFING
       Many Internet pioneers envisioned a global open network with a universal IP address space allowing virtual
       connections between any two nodes. This allows hosts to act as true peers, serving and retrieving information
       from each other. People could access all of their home systems from work, changing the climate control
       settings or unlocking the doors for early guests. This vision of universal connectivity has been stifled by
       address space shortages and security concerns. In the early 1990s, organizations began deploying firewalls for
       the express purpose of reducing connectivity. Huge networks were cordoned off from the unfiltered Internet by
       application proxies, network address translation, and packet filters. The unrestricted flow of information
       gave way to tight regulation of approved communication channels and the content that passes over them.

       Network obstructions such as firewalls can make mapping a network exceedingly difficult. It will not get any
       easier, as stifling casual reconnaissance is often a key goal of implementing the devices. Nevertheless, Nmap
       offers many features to help understand these complex networks, and to verify that filters are working as
       intended. It even supports mechanisms for bypassing poorly implemented defenses. One of the best methods of
       understanding your network security posture is to try to defeat it. Place yourself in the mind-set of an
       attacker, and deploy techniques from this section against your networks. Launch an FTP bounce scan, idle scan,
       fragmentation attack, or try to tunnel through one of your own proxies.

       In addition to restricting network activity, companies are increasingly monitoring traffic with intrusion
       detection systems (IDS). All of the major IDSs ship with rules designed to detect Nmap scans because scans are
       sometimes a precursor to attacks. Many of these products have recently morphed into intrusion prevention
       systems (IPS) that actively block traffic deemed malicious. Unfortunately for network administrators and IDS
       vendors, reliably detecting bad intentions by analyzing packet data is a tough problem. Attackers with
       patience, skill, and the help of certain Nmap options can usually pass by IDSs undetected. Meanwhile,
       administrators must cope with large numbers of false positive results where innocent activity is misdiagnosed
       and alerted on or blocked.

       Occasionally people suggest that Nmap should not offer features for evading firewall rules or sneaking past
       IDSs. They argue that these features are just as likely to be misused by attackers as used by administrators
       to enhance security. The problem with this logic is that these methods would still be used by attackers, who
       would just find other tools or patch the functionality into Nmap. Meanwhile, administrators would find it that
       much harder to do their jobs. Deploying only modern, patched FTP servers is a far more powerful defense than
       trying to prevent the distribution of tools implementing the FTP bounce attack.

       There is no magic bullet (or Nmap option) for detecting and subverting firewalls and IDS systems. It takes
       skill and experience. A tutorial is beyond the scope of this reference guide, which only lists the relevant
       options and describes what they do.

       -f (fragment packets); --mtu (using the specified MTU)
           The -f option causes the requested scan (including ping scans) to use tiny fragmented IP packets. The idea
           is to split up the TCP header over several packets to make it harder for packet filters, intrusion
           detection systems, and other annoyances to detect what you are doing. Be careful with this! Some programs
           have trouble handling these tiny packets. The old-school sniffer named Sniffit segmentation faulted
           immediately upon receiving the first fragment. Specify this option once, and Nmap splits the packets into
           eight bytes or less after the IP header. So a 20-byte TCP header would be split into three packets. Two
           with eight bytes of the TCP header, and one with the final four. Of course each fragment also has an IP
           header. Specify -f again to use 16 bytes per fragment (reducing the number of fragments).  Or you can
           specify your own offset size with the --mtu option. Don't also specify -f if you use --mtu. The offset
           must be a multiple of eight. While fragmented packets won't get by packet filters and firewalls that queue
           all IP fragments, such as the CONFIG_IP_ALWAYS_DEFRAG option in the Linux kernel, some networks can't
           afford the performance hit this causes and thus leave it disabled. Others can't enable this because
           fragments may take different routes into their networks. Some source systems defragment outgoing packets
           in the kernel. Linux with the iptables connection tracking module is one such example. Do a scan while a
           sniffer such as Wireshark is running to ensure that sent packets are fragmented. If your host OS is
           causing problems, try the --send-eth option to bypass the IP layer and send raw ethernet frames.

           Fragmentation is only supported for Nmap's raw packet features, which includes TCP and UDP port scans
           (except connect scan and FTP bounce scan) and OS detection. Features such as version detection and the
           Nmap Scripting Engine generally don't support fragmentation because they rely on your host's TCP stack to
           communicate with target services.

       -D decoy1[,decoy2][,ME][,...] (Cloak a scan with decoys)
           Causes a decoy scan to be performed, which makes it appear to the remote host that the host(s) you specify
           as decoys are scanning the target network too. Thus their IDS might report 5–10 port scans from unique IP
           addresses, but they won't know which IP was scanning them and which were innocent decoys. While this can
           be defeated through router path tracing, response-dropping, and other active mechanisms, it is generally
           an effective technique for hiding your IP address.

           Separate each decoy host with commas, and you can optionally use ME as one of the decoys to represent the
           position for your real IP address. If you put ME in the sixth position or later, some common port scan
           detectors (such as Solar Designer's excellent Scanlogd) are unlikely to show your IP address at all. If
           you don't use ME, Nmap will put you in a random position. You can also use RND to generate a random,
           non-reserved IP address, or RND:number to generate number addresses.

           Note that the hosts you use as decoys should be up or you might accidentally SYN flood your targets. Also
           it will be pretty easy to determine which host is scanning if only one is actually up on the network. You
           might want to use IP addresses instead of names (so the decoy networks don't see you in their nameserver
           logs). Right now random IP address generation is only supported with IPv4

           Decoys are used both in the initial ping scan (using ICMP, SYN, ACK, or whatever) and during the actual
           port scanning phase. Decoys are also used during remote OS detection (-O). Decoys do not work with version
           detection or TCP connect scan. When a scan delay is in effect, the delay is enforced between each batch of
           spoofed probes, not between each individual probe. Because decoys are sent as a batch all at once, they
           may temporarily violate congestion control limits.

           It is worth noting that using too many decoys may slow your scan and potentially even make it less
           accurate. Also, some ISPs will filter out your spoofed packets, but many do not restrict spoofed IP
           packets at all.

       -S IP_Address (Spoof source address)
           In some circumstances, Nmap may not be able to determine your source address (Nmap will tell you if this
           is the case). In this situation, use -S with the IP address of the interface you wish to send packets
           through.

           Another possible use of this flag is to spoof the scan to make the targets think that someone else is
           scanning them. Imagine a company being repeatedly port scanned by a competitor! The -e option and -Pn are
           generally required for this sort of usage. Note that you usually won't receive reply packets back (they
           will be addressed to the IP you are spoofing), so Nmap won't produce useful reports.

       -e interface (Use specified interface)
           Tells Nmap what interface to send and receive packets on. Nmap should be able to detect this
           automatically, but it will tell you if it cannot.

       --source-port portnumber; -g portnumber (Spoof source port number)
           One surprisingly common misconfiguration is to trust traffic based only on the source port number. It is
           easy to understand how this comes about. An administrator will set up a shiny new firewall, only to be
           flooded with complaints from ungrateful users whose applications stopped working. In particular, DNS may
           be broken because the UDP DNS replies from external servers can no longer enter the network. FTP is
           another common example. In active FTP transfers, the remote server tries to establish a connection back to
           the client to transfer the requested file.

           Secure solutions to these problems exist, often in the form of application-level proxies or
           protocol-parsing firewall modules. Unfortunately there are also easier, insecure solutions. Noting that
           DNS replies come from port 53 and active FTP from port 20, many administrators have fallen into the trap
           of simply allowing incoming traffic from those ports. They often assume that no attacker would notice and
           exploit such firewall holes. In other cases, administrators consider this a short-term stop-gap measure
           until they can implement a more secure solution. Then they forget the security upgrade.

           Overworked network administrators are not the only ones to fall into this trap. Numerous products have
           shipped with these insecure rules. Even Microsoft has been guilty. The IPsec filters that shipped with
           Windows 2000 and Windows XP contain an implicit rule that allows all TCP or UDP traffic from port 88
           (Kerberos). In another well-known case, versions of the Zone Alarm personal firewall up to 2.1.25 allowed
           any incoming UDP packets with the source port 53 (DNS) or 67 (DHCP).

           Nmap offers the -g and --source-port options (they are equivalent) to exploit these weaknesses. Simply
           provide a port number and Nmap will send packets from that port where possible. Most scanning operations
           that use raw sockets, including SYN and UDP scans, support the option completely. The option notably
           doesn't have an effect for any operations that use normal operating system sockets, including DNS
           requests, TCP connect scan, version detection, and script scanning. Setting the source port also doesn't
           work for OS detection, because Nmap must use different port numbers for certain OS detection tests to work
           properly.

       --data hex string (Append custom binary data to sent packets)
           This option lets you include binary data as payload in sent packets.  hex string may be specified in any
           of the following formats: 0xAABBCCDDEEFF..., AABBCCDDEEFF...  or \xAA\xBB\xCC\xDD\xEE\xFF.... Examples of
           use are --data 0xdeadbeef and --data \xCA\xFE\x09. Note that if you specify a number like 0x00ff no
           byte-order conversion is performed. Make sure you specify the information in the byte order expected by
           the receiver.

       --data-string string (Append custom string to sent packets)
           This option lets you include a regular string as payload in sent packets.  string can contain any string.
           However, note that some characters may depend on your system's locale and the receiver may not see the
           same information. Also, make sure you enclose the string in double quotes and escape any special
           characters from the shell. Examples: --data-string "Scan conducted by Security Ops, extension 7192" or
           --data-string "Ph34r my l33t skills". Keep in mind that nobody is likely to actually see any comments left
           by this option unless they are carefully monitoring the network with a sniffer or custom IDS rules.

       --data-length number (Append random data to sent packets)
           Normally Nmap sends minimalist packets containing only a header. So its TCP packets are generally 40 bytes
           and ICMP echo requests are just 28. Some UDP ports and IP protocols get a custom payload by default. This
           option tells Nmap to append the given number of random bytes to most of the packets it sends, and not to
           use any protocol-specific payloads. (Use --data-length 0 for no random or protocol-specific payloads.  OS
           detection (-O) packets are not affected because accuracy there requires probe consistency, but most
           pinging and portscan packets support this. It slows things down a little, but can make a scan slightly
           less conspicuous.

       --ip-options S|R [route]|L [route]|T|U ... ; --ip-options hex string (Send packets with specified ip options)
           The IP protocol[13] offers several options which may be placed in packet headers. Unlike the ubiquitous
           TCP options, IP options are rarely seen due to practicality and security concerns. In fact, many Internet
           routers block the most dangerous options such as source routing. Yet options can still be useful in some
           cases for determining and manipulating the network route to target machines. For example, you may be able
           to use the record route option to determine a path to a target even when more traditional traceroute-style
           approaches fail. Or if your packets are being dropped by a certain firewall, you may be able to specify a
           different route with the strict or loose source routing options.

           The most powerful way to specify IP options is to simply pass in values as the argument to --ip-options.
           Precede each hex number with \x then the two digits. You may repeat certain characters by following them
           with an asterisk and then the number of times you wish them to repeat. For example,
           \x01\x07\x04\x00*36\x01 is a hex string containing 36 NUL bytes.

           Nmap also offers a shortcut mechanism for specifying options. Simply pass the letter R, T, or U to request
           record-route, record-timestamp, or both options together, respectively. Loose or strict source routing may
           be specified with an L or S followed by a space and then a space-separated list of IP addresses.

           If you wish to see the options in packets sent and received, specify --packet-trace. For more information
           and examples of using IP options with Nmap, see http://seclists.org/nmap-dev/2006/q3/52.

       --ttl value (Set IP time-to-live field)
           Sets the IPv4 time-to-live field in sent packets to the given value.

       --randomize-hosts (Randomize target host order)
           Tells Nmap to shuffle each group of up to 16384 hosts before it scans them. This can make the scans less
           obvious to various network monitoring systems, especially when you combine it with slow timing options. If
           you want to randomize over larger group sizes, increase PING_GROUP_SZ in nmap.h and recompile. An
           alternative solution is to generate the target IP list with a list scan (-sL -n -oN filename), randomize
           it with a Perl script, then provide the whole list to Nmap with -iL.

       --spoof-mac MAC address, prefix, or vendor name (Spoof MAC address)
           Asks Nmap to use the given MAC address

           for all of the raw ethernet frames it sends. This option implies --send-eth to ensure that Nmap actually
           sends ethernet-level packets. The MAC given can take several formats. If it is simply the number 0, Nmap
           chooses a completely random MAC address for the session. If the given string is an even number of hex
           digits (with the pairs optionally separated by a colon), Nmap will use those as the MAC. If fewer than 12
           hex digits are provided, Nmap fills in the remainder of the six bytes with random values. If the argument
           isn't a zero or hex string, Nmap looks through nmap-mac-prefixes to find a vendor name containing the
           given string (it is case insensitive). If a match is found, Nmap uses the vendor's OUI (three-byte prefix)
           and fills out the remaining three bytes randomly. Valid --spoof-mac argument examples are Apple, 0,
           01:02:03:04:05:06, deadbeefcafe, 0020F2, and Cisco. This option only affects raw packet scans such as SYN
           scan or OS detection, not connection-oriented features such as version detection or the Nmap Scripting
           Engine.

       --proxies Comma-separated list of proxy URLs (Relay TCP connections through a chain of proxies)
           Asks Nmap to establish TCP connections with a final target through supplied chain of one or more HTTP or
           SOCKS4

           proxies. Proxies can help hide the true source of a scan or evade certain firewall restrictions, but they
           can hamper scan performance by increasing latency. Users may need to adjust Nmap timeouts and other scan
           parameters accordingly. In particular, a lower --max-parallelism may help because some proxies refuse to
           handle as many concurrent connections as Nmap opens by default.

           This option takes a list of proxies as argument, expressed as URLs in the format proto://host:port. Use
           commas to separate node URLs in a chain. No authentication is supported yet. Valid protocols are HTTP and
           SOCKS4.

           Warning: this feature is still under development and has limitations. It is implemented within the nsock
           library and thus has no effect on the ping, port scanning and OS discovery phases of a scan. Only NSE and
           version scan benefit from this option so far—other features may disclose your true address. SSL
           connections are not yet supported, nor is proxy-side DNS resolution (hostnames are always resolved by
           Nmap).

       --badsum (Send packets with bogus TCP/UDP checksums)
           Asks Nmap to use an invalid TCP, UDP or SCTP checksum for packets sent to target hosts. Since virtually
           all host IP stacks properly drop these packets, any responses received are likely coming from a firewall
           or IDS that didn't bother to verify the checksum. For more details on this technique, see
           https://nmap.org/p60-12.html

       --adler32 (Use deprecated Adler32 instead of CRC32C for SCTP checksums)
           Asks Nmap to use the deprecated Adler32 algorithm for calculating the SCTP checksum. If --adler32 is not
           given, CRC-32C (Castagnoli) is used.  RFC 2960[14] originally defined Adler32 as checksum algorithm for
           SCTP; RFC 4960[7] later redefined the SCTP checksums to use CRC-32C. Current SCTP implementations should
           be using CRC-32C, but in order to elicit responses from old, legacy SCTP implementations, it may be
           preferable to use Adler32.

OUTPUT
       Any security tool is only as useful as the output it generates. Complex tests and algorithms are of little
       value if they aren't presented in an organized and comprehensible fashion. Given the number of ways Nmap is
       used by people and other software, no single format can please everyone. So Nmap offers several formats,
       including the interactive mode for humans to read directly and XML for easy parsing by software.

       In addition to offering different output formats, Nmap provides options for controlling the verbosity of
       output as well as debugging messages. Output types may be sent to standard output or to named files, which
       Nmap can append to or clobber. Output files may also be used to resume aborted scans.

       Nmap makes output available in five different formats. The default is called interactive output, and it is
       sent to standard output (stdout).  There is also normal output, which is similar to interactive except that it
       displays less runtime information and warnings since it is expected to be analyzed after the scan completes
       rather than interactively.

       XML output is one of the most important output types, as it can be converted to HTML, easily parsed by
       programs such as Nmap graphical user interfaces, or imported into databases.

       The two remaining output types are the simple grepable output which includes most information for a target
       host on a single line, and sCRiPt KiDDi3 0utPUt for users who consider themselves |<-r4d.

       While interactive output is the default and has no associated command-line options, the other four format
       options use the same syntax. They take one argument, which is the filename that results should be stored in.
       Multiple formats may be specified, but each format may only be specified once. For example, you may wish to
       save normal output for your own review while saving XML of the same scan for programmatic analysis. You might
       do this with the options -oX myscan.xml -oN myscan.nmap. While this chapter uses the simple names like
       myscan.xml for brevity, more descriptive names are generally recommended. The names chosen are a matter of
       personal preference, though I use long ones that incorporate the scan date and a word or two describing the
       scan, placed in a directory named after the company I'm scanning.

       While these options save results to files, Nmap still prints interactive output to stdout as usual. For
       example, the command nmap -oX myscan.xml target prints XML to myscan.xml and fills standard output with the
       same interactive results it would have printed if -oX wasn't specified at all. You can change this by passing
       a hyphen character as the argument to one of the format types. This causes Nmap to deactivate interactive
       output, and instead print results in the format you specified to the standard output stream. So the command
       nmap -oX - target will send only XML output to stdout.  Serious errors may still be printed to the normal
       error stream, stderr.

       Unlike some Nmap arguments, the space between the logfile option flag (such as -oX) and the filename or hyphen
       is mandatory. If you omit the flags and give arguments such as -oG- or -oXscan.xml, a backwards compatibility
       feature of Nmap will cause the creation of normal format output files named G- and Xscan.xml respectively.

       All of these arguments support strftime-like conversions in the filename.  %H, %M, %S, %m, %d, %y, and %Y are
       all exactly the same as in strftime.  %T is the same as %H%M%S, %R is the same as %H%M, and %D is the same as
       %m%d%y. A % followed by any other character just yields that character (%% gives you a percent symbol). So -oX
       'scan-%T-%D.xml' will use an XML file with a name in the form of scan-144840-121307.xml.

       Nmap also offers options to control scan verbosity and to append to output files rather than clobbering them.
       All of these options are described below.

       Nmap Output Formats

       -oN filespec (normal output)
           Requests that normal output be directed to the given filename. As discussed above, this differs slightly
           from interactive output.

       -oX filespec (XML output)
           Requests that XML output be directed to the given filename. Nmap includes a document type definition (DTD)
           which allows XML parsers to validate Nmap XML output. While it is primarily intended for programmatic use,
           it can also help humans interpret Nmap XML output. The DTD defines the legal elements of the format, and
           often enumerates the attributes and values they can take on. The latest version is always available from
           https://svn.nmap.org/nmap/docs/nmap.dtd.

           XML offers a stable format that is easily parsed by software. Free XML parsers are available for all major
           computer languages, including C/C++, Perl, Python, and Java. People have even written bindings for most of
           these languages to handle Nmap output and execution specifically. Examples are Nmap::Scanner[15] and
           Nmap::Parser[16] in Perl CPAN. In almost all cases that a non-trivial application interfaces with Nmap,
           XML is the preferred format.

           The XML output references an XSL stylesheet which can be used to format the results as HTML. The easiest
           way to use this is simply to load the XML output in a web browser such as Firefox or IE. By default, this
           will only work on the machine you ran Nmap on (or a similarly configured one) due to the hard-coded
           nmap.xsl filesystem path. Use the --webxml or --stylesheet options to create portable XML files that
           render as HTML on any web-connected machine.

       -oS filespec (ScRipT KIdd|3 oUTpuT)
           Script kiddie output is like interactive output, except that it is post-processed to better suit the l33t
           HaXXorZ who previously looked down on Nmap due to its consistent capitalization and spelling. Humor
           impaired people should note that this option is making fun of the script kiddies before flaming me for
           supposedly “helping them”.

       -oG filespec (grepable output)
           This output format is covered last because it is deprecated. The XML output format is far more powerful,
           and is nearly as convenient for experienced users. XML is a standard for which dozens of excellent parsers
           are available, while grepable output is my own simple hack. XML is extensible to support new Nmap features
           as they are released, while I often must omit those features from grepable output for lack of a place to
           put them.

           Nevertheless, grepable output is still quite popular. It is a simple format that lists each host on one
           line and can be trivially searched and parsed with standard Unix tools such as grep, awk, cut, sed, diff,
           and Perl. Even I usually use it for one-off tests done at the command line. Finding all the hosts with the
           SSH port open or that are running Solaris takes only a simple grep to identify the hosts, piped to an awk
           or cut command to print the desired fields.

           Grepable output consists of comments (lines starting with a pound (#)) and target lines. A target line
           includes a combination of six labeled fields, separated by tabs and followed with a colon. The fields are
           Host, Ports, Protocols, Ignored State, OS, Seq Index, IP ID, and Status.

           The most important of these fields is generally Ports, which gives details on each interesting port. It is
           a comma separated list of port entries. Each port entry represents one interesting port, and takes the
           form of seven slash (/) separated subfields. Those subfields are: Port number, State, Protocol, Owner,
           Service, SunRPC info, and Version info.

           As with XML output, this man page does not allow for documenting the entire format. A more detailed look
           at the Nmap grepable output format is available from
           https://nmap.org/book/output-formats-grepable-output.html.

       -oA basename (Output to all formats)
           As a convenience, you may specify -oA basename to store scan results in normal, XML, and grepable formats
           at once. They are stored in basename.nmap, basename.xml, and basename.gnmap, respectively. As with most
           programs, you can prefix the filenames with a directory path, such as ~/nmaplogs/foocorp/ on Unix or
           c:\hacking\sco on Windows.

       Verbosity and debugging options

       -v (Increase verbosity level), -vlevel (Set verbosity level)
           Increases the verbosity level, causing Nmap to print more information about the scan in progress. Open
           ports are shown as they are found and completion time estimates are provided when Nmap thinks a scan will
           take more than a few minutes. Use it twice or more for even greater verbosity: -vv, or give a verbosity
           level directly, for example -v3.

           Most changes only affect interactive output, and some also affect normal and script kiddie output. The
           other output types are meant to be processed by machines, so Nmap can give substantial detail by default
           in those formats without fatiguing a human user. However, there are a few changes in other modes where
           output size can be reduced substantially by omitting some detail. For example, a comment line in the
           grepable output that provides a list of all ports scanned is only printed in verbose mode because it can
           be quite long.

       -d (Increase debugging level), -dlevel (Set debugging level)
           When even verbose mode doesn't provide sufficient data for you, debugging is available to flood you with
           much more! As with the verbosity option (-v), debugging is enabled with a command-line flag (-d) and the
           debug level can be increased by specifying it multiple times, as in -dd, or by setting a level directly.
           For example, -d9 sets level nine. That is the highest effective level and will produce thousands of lines
           unless you run a very simple scan with very few ports and targets.

           Debugging output is useful when a bug is suspected in Nmap, or if you are simply confused as to what Nmap
           is doing and why. As this feature is mostly intended for developers, debug lines aren't always
           self-explanatory. You may get something like: Timeout vals: srtt: -1 rttvar: -1 to: 1000000 delta 14987
           ==> srtt: 14987 rttvar: 14987 to: 100000. If you don't understand a line, your only recourses are to
           ignore it, look it up in the source code, or request help from the development list (nmap-dev).  Some
           lines are self explanatory, but the messages become more obscure as the debug level is increased.

       --reason (Host and port state reasons)
           Shows the reason each port is set to a specific state and the reason each host is up or down. This option
           displays the type of the packet that determined a port or hosts state. For example, A RST packet from a
           closed port or an echo reply from an alive host. The information Nmap can provide is determined by the
           type of scan or ping. The SYN scan and SYN ping (-sS and -PS) are very detailed, but the TCP connect scan
           (-sT) is limited by the implementation of the connect system call. This feature is automatically enabled
           by the debug option (-d) and the results are stored in XML log files even if this option is not specified.

       --stats-every time (Print periodic timing stats)
           Periodically prints a timing status message after each interval of time. The time is a specification of
           the kind described in the section called “TIMING AND PERFORMANCE”; so for example, use --stats-every 10s
           to get a status update every 10 seconds. Updates are printed to interactive output (the screen) and XML
           output.

       --packet-trace (Trace packets and data sent and received)
           Causes Nmap to print a summary of every packet sent or received. This is often used for debugging, but is
           also a valuable way for new users to understand exactly what Nmap is doing under the covers. To avoid
           printing thousands of lines, you may want to specify a limited number of ports to scan, such as -p20-30.
           If you only care about the goings on of the version detection subsystem, use --version-trace instead. If
           you only care about script tracing, specify --script-trace. With --packet-trace, you get all of the above.

       --open (Show only open (or possibly open) ports)
           Sometimes you only care about ports you can actually connect to (open ones), and don't want results
           cluttered with closed, filtered, and closed|filtered ports. Output customization is normally done after
           the scan using tools such as grep, awk, and Perl, but this feature was added due to overwhelming requests.
           Specify --open to only see hosts with at least one open, open|filtered, or unfiltered port, and only see
           ports in those states. These three states are treated just as they normally are, which means that
           open|filtered and unfiltered may be condensed into counts if there are an overwhelming number of them.

       --iflist (List interfaces and routes)
           Prints the interface list and system routes as detected by Nmap. This is useful for debugging routing
           problems or device mischaracterization (such as Nmap treating a PPP connection as ethernet).

       Miscellaneous output options

       --append-output (Append to rather than clobber output files)
           When you specify a filename to an output format flag such as -oX or -oN, that file is overwritten by
           default. If you prefer to keep the existing content of the file and append the new results, specify the
           --append-output option. All output filenames specified in that Nmap execution will then be appended to
           rather than clobbered. This doesn't work well for XML (-oX) scan data as the resultant file generally
           won't parse properly until you fix it up by hand.

       --resume filename (Resume aborted scan)
           Some extensive Nmap runs take a very long time—on the order of days. Such scans don't always run to
           completion. Restrictions may prevent Nmap from being run during working hours, the network could go down,
           the machine Nmap is running on might suffer a planned or unplanned reboot, or Nmap itself could crash. The
           administrator running Nmap could cancel it for any other reason as well, by pressing ctrl-C. Restarting
           the whole scan from the beginning may be undesirable. Fortunately, if normal (-oN) or grepable (-oG) logs
           were kept, the user can ask Nmap to resume scanning with the target it was working on when execution
           ceased. Simply specify the --resume option and pass the normal/grepable output file as its argument. No
           other arguments are permitted, as Nmap parses the output file to use the same ones specified previously.
           Simply call Nmap as nmap --resume logfilename. Nmap will append new results to the data files specified in
           the previous execution. Resumption does not support the XML output format because combining the two runs
           into one valid XML file would be difficult.

       --stylesheet path or URL (Set XSL stylesheet to transform XML output)
           Nmap ships with an XSL stylesheet named nmap.xsl for viewing or translating XML output to HTML.  The XML
           output includes an xml-stylesheet directive which points to nmap.xml where it was initially installed by
           Nmap. Run the XML file through an XSLT processor such as xsltproc[17] to produce an HTML file. Directly
           opening the XML file in a browser no longer works well because modern browsers limit the locations a
           stylesheet may be loaded from. If you wish to use a different stylesheet, specify it as the argument to
           --stylesheet. You must pass the full pathname or URL. One common invocation is --stylesheet
           https://nmap.org/svn/docs/nmap.xsl. This tells an XSLT processor to load the latest version of the
           stylesheet from Nmap.Org. The --webxml option does the same thing with less typing and memorization.
           Loading the XSL from Nmap.Org makes it easier to view results on a machine that doesn't have Nmap (and
           thus nmap.xsl) installed. So the URL is often more useful, but the local filesystem location of nmap.xsl
           is used by default for privacy reasons.

       --webxml (Load stylesheet from Nmap.Org)
           This is a convenience option, nothing more than an alias for --stylesheet
           https://nmap.org/svn/docs/nmap.xsl.

       --no-stylesheet (Omit XSL stylesheet declaration from XML)
           Specify this option to prevent Nmap from associating any XSL stylesheet with its XML output. The
           xml-stylesheet directive is omitted.

MISCELLANEOUS OPTIONS
       This section describes some important (and not-so-important) options that don't really fit anywhere else.

       -6 (Enable IPv6 scanning)
           Nmap has IPv6 support for its most popular features. Ping scanning, port scanning, version detection, and
           the Nmap Scripting Engine all support IPv6. The command syntax is the same as usual except that you also
           add the -6 option. Of course, you must use IPv6 syntax if you specify an address rather than a hostname.
           An address might look like 3ffe:7501:4819:2000:210:f3ff:fe03:14d0, so hostnames are recommended. The
           output looks the same as usual, with the IPv6 address on the “interesting ports” line being the only IPv6
           giveaway.

           While IPv6 hasn't exactly taken the world by storm, it gets significant use in some (usually Asian)
           countries and most modern operating systems support it. To use Nmap with IPv6, both the source and target
           of your scan must be configured for IPv6. If your ISP (like most of them) does not allocate IPv6 addresses
           to you, free tunnel brokers are widely available and work fine with Nmap. I use the free IPv6 tunnel
           broker service at http://www.tunnelbroker.net. Other tunnel brokers are listed at Wikipedia[18]. 6to4
           tunnels are another popular, free approach.

           On Windows, raw-socket IPv6 scans are supported only on ethernet devices (not tunnels), and only on
           Windows Vista and later. Use the --unprivileged option in other situations.

       -A (Aggressive scan options)
           This option enables additional advanced and aggressive options. Presently this enables OS detection (-O),
           version scanning (-sV), script scanning (-sC) and traceroute (--traceroute).  More features may be added
           in the future. The point is to enable a comprehensive set of scan options without people having to
           remember a large set of flags. However, because script scanning with the default set is considered
           intrusive, you should not use -A against target networks without permission. This option only enables
           features, and not timing options (such as -T4) or verbosity options (-v) that you might want as well.
           Options which require privileges (e.g. root access) such as OS detection and traceroute will only be
           enabled if those privileges are available.

       --datadir directoryname (Specify custom Nmap data file location)
           Nmap obtains some special data at runtime in files named nmap-service-probes, nmap-services,
           nmap-protocols, nmap-rpc, nmap-mac-prefixes, and nmap-os-db. If the location of any of these files has
           been specified (using the --servicedb or --versiondb options), that location is used for that file. After
           that, Nmap searches these files in the directory specified with the --datadir option (if any). Any files
           not found there, are searched for in the directory specified by the NMAPDIR environment variable. Next
           comes ~/.nmap for real and effective UIDs; or on Windows, HOME\AppData\Roaming\nmap (where HOME is the
           user's home directory, like C:\Users\user). This is followed by the location of the nmap executable and
           the same location with ../share/nmap appended. Then a compiled-in location such as /usr/local/share/nmap
           or /usr/share/nmap.

       --servicedb services file (Specify custom services file)
           Asks Nmap to use the specified services file rather than the nmap-services data file that comes with Nmap.
           Using this option also causes a fast scan (-F) to be used. See the description for --datadir for more
           information on Nmap's data files.

       --versiondb service probes file (Specify custom service probes file)
           Asks Nmap to use the specified service probes file rather than the nmap-service-probes data file that
           comes with Nmap. See the description for --datadir for more information on Nmap's data files.

       --send-eth (Use raw ethernet sending)
           Asks Nmap to send packets at the raw ethernet (data link) layer rather than the higher IP (network) layer.
           By default, Nmap chooses the one which is generally best for the platform it is running on. Raw sockets
           (IP layer) are generally most efficient for Unix machines, while ethernet frames are required for Windows
           operation since Microsoft disabled raw socket support. Nmap still uses raw IP packets on Unix despite this
           option when there is no other choice (such as non-ethernet connections).

       --send-ip (Send at raw IP level)
           Asks Nmap to send packets via raw IP sockets rather than sending lower level ethernet frames. It is the
           complement to the --send-eth option discussed previously.

       --privileged (Assume that the user is fully privileged)
           Tells Nmap to simply assume that it is privileged enough to perform raw socket sends, packet sniffing, and
           similar operations that usually require root privileges on Unix systems. By default Nmap quits if such
           operations are requested but geteuid is not zero.  --privileged is useful with Linux kernel capabilities
           and similar systems that may be configured to allow unprivileged users to perform raw-packet scans. Be
           sure to provide this option flag before any flags for options that require privileges (SYN scan, OS
           detection, etc.). The NMAP_PRIVILEGED environment variable may be set as an equivalent alternative to
           --privileged.

       --unprivileged (Assume that the user lacks raw socket privileges)
           This option is the opposite of --privileged. It tells Nmap to treat the user as lacking network raw socket
           and sniffing privileges. This is useful for testing, debugging, or when the raw network functionality of
           your operating system is somehow broken. The NMAP_UNPRIVILEGED environment variable may be set as an
           equivalent alternative to --unprivileged.

       --release-memory (Release memory before quitting)
           This option is only useful for memory-leak debugging. It causes Nmap to release allocated memory just
           before it quits so that actual memory leaks are easier to spot. Normally Nmap skips this as the OS does
           this anyway upon process termination.

       -V; --version (Print version number)
           Prints the Nmap version number and exits.

       -h; --help (Print help summary page)
           Prints a short help screen with the most common command flags. Running Nmap without any arguments does the
           same thing.

RUNTIME INTERACTION
       During the execution of Nmap, all key presses are captured. This allows you to interact with the program
       without aborting and restarting it. Certain special keys will change options, while any other keys will print
       out a status message telling you about the scan. The convention is that lowercase letters increase the amount
       of printing, and uppercase letters decrease the printing. You may also press ‘?’ for help.

       v / V
           Increase / decrease the verbosity level

       d / D
           Increase / decrease the debugging Level

       p / P
           Turn on / off packet tracing

       ?
           Print a runtime interaction help screen

       Anything else
           Print out a status message like this:

               Stats: 0:00:07 elapsed; 20 hosts completed (1 up), 1 undergoing Service Scan
               Service scan Timing: About 33.33% done; ETC: 20:57 (0:00:12 remaining)

EXAMPLES
       Here are some Nmap usage examples, from the simple and routine to a little more complex and esoteric. Some
       actual IP addresses and domain names are used to make things more concrete. In their place you should
       substitute addresses/names from your own network. While I don't think port scanning other networks is or
       should be illegal, some network administrators don't appreciate unsolicited scanning of their networks and may
       complain. Getting permission first is the best approach.

       For testing purposes, you have permission to scan the host scanme.nmap.org.  This permission only includes
       scanning via Nmap and not testing exploits or denial of service attacks. To conserve bandwidth, please do not
       initiate more than a dozen scans against that host per day. If this free scanning target service is abused, it
       will be taken down and Nmap will report Failed to resolve given hostname/IP: scanme.nmap.org. These
       permissions also apply to the hosts scanme2.nmap.org, scanme3.nmap.org, and so on, though those hosts do not
       currently exist.

       nmap -v scanme.nmap.org

       This option scans all reserved TCP ports on the machine scanme.nmap.org . The -v option enables verbose mode.

       nmap -sS -O scanme.nmap.org/24

       Launches a stealth SYN scan against each machine that is up out of the 256 IPs on the class C sized network
       where Scanme resides. It also tries to determine what operating system is running on each host that is up and
       running. This requires root privileges because of the SYN scan and OS detection.

       nmap -sV -p 22,53,110,143,4564 198.116.0-255.1-127

       Launches host enumeration and a TCP scan at the first half of each of the 255 possible eight-bit subnets in
       the 198.116 class B address space. This tests whether the systems run SSH, DNS, POP3, or IMAP on their
       standard ports, or anything on port 4564. For any of these ports found open, version detection is used to
       determine what application is running.

       nmap -v -iR 100000 -Pn -p 80

       Asks Nmap to choose 100,000 hosts at random and scan them for web servers (port 80). Host enumeration is
       disabled with -Pn since first sending a couple probes to determine whether a host is up is wasteful when you
       are only probing one port on each target host anyway.

       nmap -Pn -p80 -oX logs/pb-port80scan.xml -oG logs/pb-port80scan.gnmap 216.163.128.20/20

       This scans 4096 IPs for any web servers (without pinging them) and saves the output in grepable and XML
       formats.

NMAP BOOK
       While this reference guide details all material Nmap options, it can't fully demonstrate how to apply those
       features to quickly solve real-world tasks. For that, we released Nmap Network Scanning: The Official Nmap
       Project Guide to Network Discovery and Security Scanning.  Topics include subverting firewalls and intrusion
       detection systems, optimizing Nmap performance, and automating common networking tasks with the Nmap Scripting
       Engine. Hints and instructions are provided for common Nmap tasks such as taking network inventory,
       penetration testing, detecting rogue wireless access points, and quashing network worm outbreaks. Examples and
       diagrams show actual communication on the wire. More than half of the book is available free online. See
       https://nmap.org/book for more information.

BUGS
       Like its author, Nmap isn't perfect. But you can help make it better by sending bug reports or even writing
       patches. If Nmap doesn't behave the way you expect, first upgrade to the latest version available from
       https://nmap.org. If the problem persists, do some research to determine whether it has already been
       discovered and addressed. Try searching for the problem or error message on Google since that aggregates so
       many forums. If nothing comes of this, create an Issue on our tracker (http://issues.nmap.org) and/or mail a
       bug report to <dev@nmap.org>. If you subscribe to the nmap-dev list before posting, your message will bypass
       moderation and get through more quickly. Subscribe at https://nmap.org/mailman/listinfo/dev. Please include
       everything you have learned about the problem, as well as what version of Nmap you are using and what
       operating system version it is running on. Other suggestions for improving Nmap may be sent to the Nmap dev
       mailing list as well.

       If you are able to write a patch improving Nmap or fixing a bug, that is even better! Instructions for
       submitting patches or git pull requests are available from
       https://github.com/nmap/nmap/blob/master/CONTRIBUTING.md

       Particularly sensitive issues such as a security reports may be sent directly to Nmap's author Fyodor directly
       at <fyodor@nmap.org>. All other reports and comments should use the dev list or issue tracker instead because
       more people read, follow, and respond to those.

AUTHORS
       Gordon “Fyodor” Lyon <fyodor@nmap.org> wrote and released Nmap in 1997. Since then, hundreds of people have
       made valuable contributions, as detailed in the CHANGELOG file distributed with Nmap and also available from
       https://nmap.org/changelog.html. David Fifield and Daniel Miller deserve special recognition for their
       enormous multi-year contributions!

LEGAL NOTICES
   Nmap Copyright and Licensing
       The Nmap Security Scanner is (C) 1996–2018 Insecure.Com LLC ("The Nmap Project"). Nmap is also a registered
       trademark of the Nmap Project. This program free software; you may redistribute and/or modify it under the
       terms of the GNU General Public License as published by the Free Software Foundation; Version 2 (“GPL”), BUT
       ONLY WITH ALL OF THE CLARIFICATIONS AND EXCEPTIONS DESCRIBED HEREIN. This guarantees your right to use,
       modify, and redistribute this software under certain conditions. If you wish to embed Nmap technology into
       proprietary software, we sell alternative licenses (contact <sales@nmap.com>). Dozens of software vendors
       already license Nmap technology such as host discovery, port scanning, OS detection, version detection, and
       the Nmap Scripting Engine.

       Note that the GPL places important restrictions on “derivative works”, yet it does not provide a detailed
       definition of that term. To avoid misunderstandings, we interpret that term as broadly as copyright law
       allows. For example, we consider an application to constitute a derivative work for the purpose of this
       license if it does any of the following with any software or content covered by this license (“Covered
       Software”):

       •   Integrates source code from Covered Software.

       •   Reads or includes copyrighted data files, such as Nmap's nmap-os-db or nmap-service-probes.

       •   Is designed specifically to execute Covered Software and parse the results (as opposed to typical shell or
           execution-menu apps, which will execute anything you tell them to).

       •   Includes Covered Software in a proprietary executable installer. The installers produced by InstallShield
           are an example of this. Including Nmap with other software in compressed or archival form does not trigger
           this provision, provided appropriate open source decompression or de-archiving software is widely
           available for no charge. For the purposes of this license, an installer is considered to include Covered
           Software even if it actually retrieves a copy of Covered Software from another source during runtime (such
           as by downloading it from the Internet).

       •   Links (statically or dynamically) to a library which does any of the above.

       •   Executes a helper program, module, or script to do any of the above.

       This list is not exclusive, but is meant to clarify our interpretation of derived works with some common
       examples. Other people may interpret the plain GPL differently, so we consider this a special exception to the
       GPL that we apply to Covered Software. Works which meet any of these conditions must conform to all of the
       terms of this license, particularly including the GPL Section 3 requirements of providing source code and
       allowing free redistribution of the work as a whole.

       As another special exception to the GPL terms, the Nmap Project grants permission to link the code of this
       program with any version of the OpenSSL library which is distributed under a license identical to that listed
       in the included docs/licenses/OpenSSL.txt file, and distribute linked combinations including the two.

       The Nmap Project has permission to redistribute Npcap, a packet capturing driver and library for the Microsoft
       Windows platform. Npcap is a separate work with it's own license rather than this Nmap license. Since the
       Npcap license does not permit redistribution without special permission, our Nmap Windows binary packages
       which contain Npcap may not be redistributed without special permission.

       Any redistribution of Covered Software, including any derived works, must obey and carry forward all of the
       terms of this license, including obeying all GPL rules and restrictions. For example, source code of the whole
       work must be provided and free redistribution must be allowed. All GPL references to "this License", are to be
       treated as including the terms and conditions of this license text as well.

       Because this license imposes special exceptions to the GPL, Covered Work may not be combined (even as part of
       a larger work) with plain GPL software. The terms, conditions, and exceptions of this license must be included
       as well. This license is incompatible with some other open source licenses as well. In some cases we can
       relicense portions of Nmap or grant special permissions to use it in other open source software. Please
       contact fyodor@nmap.org with any such requests. Similarly, we don't incorporate incompatible open source
       software into Covered Software without special permission from the copyright holders.

       If you have any questions about the licensing restrictions on using Nmap in other works, we are happy to help.
       As mentioned above, we also offer an alternative license to integrate Nmap into proprietary applications and
       appliances. These contracts have been sold to dozens of software vendors, and generally include a perpetual
       license as well as providing support and updates. They also fund the continued development of Nmap. Please
       email <sales@nmap.com> for further information.

       If you have received a written license agreement or contract for Covered Software stating terms other than
       these, you may choose to use and redistribute Covered Software under those terms instead of these.

   Creative Commons License for this Nmap Guide
       This Nmap Reference Guide is (C) 2005–2018 Insecure.Com LLC. It is hereby placed under version 3.0 of the
       Creative Commons Attribution License[19]. This allows you redistribute and modify the work as you desire, as
       long as you credit the original source. Alternatively, you may choose to treat this document as falling under
       the same license as Nmap itself (discussed previously).

   Source Code Availability and Community Contributions
       Source is provided to this software because we believe users have a right to know exactly what a program is
       going to do before they run it. This also allows you to audit the software for security holes.

       Source code also allows you to port Nmap to new platforms, fix bugs, and add new features. You are highly
       encouraged to send your changes to <dev@nmap.org> for possible incorporation into the main distribution. By
       sending these changes to Fyodor or one of the Insecure.Org development mailing lists, it is assumed that you
       are offering the Nmap Project the unlimited, non-exclusive right to reuse, modify, and relicense the code.
       Nmap will always be available open source, but this is important because the inability to relicense code has
       caused devastating problems for other Free Software projects (such as KDE and NASM). We also occasionally
       relicense the code to third parties as discussed above. If you wish to specify special license conditions of
       your contributions, just say so when you send them.

   No Warranty
       This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
       implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
       v2.0 for more details at http://www.gnu.org/licenses/gpl-2.0.html, or in the COPYING file included with Nmap.

       It should also be noted that Nmap has occasionally been known to crash poorly written applications, TCP/IP
       stacks, and even operating systems.  While this is extremely rare, it is important to keep in mind.  Nmap
       should never be run against mission critical systems unless you are prepared to suffer downtime. We
       acknowledge here that Nmap may crash your systems or networks and we disclaim all liability for any damage or
       problems Nmap could cause.

   Inappropriate Usage
       Because of the slight risk of crashes and because a few black hats like to use Nmap for reconnaissance prior
       to attacking systems, there are administrators who become upset and may complain when their system is scanned.
       Thus, it is often advisable to request permission before doing even a light scan of a network.

       Nmap should never be installed with special privileges (e.g. suid root).  That would open up a major security
       vulnerability as other users on the system (or attackers) could use it for privilege escalation.

   Third-Party Software and Funding Notices
       This product includes software developed by the Apache Software Foundation[20]. A modified version of the
       Libpcap portable packet capture library[21] is distributed along with Nmap. The Windows version of Nmap
       utilizes the Libpcap-derived Ncap library[22] instead. Regular expression support is provided by the PCRE
       library[23], which is open-source software, written by Philip Hazel.  Certain raw networking functions use the
       Libdnet[24] networking library, which was written by Dug Song.  A modified version is distributed with Nmap.
       Nmap can optionally link with the OpenSSL cryptography toolkit[25] for SSL version detection support. The Nmap
       Scripting Engine uses an embedded version of the Lua programming language[26].  The Liblinear linear
       classification library[27] is used for our IPv6 OS detection machine learning techniques[28].

       All of the third-party software described in this paragraph is freely redistributable under BSD-style software
       licenses.

       Binary packages for Windows and Mac OS X include support libraries necessary to run Zenmap and Ndiff with
       Python and PyGTK. (Unix platforms commonly make these libraries easy to install, so they are not part of the
       packages.) A listing of these support libraries and their licenses is included in the LICENSES files.

       This software was supported in part through the Google Summer of Code[29] and the DARPA CINDER program[30]
       (DARPA-BAA-10-84).

   United States Export Control
       Nmap only uses encryption when compiled with the optional OpenSSL support and linked with OpenSSL. When
       compiled without OpenSSL support, the Nmap Project believes that Nmap is not subject to U.S.  Export
       Administration Regulations (EAR)[31] export control. As such, there is no applicable ECCN (export control
       classification number) and exportation does not require any special license, permit, or other governmental
       authorization.

       When compiled with OpenSSL support or distributed as source code, the Nmap Project believes that Nmap falls
       under U.S. ECCN 5D002[32] (“Information Security Software”). We distribute Nmap under the TSU exception for
       publicly available encryption software defined in EAR 740.13(e)[33].

NOTES
        1. Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning
           https://nmap.org/book/

        2. RFC 1122
           http://www.rfc-editor.org/rfc/rfc1122.txt

        3. RFC 792
           http://www.rfc-editor.org/rfc/rfc792.txt

        4. RFC 950
           http://www.rfc-editor.org/rfc/rfc950.txt

        5. RFC 1918
           http://www.rfc-editor.org/rfc/rfc1918.txt

        6. UDP
           http://www.rfc-editor.org/rfc/rfc768.txt

        7. SCTP
           http://www.rfc-editor.org/rfc/rfc4960.txt

        8. TCP RFC
           http://www.rfc-editor.org/rfc/rfc793.txt

        9. RFC 959
           http://www.rfc-editor.org/rfc/rfc959.txt

       10. RFC 1323
           http://www.rfc-editor.org/rfc/rfc1323.txt

       11. Lua programming language
           http://lua.org

       12. precedence
           http://www.lua.org/manual/5.1/manual.html#2.5.3

       13. IP protocol
           http://www.rfc-editor.org/rfc/rfc791.txt

       14. RFC 2960
           http://www.rfc-editor.org/rfc/rfc2960.txt

       15. Nmap::Scanner
           http://sourceforge.net/projects/nmap-scanner/

       16. Nmap::Parser
           http://nmapparser.wordpress.com/

       17. xsltproc
           http://xmlsoft.org/XSLT/

       18. listed at Wikipedia
           http://en.wikipedia.org/wiki/List_of_IPv6_tunnel_brokers

       19. Creative Commons Attribution License
           http://creativecommons.org/licenses/by/3.0/

       20. Apache Software Foundation
           http://www.apache.org

       21. Libpcap portable packet capture library
           http://www.tcpdump.org

       22. Ncap library
           https://npcap.org

       23. PCRE library
           http://www.pcre.org

       24. Libdnet
           http://libdnet.sourceforge.net

       25. OpenSSL cryptography toolkit
           http://www.openssl.org

       26. Lua programming language
           http://www.lua.org

       27. Liblinear linear classification library
           http://www.csie.ntu.edu.tw/~cjlin/liblinear/

       28. IPv6 OS detection machine learning techniques
           https://nmap.org/book/osdetect-guess.html#osdetect-guess-ipv6

       29. Google Summer of Code
           https://nmap.org/soc/

       30. DARPA CINDER program
           https://www.fbo.gov/index?s=opportunity&mode=form&id=585e02a51f77af5cb3c9e06b9cc82c48&tab=core&_cview=1

       31. Export Administration Regulations (EAR)
           http://www.access.gpo.gov/bis/ear/ear_data.html

       32. 5D002
           https://www.bis.doc.gov/index.php/documents/regulations-docs/federal-register-notices/federal-register-2014/951-ccl5-pt2/file

       33. EAR 740.13(e)
           http://www.access.gpo.gov/bis/ear/pdf/740.pdf

Nmap                                                  09/28/2018                                              NMAP(1)

================================================================================

COMMAND: netcat
NC(1)                                        BSD General Commands Manual                                        NC(1)

NAME
     nc — arbitrary TCP and UDP connections and listens

SYNOPSIS
     nc [-46bCDdFhklNnrStUuvZz] [-I length] [-i interval] [-M ttl] [-m minttl] [-O length] [-P proxy_username]
        [-p source_port] [-q seconds] [-s sourceaddr] [-T keyword] [-V rtable] [-W recvlimit] [-w timeout]
        [-X proxy_protocol] [-x proxy_address[:port]] [destination] [port]

DESCRIPTION
     The nc (or netcat) utility is used for just about anything under the sun involving TCP, UDP, or UNIX-domain
     sockets.  It can open TCP connections, send UDP packets, listen on arbitrary TCP and UDP ports, do port scan‐
     ning, and deal with both IPv4 and IPv6.  Unlike telnet(1), nc scripts nicely, and separates error messages onto
     standard error instead of sending them to standard output, as telnet(1) does with some.

     Common uses include:

           •   simple TCP proxies
           •   shell-script based HTTP clients and servers
           •   network daemon testing
           •   a SOCKS or HTTP ProxyCommand for ssh(1)
           •   and much, much more

     The options are as follows:

     -4      Use IPv4 addresses only.

     -6      Use IPv6 addresses only.

     -b      Allow broadcast.

     -C      Send CRLF as line-ending.  Each line feed (LF) character from the input data is translated into CR+LF
             before being written to the socket.  Line feed characters that are already preceded with a carriage re‐
             turn (CR) are not translated.  Received data is not affected.

     -D      Enable debugging on the socket.

     -d      Do not attempt to read from stdin.

     -F      Pass the first connected socket using sendmsg(2) to stdout and exit.  This is useful in conjunction with
             -X to have nc perform connection setup with a proxy but then leave the rest of the connection to another
             program (e.g. ssh(1) using the ssh_config(5) ProxyUseFdpass option).  Cannot be used with -U.

     -h      Print out the nc help text and exit.

     -I length
             Specify the size of the TCP receive buffer.

     -i interval
             Sleep for interval seconds between lines of text sent and received.  Also causes a delay time between
             connections to multiple ports.

     -k      When a connection is completed, listen for another one.  Requires -l.  When used together with the -u
             option, the server socket is not connected and it can receive UDP datagrams from multiple hosts.

     -l      Listen for an incoming connection rather than initiating a connection to a remote host.  The destination
             and port to listen on can be specified either as non-optional arguments, or with options -s and -p re‐
             spectively.  Cannot be used together with -x or -z.  Additionally, any timeouts specified with the -w
             option are ignored.

     -M ttl  Set the TTL / hop limit of outgoing packets.

     -m minttl
             Ask the kernel to drop incoming packets whose TTL / hop limit is under minttl.

     -N      shutdown(2) the network socket after EOF on the input.  Some servers require this to finish their work.

     -n      Do not perform domain name resolution.  If a name cannot be resolved without DNS, an error will be re‐
             ported.

     -O length
             Specify the size of the TCP send buffer.

     -P proxy_username
             Specifies a username to present to a proxy server that requires authentication.  If no username is spec‐
             ified then authentication will not be attempted.  Proxy authentication is only supported for HTTP CON‐
             NECT proxies at present.

     -p source_port
             Specify the source port nc should use, subject to privilege restrictions and availability.

     -q seconds
             after EOF on stdin, wait the specified number of seconds and then quit. If seconds is negative, wait
             forever (default).  Specifying a non-negative seconds implies -N.

     -r      Choose source and/or destination ports randomly instead of sequentially within a range or in the order
             that the system assigns them.

     -S      Enable the RFC 2385 TCP MD5 signature option.

     -s sourceaddr
             Set the source address to send packets from, which is useful on machines with multiple interfaces.  For
             UNIX-domain datagram sockets, specifies the local temporary socket file to create and use so that data‐
             grams can be received.  Cannot be used together with -x.

     -T keyword
             Change the IPv4 TOS/IPv6 traffic class value.  keyword may be one of critical, inetcontrol, lowcost,
             lowdelay, netcontrol, throughput, reliability, or one of the DiffServ Code Points: ef, af11 ... af43,
             cs0 ... cs7; or a number in either hex or decimal.

     -t      Send RFC 854 DON'T and WON'T responses to RFC 854 DO and WILL requests.  This makes it possible to use
             nc to script telnet sessions.

     -U      Use UNIX-domain sockets.  Cannot be used together with -F or -x.

     -u      Use UDP instead of TCP.  Cannot be used together with -x.  For UNIX-domain sockets, use a datagram
             socket instead of a stream socket.  If a UNIX-domain socket is used, a temporary receiving socket is
             created in /tmp unless the -s flag is given.

     -V rtable
             Set the routing table to be used.

     -v      Produce more verbose output.

     -W recvlimit
             Terminate after receiving recvlimit packets from the network.

     -w timeout
             Connections which cannot be established or are idle timeout after timeout seconds.  The -w flag has no
             effect on the -l option, i.e. nc will listen forever for a connection, with or without the -w flag.  The
             default is no timeout.

     -X proxy_protocol
             Use proxy_protocol when talking to the proxy server.  Supported protocols are 4 (SOCKS v.4), 5 (SOCKS
             v.5) and connect (HTTPS proxy).  If the protocol is not specified, SOCKS version 5 is used.

     -x proxy_address[:port]
             Connect to destination using a proxy at proxy_address and port.  If port is not specified, the well-
             known port for the proxy protocol is used (1080 for SOCKS, 3128 for HTTPS).  An IPv6 address can be
             specified unambiguously by enclosing proxy_address in square brackets.  A proxy cannot be used with any
             of the options -lsuU.

     -Z      DCCP mode.

     -z      Only scan for listening daemons, without sending any data to them.  Cannot be used together with -l.

     destination can be a numerical IP address or a symbolic hostname (unless the -n option is given).  In general, a
     destination must be specified, unless the -l option is given (in which case the local host is used).  For
     UNIX-domain sockets, a destination is required and is the socket path to connect to (or listen on if the -l op‐
     tion is given).

     port can be specified as a numeric port number or as a service name.  Port ranges may be specified as numeric
     port numbers of the form nn-mm.  In general, a destination port must be specified, unless the -U option is
     given.

CLIENT/SERVER MODEL
     It is quite simple to build a very basic client/server model using nc.  On one console, start nc listening on a
     specific port for a connection.  For example:

           $ nc -l 1234

     nc is now listening on port 1234 for a connection.  On a second console (or a second machine), connect to the
     machine and port being listened on:

           $ nc -N 127.0.0.1 1234

     There should now be a connection between the ports.  Anything typed at the second console will be concatenated
     to the first, and vice-versa.  After the connection has been set up, nc does not really care which side is being
     used as a ‘server’ and which side is being used as a ‘client’.  The connection may be terminated using an EOF
     (‘^D’), as the -N flag was given.

     There is no -c or -e option in this netcat, but you still can execute a command after connection being estab‐
     lished by redirecting file descriptors. Be cautious here because opening a port and let anyone connected execute
     arbitrary command on your site is DANGEROUS. If you really need to do this, here is an example:

     On ‘server’ side:

           $ rm -f /tmp/f; mkfifo /tmp/f
           $ cat /tmp/f | /bin/sh -i 2>&1 | nc -l 127.0.0.1 1234 > /tmp/f

     On ‘client’ side:

           $ nc host.example.com 1234
           $ (shell prompt from host.example.com)

     By doing this, you create a fifo at /tmp/f and make nc listen at port 1234 of address 127.0.0.1 on ‘server’
     side, when a ‘client’ establishes a connection successfully to that port, /bin/sh gets executed on ‘server’ side
     and the shell prompt is given to ‘client’ side.

     When connection is terminated, nc quits as well. Use -k if you want it keep listening, but if the command quits
     this option won't restart it or keep nc running. Also don't forget to remove the file descriptor once you don't
     need it anymore:

           $ rm -f /tmp/f

DATA TRANSFER
     The example in the previous section can be expanded to build a basic data transfer model.  Any information input
     into one end of the connection will be output to the other end, and input and output can be easily captured in
     order to emulate file transfer.

     Start by using nc to listen on a specific port, with output captured into a file:

           $ nc -l 1234 > filename.out

     Using a second machine, connect to the listening nc process, feeding it the file which is to be transferred:

           $ nc -N host.example.com 1234 < filename.in

     After the file has been transferred, the connection will close automatically.

TALKING TO SERVERS
     It is sometimes useful to talk to servers “by hand” rather than through a user interface.  It can aid in trou‐
     bleshooting, when it might be necessary to verify what data a server is sending in response to commands issued
     by the client.  For example, to retrieve the home page of a web site:

           $ printf "GET / HTTP/1.0\r\n\r\n" | nc host.example.com 80

     Note that this also displays the headers sent by the web server.  They can be filtered, using a tool such as
     sed(1), if necessary.

     More complicated examples can be built up when the user knows the format of requests required by the server.  As
     another example, an email may be submitted to an SMTP server using:

           $ nc [-C] localhost 25 << EOF
           HELO host.example.com
           MAIL FROM:<user@host.example.com>
           RCPT TO:<user2@host.example.com>
           DATA
           Body of email.
           .
           QUIT
           EOF

PORT SCANNING
     It may be useful to know which ports are open and running services on a target machine.  The -z flag can be used
     to tell nc to report open ports, rather than initiate a connection. Usually it's useful to turn on verbose out‐
     put to stderr by use this option in conjunction with -v option.

     For example:

           $ nc -zv host.example.com 20-30
           Connection to host.example.com 22 port [tcp/ssh] succeeded!
           Connection to host.example.com 25 port [tcp/smtp] succeeded!

     The port range was specified to limit the search to ports 20 - 30, and is scanned by increasing order (unless
     the -r flag is set).

     You can also specify a list of ports to scan, for example:

           $ nc -zv host.example.com http 20 22-23
           nc: connect to host.example.com 80 (tcp) failed: Connection refused
           nc: connect to host.example.com 20 (tcp) failed: Connection refused
           Connection to host.example.com port [tcp/ssh] succeeded!
           nc: connect to host.example.com 23 (tcp) failed: Connection refused

     The ports are scanned by the order you given (unless the -r flag is set).

     Alternatively, it might be useful to know which server software is running, and which versions.  This informa‐
     tion is often contained within the greeting banners.  In order to retrieve these, it is necessary to first make
     a connection, and then break the connection when the banner has been retrieved.  This can be accomplished by
     specifying a small timeout with the -w flag, or perhaps by issuing a "QUIT" command to the server:

           $ echo "QUIT" | nc host.example.com 20-30
           SSH-1.99-OpenSSH_3.6.1p2
           Protocol mismatch.
           220 host.example.com IMS SMTP Receiver Version 0.84 Ready

EXAMPLES
     Open a TCP connection to port 42 of host.example.com, using port 31337 as the source port, with a timeout of 5
     seconds:

           $ nc -p 31337 -w 5 host.example.com 42

     Open a UDP connection to port 53 of host.example.com:

           $ nc -u host.example.com 53

     Open a TCP connection to port 42 of host.example.com using 10.1.2.3 as the IP for the local end of the connec‐
     tion:

           $ nc -s 10.1.2.3 host.example.com 42

     Create and listen on a UNIX-domain stream socket:

           $ nc -lU /var/tmp/dsocket

     Connect to port 42 of host.example.com via an HTTP proxy at 10.2.3.4, port 8080.  This example could also be
     used by ssh(1); see the ProxyCommand directive in ssh_config(5) for more information.

           $ nc -x10.2.3.4:8080 -Xconnect host.example.com 42

     The same example again, this time enabling proxy authentication with username “ruser” if the proxy requires it:

           $ nc -x10.2.3.4:8080 -Xconnect -Pruser host.example.com 42

SEE ALSO
     cat(1), ssh(1)

AUTHORS
     Original implementation by *Hobbit* <hobbit@avian.org>.
     Rewritten with IPv6 support by
     Eric Jackson <ericj@monkey.org>.
     Modified for Debian port by Aron Xu ⟨aron@debian.org⟩.

CAVEATS
     UDP port scans using the -uz combination of flags will always report success irrespective of the target ma‐
     chine's state.  However, in conjunction with a traffic sniffer either on the target machine or an intermediary
     device, the -uz combination could be useful for communications diagnostics.  Note that the amount of UDP traffic
     generated may be limited either due to hardware resources and/or configuration settings.

BSD                                                 March 31, 2021                                                BSD

================================================================================

COMMAND: telnet
TELNET(1)                                    BSD General Commands Manual                                    TELNET(1)

NAME
     telnet — user interface to the TELNET protocol

SYNOPSIS
     telnet [-468ELadr] [-S tos] [-b address] [-e escapechar] [-l user] [-n tracefile] [host [port]]

DESCRIPTION
     The telnet command is used for interactive communication with another host using the TELNET protocol. It begins
     in command mode, where it prints a telnet prompt ("telnet> "). If telnet is invoked with a host argument, it
     performs an open command implicitly; see the description below.

     Options:

     -4      Force IPv4 address resolution.

     -6      Force IPv6 address resolution.

     -8      Request 8-bit operation. This causes an attempt to negotiate the TELNET BINARY option for both input and
             output. By default telnet is not 8-bit clean.

     -E      Disables the escape character functionality; that is, sets the escape character to ``no character''.

     -L      Specifies an 8-bit data path on output.  This causes the TELNET BINARY option to be negotiated on just
             output.

     -a      Attempt automatic login.  Currently, this sends the user name via the USER variable of the NEW-ENVIRON
             option if supported by the remote system. The username is retrieved via getlogin(3).

     -b address
             Use bind(2) on the local socket to bind it to a specific local address.

     -d      Sets the initial value of the debug toggle to TRUE.

     -r      Emulate rlogin(1).  In this mode, the default escape character is a tilde. Also, the interpretation of
             the escape character is changed: an escape character followed by a dot causes telnet to disconnect from
             the remote host. A ^Z instead of a dot suspends telnet, and a ^] (the default telnet escape character)
             generates a normal telnet prompt. These codes are accepted only at the beginning of a line.

     -S tos  Sets the IP type-of-service (TOS) option for the telnet connection to the value tos.

     -e escapechar
             Sets the escape character to escapechar. If no character is supplied, no escape character will be used.
             Entering the escape character while connected causes telnet to drop to command mode.

     -l user
             Specify user as the user to log in as on the remote system. This is accomplished by sending the speci‐
             fied name as the USER environment variable, so it requires that the remote system support the TELNET
             NEW-ENVIRON option. This option implies the -a option, and may also be used with the open command.

     -n tracefile
             Opens tracefile for recording trace information.  See the set tracefile command below.

     host    Specifies a host to contact over the network.

     port    Specifies a port number or service name to contact. If not specified, the telnet port (23) is used.

     Protocol:

     Once a connection has been opened, telnet will attempt to enable the TELNET LINEMODE option.  If this fails,
     then telnet will revert to one of two input modes: either “character at a time” or “old line by line” depending
     on what the remote system supports.

     When LINEMODE is enabled, character processing is done on the local system, under the control of the remote sys‐
     tem.  When input editing or character echoing is to be disabled, the remote system will relay that information.
     The remote system will also relay changes to any special characters that happen on the remote system, so that
     they can take effect on the local system.

     In “character at a time” mode, most text typed is immediately sent to the remote host for processing.

     In “old line by line” mode, all text is echoed locally, and (normally) only completed lines are sent to the re‐
     mote host.  The “local echo character” (initially “^E”) may be used to turn off and on the local echo (this
     would mostly be used to enter passwords without the password being echoed).

     If the LINEMODE option is enabled, or if the localchars toggle is TRUE (the default for “old line by line“; see
     below), the user's quit, intr, and flush characters are trapped locally, and sent as TELNET protocol sequences
     to the remote side.  If LINEMODE has ever been enabled, then the user's susp and eof are also sent as TELNET
     protocol sequences, and quit is sent as a TELNET ABORT instead of BREAK There are options (see toggle autoflush
     and toggle autosynch below) which cause this action to flush subsequent output to the terminal (until the remote
     host acknowledges the TELNET sequence) and flush previous terminal input (in the case of quit and intr).

     Commands:

     The following telnet commands are available. Unique prefixes are understood as abbreviations.

     auth argument ...
                The auth command controls the TELNET AUTHENTICATE protocol option.  If telnet was compiled without
                authentication, the auth command will not be supported.  Valid arguments are as follows:

                disable type  Disable the specified type of authentication.  To obtain a list of available types, use
                              the auth disable ? command.

                enable type   Enable the specified type of authentication.  To obtain a list of available types, use
                              the auth enable ? command.

                status        List the current status of the various types of authentication.

                Note that the current version of telnet does not support authentication.

     close      Close the connection to the remote host, if any, and return to command mode.

     display argument ...
                Display all, or some, of the set and toggle values (see below).

     encrypt argument ...
                The encrypt command controls the TELNET ENCRYPT protocol option. If telnet was compiled without en‐
                cryption, the encrypt command will not be supported.

                Valid arguments are as follows:

                disable type [input|output]
                              Disable the specified type of encryption.  If you do not specify input or output, en‐
                              cryption of both is disabled.  To obtain a list of available types, use ``encrypt dis‐
                              able ?''.

                enable type [input|output]
                              Enable the specified type of encryption.  If you do not specify input or output, en‐
                              cryption of both is enabled.  To obtain a list of available types, use ``encrypt enable
                              ?''.

                input         This is the same as ``encrypt start input''.

                -input        This is the same as ``encrypt stop input''.

                output        This is the same as ``encrypt start output''.

                -output       This is the same as ``encrypt stop output''.

                start [input|output]
                              Attempt to begin encrypting.  If you do not specify input or output, encryption of both
                              input and output is started.

                status        Display the current status of the encryption module.

                stop [input|output]
                              Stop encrypting.  If you do not specify input or output, encryption of both is stopped.

                type type     Sets the default type of encryption to be used with later ``encrypt start'' or ``en‐
                              crypt stop'' commands.

                Note that the current version of telnet does not support encryption.

     environ arguments...
                The environ command is used to propagate environment variables across the telnet link using the
                TELNET NEW-ENVIRON protocol option.  All variables exported from the shell are defined, but only the
                DISPLAY and PRINTER variables are marked to be sent by default.  The USER variable is marked to be
                sent if the -a or -l command-line options were used.

                Valid arguments for the environ command are:

                define variable value
                            Define the variable variable to have a value of value. Any variables defined by this com‐
                            mand are automatically marked for propagation (``exported'').  The value may be enclosed
                            in single or double quotes so that tabs and spaces may be included.

                undefine variable
                            Remove any existing definition of variable.

                export variable
                            Mark the specified variable for propagation to the remote host.

                unexport variable
                            Do not mark the specified variable for propagation to the remote host. The remote host
                            may still ask explicitly for variables that are not exported.

                list        List the current set of environment variables.  Those marked with a * will be propagated
                            to the remote host. The remote host may still ask explicitly for the rest.

                ?           Prints out help information for the environ command.

     logout     Send the TELNET LOGOUT protocol option to the remote host.  This command is similar to a close com‐
                mand. If the remote host does not support the LOGOUT option, nothing happens.  But if it does, this
                command should cause it to close the connection.  If the remote side also supports the concept of
                suspending a user's session for later reattachment, the logout command indicates that the session
                should be terminated immediately.

     mode type  Type is one of several options, depending on the state of the session.  Telnet asks the remote host
                to go into the requested mode. If the remote host says it can, that mode takes effect.

                character     Disable the TELNET LINEMODE option, or, if the remote side does not understand the
                              LINEMODE option, then enter “character at a time“ mode.

                line          Enable the TELNET LINEMODE option, or, if the remote side does not understand the
                              LINEMODE option, then attempt to enter “old-line-by-line“ mode.

                isig (-isig)  Attempt to enable (disable) the TRAPSIG mode of the LINEMODE option.  This requires
                              that the LINEMODE option be enabled.

                edit (-edit)  Attempt to enable (disable) the EDIT mode of the LINEMODE option.  This requires that
                              the LINEMODE option be enabled.

                softtabs (-softtabs)
                              Attempt to enable (disable) the SOFT_TAB mode of the LINEMODE option.  This requires
                              that the LINEMODE option be enabled.

                litecho (-litecho)
                              Attempt to enable (disable) the LIT_ECHO mode of the LINEMODE option.  This requires
                              that the LINEMODE option be enabled.

                ?             Prints out help information for the mode command.

     open host [[-l] user][- port]
                Open a connection to the named host.  If no port number is specified, telnet will attempt to contact
                a telnet daemon at the standard port (23).  The host specification may be a host name or IP address.
                The -l option may be used to specify a user name to be passed to the remote system, like the -l com‐
                mand-line option.

                When connecting to ports other than the telnet port, telnet does not attempt telnet protocol negotia‐
                tions. This makes it possible to connect to services that do not support the telnet protocol without
                making a mess. Protocol negotiation can be forced by placing a dash before the port number.

                After establishing a connection, any commands associated with the remote host in /etc/telnetrc and
                the user's .telnetrc file are executed, in that order.

                The format of the telnetrc files is as follows: Lines beginning with a #, and blank lines, are ig‐
                nored.  The rest of the file should consist of hostnames and sequences of telnet commands to use with
                that host. Commands should be one per line, indented by whitespace; lines beginning without white‐
                space are interpreted as hostnames.  Lines beginning with the special hostname ‘DEFAULT’ will apply
                to all hosts.  Hostnames including ‘DEFAULT’ may be followed immediately by a colon and a port number
                or string.  If a port is specified it must match exactly with what is specified on the command line.
                If no port was specified on the command line, then the value ‘telnet’ is used.  Upon connecting to a
                particular host, the commands associated with that host are executed.

     quit       Close any open session and exit telnet.  An end of file condition on input, when in command mode,
                will trigger this operation as well.

     send arguments
                Send one or more special telnet protocol character sequences to the remote host.  The following are
                the codes which may be specified (more than one may be used in one command):

                abort   Sends the TELNET ABORT (Abort Processes) sequence.

                ao      Sends the TELNET AO (Abort Output) sequence, which should cause the remote system to flush
                        all output from the remote system to the user's terminal.

                ayt     Sends the TELNET AYT (Are You There?) sequence, to which the remote system may or may not
                        choose to respond.

                brk     Sends the TELNET BRK (Break) sequence, which may have significance to the remote system.

                ec      Sends the TELNET EC (Erase Character) sequence, which should cause the remote system to erase
                        the last character entered.

                el      Sends the TELNET EL (Erase Line) sequence, which should cause the remote system to erase the
                        line currently being entered.

                eof     Sends the TELNET EOF (End Of File) sequence.

                eor     Sends the TELNET EOR (End of Record) sequence.

                escape  Sends the current telnet escape character.

                ga      Sends the TELNET GA (Go Ahead) sequence, which likely has no significance to the remote sys‐
                        tem.

                getstatus
                        If the remote side supports the TELNET STATUS command, getstatus will send the subnegotiation
                        to request that the server send its current option status.

                ip      Sends the TELNET IP (Interrupt Process) sequence, which should cause the remote system to
                        abort the currently running process.

                nop     Sends the TELNET NOP (No Operation) sequence.

                susp    Sends the TELNET SUSP (Suspend Process) sequence.

                synch   Sends the TELNET SYNCH sequence.  This sequence causes the remote system to discard all pre‐
                        viously typed (but not yet read) input.  This sequence is sent as TCP urgent data (and may
                        not work if the remote system is a 4.2BSD system -- if it doesn't work, a lower case “r” may
                        be echoed on the terminal).

                do cmd

                dont cmd

                will cmd

                wont cmd
                        Sends the TELNET DO cmd sequence.  cmd can be either a decimal number between 0 and 255, or a
                        symbolic name for a specific TELNET command.  cmd can also be either help or ? to print out
                        help information, including a list of known symbolic names.

                ?       Prints out help information for the send command.

     set argument value

     unset argument value
                The set command will set any one of a number of telnet variables to a specific value or to TRUE.  The
                special value off turns off the function associated with the variable. This is equivalent to using
                the unset command.  The unset command will disable or set to FALSE any of the specified variables.
                The values of variables may be interrogated with the display command.  The variables which may be set
                or unset, but not toggled, are listed here.  In addition, any of the variables for the toggle command
                may be explicitly set or unset.

                ayt     If telnet is in localchars mode, or LINEMODE is enabled, and the status character is typed, a
                        TELNET AYT sequence is sent to the remote host.  The initial value for the "Are You There"
                        character is the terminal's status character.

                echo    This is the value (initially “^E”) which, when in “line by line” mode, toggles between doing
                        local echoing of entered characters (for normal processing), and suppressing echoing of en‐
                        tered characters (for entering, say, a password).

                eof     If telnet is operating in LINEMODE or “old line by line” mode, entering this character as the
                        first character on a line will cause this character to be sent to the remote system.  The
                        initial value of the eof character is taken to be the terminal's eof character.

                erase   If telnet is in localchars mode (see toggle localchars below), and if telnet is operating in
                        “character at a time” mode, then when this character is typed, a TELNET EC sequence (see send
                        ec above) is sent to the remote system.  The initial value for the erase character is taken
                        to be the terminal's erase character.

                escape  This is the telnet escape character (initially “^]”) which causes entry into telnet command
                        mode (when connected to a remote system).

                flushoutput
                        If telnet is in localchars mode (see toggle localchars below) and the flushoutput character
                        is typed, a TELNET AO sequence (see send ao above) is sent to the remote host.  The initial
                        value for the flush character is taken to be the terminal's flush character.

                forw1

                forw2   If TELNET is operating in LINEMODE, these are the characters that, when typed, cause partial
                        lines to be forwarded to the remote system.  The initial value for the forwarding characters
                        are taken from the terminal's eol and eol2 characters.

                interrupt
                        If telnet is in localchars mode (see toggle localchars below) and the interrupt character is
                        typed, a TELNET IP sequence (see send ip above) is sent to the remote host.  The initial
                        value for the interrupt character is taken to be the terminal's intr character.

                kill    If telnet is in localchars mode (see toggle localchars below), and if telnet is operating in
                        “character at a time” mode, then when this character is typed, a TELNET EL sequence (see send
                        el above) is sent to the remote system.  The initial value for the kill character is taken to
                        be the terminal's kill character.

                lnext   If telnet is operating in LINEMODE or “old line by line“ mode, then this character is taken
                        to be the terminal's lnext character.  The initial value for the lnext character is taken to
                        be the terminal's lnext character.

                quit    If telnet is in localchars mode (see toggle localchars below) and the quit character is
                        typed, a TELNET BRK sequence (see send brk above) is sent to the remote host.  The initial
                        value for the quit character is taken to be the terminal's quit character.

                reprint
                        If telnet is operating in LINEMODE or “old line by line“ mode, then this character is taken
                        to be the terminal's reprint character.  The initial value for the reprint character is taken
                        to be the terminal's reprint character.

                rlogin  This is the rlogin mode escape character. Setting it enables rlogin mode, as with the r com‐
                        mand-line option (q.v.)

                start   If the TELNET TOGGLE-FLOW-CONTROL option has been enabled, then this character is taken to be
                        the terminal's start character.  The initial value for the kill character is taken to be the
                        terminal's start character.

                stop    If the TELNET TOGGLE-FLOW-CONTROL option has been enabled, then this character is taken to be
                        the terminal's stop character.  The initial value for the kill character is taken to be the
                        terminal's stop character.

                susp    If telnet is in localchars mode, or LINEMODE is enabled, and the suspend character is typed,
                        a TELNET SUSP sequence (see send susp above) is sent to the remote host.  The initial value
                        for the suspend character is taken to be the terminal's suspend character.

                tracefile
                        This is the file to which the output, caused by netdata or option tracing being TRUE, will be
                        written.  If it is set to “-”, then tracing information will be written to standard output
                        (the default).

                worderase
                        If telnet is operating in LINEMODE or “old line by line“ mode, then this character is taken
                        to be the terminal's worderase character.  The initial value for the worderase character is
                        taken to be the terminal's worderase character.

                ?       Displays the legal set (unset) commands.

     slc state  The slc command (Set Local Characters) is used to set or change the state of the the special charac‐
                ters when the TELNET LINEMODE option has been enabled.  Special characters are characters that get
                mapped to TELNET commands sequences (like ip or quit) or line editing characters (like erase and
                kill).  By default, the local special characters are exported.

                check       Verify the current settings for the current special characters.  The remote side is re‐
                            quested to send all the current special character settings, and if there are any discrep‐
                            ancies with the local side, the local side will switch to the remote value.

                export      Switch to the local defaults for the special characters.  The local default characters
                            are those of the local terminal at the time when telnet was started.

                import      Switch to the remote defaults for the special characters.  The remote default characters
                            are those of the remote system at the time when the TELNET connection was established.

                ?           Prints out help information for the slc command.

     status     Show the current status of telnet.  This includes the name of the remote host, if any, as well as the
                current mode.

     toggle arguments ...
                Toggle (between TRUE and FALSE) various flags that control how telnet responds to events.  These
                flags may be set explicitly to TRUE or FALSE using the set and unset commands.  More than one flag
                may be toggled at once.  The state of these flags may be examined with the display command.  Valid
                flags are:

                authdebug     Turns on debugging for the authentication code. This flag only exists if authentication
                              support is enabled.

                autoflush     If autoflush and localchars are both TRUE, then when the ao, or quit characters are
                              recognized (and transformed into TELNET sequences; see set above for details), telnet
                              refuses to display any data on the user's terminal until the remote system acknowledges
                              (via a TELNET TIMING MARK option) that it has processed those TELNET sequences.  The
                              initial value for this toggle is TRUE if the terminal user had not done an "stty
                              noflsh", otherwise FALSE (see stty(1)).

                autodecrypt   When the TELNET ENCRYPT option is negotiated, by default the actual encryption (decryp‐
                              tion) of the data stream does not start automatically.  The autoencrypt (autodecrypt)
                              command states that encryption of the output (input) stream should be enabled as soon
                              as possible.

                              Note that this flag exists only if encryption support is enabled.

                autologin     If the remote side supports the TELNET AUTHENTICATION option, telnet attempts to use it
                              to perform automatic authentication.  If the TELNET AUTHENTICATION option is not sup‐
                              ported, the user's login name is propagated using the TELNET NEW-ENVIRON option.  Set‐
                              ting this flag is the same as specifying the a option to the open command or on the
                              command line.

                autosynch     If autosynch and localchars are both TRUE, then when either the intr or quit characters
                              is typed (see set above for descriptions of the intr and quit characters), the result‐
                              ing telnet sequence sent is followed by the TELNET SYNCH sequence.  This procedure
                              should cause the remote system to begin throwing away all previously typed input until
                              both of the telnet sequences have been read and acted upon.  The initial value of this
                              toggle is FALSE.

                binary        Enable or disable the TELNET BINARY option on both input and output.

                inbinary      Enable or disable the TELNET BINARY option on input.

                outbinary     Enable or disable the TELNET BINARY option on output.

                crlf          If this is TRUE, then carriage returns will be sent as <CR><LF>.  If this is FALSE,
                              then carriage returns will be send as <CR><NUL>.  The initial value for this toggle is
                              FALSE.

                crmod         Toggle carriage return mode.  When this mode is enabled, most carriage return charac‐
                              ters received from the remote host will be mapped into a carriage return followed by a
                              line feed.  This mode does not affect those characters typed by the user, only those
                              received from the remote host.  This mode is not very useful unless the remote host
                              only sends carriage return, but never line feed.  The initial value for this toggle is
                              FALSE.

                debug         Toggles socket level debugging (useful only to the super user).  The initial value for
                              this toggle is FALSE.

                encdebug      Turns on debugging information for the encryption code.  Note that this flag only ex‐
                              ists if encryption support is available.

                localchars    If this is TRUE, then the flush, interrupt, quit, erase, and kill characters (see set
                              above) are recognized locally, and transformed into (hopefully) appropriate TELNET con‐
                              trol sequences (respectively ao, ip, brk, ec, and el; see send above).  The initial
                              value for this toggle is TRUE in “old line by line” mode, and FALSE in “character at a
                              time” mode.  When the LINEMODE option is enabled, the value of localchars is ignored,
                              and assumed to always be TRUE.  If LINEMODE has ever been enabled, then quit is sent as
                              abort, and eof and suspend are sent as eof and susp, see send above).

                netdata       Toggles the display of all network data (in hexadecimal format).  The initial value for
                              this toggle is FALSE.

                options       Toggles the display of some internal telnet protocol processing (having to do with
                              telnet options).  The initial value for this toggle is FALSE.

                prettydump    When the netdata toggle is enabled, if prettydump is enabled the output from the
                              netdata command will be formatted in a more user-readable format.  Spaces are put be‐
                              tween each character in the output, and the beginning of telnet escape sequences are
                              preceded by a '*' to aid in locating them.

                skiprc        When the skiprc toggle is TRUE, telnet does not read the telnetrc files.  The initial
                              value for this toggle is FALSE.

                termdata      Toggles the display of all terminal data (in hexadecimal format).  The initial value
                              for this toggle is FALSE.

                verbose_encrypt
                              When the verbose_encrypt toggle is TRUE, TELNET prints out a message each time encryp‐
                              tion is enabled or disabled.  The initial value for this toggle is FALSE. This flag
                              only exists if encryption support is available.

                ?             Displays the legal toggle commands.

     z          Suspend telnet.  This command only works when the user is using the csh(1).

     ! [command]
                Execute a single command in a subshell on the local system.  If command is omitted, then an interac‐
                tive subshell is invoked.

     ? [command]
                Get help.  With no arguments, telnet prints a help summary.  If a command is specified, telnet will
                print the help information for just that command.

ENVIRONMENT
     Telnet uses at least the HOME, SHELL, DISPLAY, and TERM environment variables.  Other environment variables may
     be propagated to the other side via the TELNET NEW-ENVIRON option.

FILES
     /etc/telnetrc  global telnet startup values
     ~/.telnetrc    user customized telnet startup values

HISTORY
     The Telnet command appeared in 4.2BSD.

NOTES
     On some remote systems, echo has to be turned off manually when in “old line by line” mode.

     In “old line by line” mode or LINEMODE the terminal's eof character is only recognized (and sent to the remote
     system) when it is the first character on a line.

BUGS
     The source code is not comprehensible.

Linux NetKit (0.17)                                August 15, 1999                                Linux NetKit (0.17)

================================================================================

COMMAND: man
MAN(1)                                            Manual pager utils                                           MAN(1)

NAME
       man - an interface to the system reference manuals

SYNOPSIS
       man [man options] [[section] page ...] ...
       man -k [apropos options] regexp ...
       man -K [man options] [section] term ...
       man -f [whatis options] page ...
       man -l [man options] file ...
       man -w|-W [man options] page ...

DESCRIPTION
       man  is the system's manual pager.  Each page argument given to man is normally the name of a program, utility
       or function.  The manual page associated with each of these arguments is then found and displayed.  A section,
       if  provided,  will direct man to look only in that section of the manual.  The default action is to search in
       all of the available sections following a pre-defined order (see DEFAULTS), and to show only  the  first  page
       found, even if page exists in several sections.

       The table below shows the section numbers of the manual followed by the types of pages they contain.

       1   Executable programs or shell commands
       2   System calls (functions provided by the kernel)
       3   Library calls (functions within program libraries)
       4   Special files (usually found in /dev)
       5   File formats and conventions, e.g. /etc/passwd
       6   Games
       7   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7), man-pages(7)
       8   System administration commands (usually only for root)
       9   Kernel routines [Non standard]

       A manual page consists of several sections.

       Conventional  section  names  include  NAME,  SYNOPSIS,  CONFIGURATION, DESCRIPTION, OPTIONS, EXIT STATUS, RE‐
       TURN VALUE, ERRORS, ENVIRONMENT, FILES, VERSIONS, CONFORMING TO, NOTES, BUGS, EXAMPLE, AUTHORS, and SEE ALSO.

       The following conventions apply to the SYNOPSIS section and can be used as a guide in other sections.

       bold text          type exactly as shown.
       italic text        replace with appropriate argument.
       [-abc]             any or all arguments within [ ] are optional.
       -a|-b              options delimited by | cannot be used together.
       argument ...       argument is repeatable.
       [expression] ...   entire expression within [ ] is repeatable.

       Exact rendering may vary depending on the output device.  For instance, man will usually not be able to render
       italics when running in a terminal, and will typically use underlined or coloured text instead.

       The  command  or function illustration is a pattern that should match all possible invocations.  In some cases
       it is advisable to illustrate several exclusive invocations as is shown in the SYNOPSIS section of this manual
       page.

EXAMPLES
       man ls
           Display the manual page for the item (program) ls.

       man man.7
           Display  the manual page for macro package man from section 7.  (This is an alternative spelling of "man 7
           man".)

       man 'man(7)'
           Display the manual page for macro package man from section 7.  (This is another  alternative  spelling  of
           "man  7  man".  It may be more convenient when copying and pasting cross-references to manual pages.  Note
           that the parentheses must normally be quoted to protect them from the shell.)

       man -a intro
           Display, in succession, all of the available intro manual pages contained within the manual.  It is possi‐
           ble to quit between successive displays or skip any of them.

       man -t bash | lpr -Pps
           Format  the  manual  page for bash into the default troff or groff format and pipe it to the printer named
           ps.  The default output for groff is usually PostScript.  man --help should advise as to  which  processor
           is bound to the -t option.

       man -l -Tdvi ./foo.1x.gz > ./foo.1x.dvi
           This command will decompress and format the nroff source manual page ./foo.1x.gz into a device independent
           (dvi) file.  The redirection is necessary as the -T flag causes output to be directed to  stdout  with  no
           pager.   The output could be viewed with a program such as xdvi or further processed into PostScript using
           a program such as dvips.

       man -k printf
           Search the short descriptions and manual page names for the keyword printf as regular  expression.   Print
           out any matches.  Equivalent to apropos printf.

       man -f smail
           Lookup the manual pages referenced by smail and print out the short descriptions of any found.  Equivalent
           to whatis smail.

OVERVIEW
       Many options are available to man in order to give as much flexibility as possible to the user.   Changes  can
       be  made to the search path, section order, output processor, and other behaviours and operations detailed be‐
       low.

       If set, various environment variables are interrogated to determine the operation of man.  It is  possible  to
       set  the "catch-all" variable $MANOPT to any string in command line format, with the exception that any spaces
       used as part of an option's argument must be escaped (preceded by a backslash).  man will parse $MANOPT  prior
       to  parsing  its own command line.  Those options requiring an argument will be overridden by the same options
       found on the command line.  To reset all of the options set in $MANOPT, -D can be  specified  as  the  initial
       command  line  option.   This will allow man to "forget" about the options specified in $MANOPT, although they
       must still have been valid.

       Manual pages are normally stored in nroff(1) format under a directory such as /usr/share/man.  In some instal‐
       lations, there may also be preformatted cat pages to improve performance.  See manpath(5) for details of where
       these files are stored.

       This package supports manual pages in multiple languages, controlled by your locale.  If your system  did  not
       set  this  up for you automatically, then you may need to set $LC_MESSAGES, $LANG, or another system-dependent
       environment variable to indicate your preferred locale, usually specified in the POSIX format:

       <language>[_<territory>[.<character-set>[,<version>]]]

       If the desired page is available in your locale, it will be displayed in lieu of the standard (usually  Ameri‐
       can English) page.

       If you find that the translations supplied with this package are not available in your native language and you
       would like to supply them, please contact the maintainer who will be coordinating such activity.

       Individual manual pages are normally written and maintained by the maintainers of the  program,  function,  or
       other  topic  that  they  document, and are not included with this package.  If you find that a manual page is
       missing or inadequate, please report that to the maintainers of the package in question.

       For information regarding other features and extensions available with this manual pager, please read the doc‐
       uments supplied with the package.

DEFAULTS
       The  order  of sections to search may be overridden by the environment variable $MANSECT or by the SECTION di‐
       rective in /etc/manpath.config.  By default it is as follows:

              1 n l 8 3 0 2 3posix 3pm 3perl 3am 5 4 9 6 7

       The formatted manual page is displayed using a pager.  This can be specified in a number of ways, or else will
       fall back to a default (see option -P for details).

       The filters are deciphered by a number of means.  Firstly, the command line option -p or the environment vari‐
       able $MANROFFSEQ is interrogated.  If -p was not used and the environment variable was not  set,  the  initial
       line of the nroff file is parsed for a preprocessor string.  To contain a valid preprocessor string, the first
       line must resemble

       '\" <string>

       where string can be any combination of letters described by option -p below.

       If none of the above methods provide any filter information, a default set is used.

       A formatting pipeline is formed from the filters and the primary formatter (nroff or [tg]roff with -t) and ex‐
       ecuted.   Alternatively,  if  an  executable program mandb_nfmt (or mandb_tfmt with -t) exists in the man tree
       root, it is executed instead.  It gets passed the manual source file, the preprocessor string, and  optionally
       the device specified with -T or -E as arguments.

OPTIONS
       Non-argument  options  that  are  duplicated either on the command line, in $MANOPT, or both, are not harmful.
       For options that require an argument, each duplication will override the previous argument value.

   General options
       -C file, --config-file=file
              Use this user configuration file rather than the default of ~/.manpath.

       -d, --debug
              Print debugging information.

       -D, --default
              This option is normally issued as the very first option and resets man's behaviour to its default.  Its
              use  is to reset those options that may have been set in $MANOPT.  Any options that follow -D will have
              their usual effect.

       --warnings[=warnings]
              Enable warnings from groff.  This may be used to perform sanity checks on the  source  text  of  manual
              pages.   warnings  is  a  comma-separated  list of warning names; if it is not supplied, the default is
              "mac".  See the “Warnings” node in info groff for a list of available warning names.

   Main modes of operation
       -f, --whatis
              Equivalent to whatis.  Display a short description from the manual page, if available.   See  whatis(1)
              for details.

       -k, --apropos
              Equivalent to apropos.  Search the short manual page descriptions for keywords and display any matches.
              See apropos(1) for details.

       -K, --global-apropos
              Search for text in all manual pages.  This is a brute-force search, and is likely to take some time; if
              you  can,  you should specify a section to reduce the number of pages that need to be searched.  Search
              terms may be simple strings (the default), or regular expressions if the --regex option is used.

              Note that this searches the sources of the manual pages, not the rendered  text,  and  so  may  include
              false positives due to things like comments in source files.  Searching the rendered text would be much
              slower.

       -l, --local-file
              Activate "local" mode.  Format and display local manual files instead of searching through the system's
              manual  collection.   Each manual page argument will be interpreted as an nroff source file in the cor‐
              rect format.  No cat file is produced.  If '-' is listed as one of the arguments, input will  be  taken
              from  stdin.   When this option is not used, and man fails to find the page required, before displaying
              the error message, it attempts to act as if this option was supplied, using the name as a filename  and
              looking for an exact match.

       -w, --where, --path, --location
              Don't  actually  display the manual page, but do print the location of the source nroff file that would
              be formatted.  If the -a option is also used, then print the locations of all source files  that  match
              the search criteria.

       -W, --where-cat, --location-cat
              Don't  actually  display  the  manual page, but do print the location of the preformatted cat file that
              would be displayed.  If the -a option is also used, then print the locations of  all  preformatted  cat
              files that match the search criteria.

              If  -w  and -W are both used, then print both source file and cat file separated by a space.  If all of
              -w, -W, and -a are used, then do this for each possible match.

       -c, --catman
              This option is not for general use and should only be used by the catman program.

       -R encoding, --recode=encoding
              Instead of formatting the manual page in the usual way, output its source converted  to  the  specified
              encoding.   If  you already know the encoding of the source file, you can also use manconv(1) directly.
              However, this option allows you to convert several manual pages to a single encoding without having  to
              explicitly state the encoding of each, provided that they were already installed in a structure similar
              to a manual page hierarchy.

              Consider using man-recode(1) instead for converting multiple manual pages, since it  has  an  interface
              designed for bulk conversion and so can be much faster.

   Finding manual pages
       -L locale, --locale=locale
              man will normally determine your current locale by a call to the C function setlocale(3) which interro‐
              gates various environment variables, possibly including $LC_MESSAGES and $LANG.  To  temporarily  over‐
              ride  the  determined  value,  use this option to supply a locale string directly to man.  Note that it
              will not take effect until the search for pages actually begins.  Output such as the help message  will
              always be displayed in the initially determined locale.

       -m system[,...], --systems=system[,...]
              If this system has access to other operating systems' manual pages, they can be accessed using this op‐
              tion.  To search for a manual page from NewOS's manual page collection, use the option -m NewOS.

              The system specified can be a combination of comma delimited operating  system  names.   To  include  a
              search  of  the  native  operating  system's  manual pages, include the system name man in the argument
              string.  This option will override the $SYSTEM environment variable.

       -M path, --manpath=path
              Specify an alternate manpath to use.  By default, man uses manpath derived code to determine  the  path
              to search.  This option overrides the $MANPATH environment variable and causes option -m to be ignored.

              A  path  specified as a manpath must be the root of a manual page hierarchy structured into sections as
              described in the man-db manual (under "The manual page system").  To view manual pages outside such hi‐
              erarchies, see the -l option.

       -S list, -s list, --sections=list
              The given list is a colon- or comma-separated list of sections, used to determine which manual sections
              to search and in what order.  This option overrides the $MANSECT environment variable.  (The -s  spell‐
              ing is for compatibility with System V.)

       -e sub-extension, --extension=sub-extension
              Some  systems incorporate large packages of manual pages, such as those that accompany the Tcl package,
              into the main manual page hierarchy.  To get around the problem of having two  manual  pages  with  the
              same  name  such as exit(3), the Tcl pages were usually all assigned to section l.  As this is unfortu‐
              nate, it is now possible to put the pages in the correct section, and to assign a specific  "extension"
              to  them,  in this case, exit(3tcl).  Under normal operation, man will display exit(3) in preference to
              exit(3tcl).  To negotiate this situation and to avoid having to know which section the page you require
              resides  in,  it  is  now possible to give man a sub-extension string indicating which package the page
              must belong to.  Using the above example, supplying the option -e tcl to man will restrict  the  search
              to pages having an extension of *tcl.

       -i, --ignore-case
              Ignore case when searching for manual pages.  This is the default.

       -I, --match-case
              Search for manual pages case-sensitively.

       --regex
              Show all pages with any part of either their names or their descriptions matching each page argument as
              a regular expression, as with apropos(1).  Since there is usually no reasonable way to  pick  a  "best"
              page when searching for a regular expression, this option implies -a.

       --wildcard
              Show  all  pages  with any part of either their names or their descriptions matching each page argument
              using shell-style wildcards, as with apropos(1) --wildcard.  The page argument must  match  the  entire
              name or description, or match on word boundaries in the description.  Since there is usually no reason‐
              able way to pick a "best" page when searching for a wildcard, this option implies -a.

       --names-only
              If the --regex or --wildcard option is used, match only page names,  not  page  descriptions,  as  with
              whatis(1).  Otherwise, no effect.

       -a, --all
              By  default,  man will exit after displaying the most suitable manual page it finds.  Using this option
              forces man to display all the manual pages with names that match the search criteria.

       -u, --update
              This option causes man to update its database caches of installed manual pages.  This is only needed in
              rare situations, and it is normally better to run mandb(8) instead.

       --no-subpages
              By  default,  man will try to interpret pairs of manual page names given on the command line as equiva‐
              lent to a single manual page name containing a hyphen or an underscore.  This supports the common  pat‐
              tern of programs that implement a number of subcommands, allowing them to provide manual pages for each
              that can be accessed using similar syntax as would be used to invoke the subcommands  themselves.   For
              example:

                $ man -aw git diff
                /usr/share/man/man1/git-diff.1.gz

              To disable this behaviour, use the --no-subpages option.

                $ man -aw --no-subpages git diff
                /usr/share/man/man1/git.1.gz
                /usr/share/man/man3/Git.3pm.gz
                /usr/share/man/man1/diff.1.gz

   Controlling formatted output
       -P pager, --pager=pager
              Specify  which  output  pager  to use.  By default, man uses pager, falling back to cat if pager is not
              found or is not executable.  This option overrides the $MANPAGER environment variable,  which  in  turn
              overrides the $PAGER environment variable.  It is not used in conjunction with -f or -k.

              The  value  may  be a simple command name or a command with arguments, and may use shell quoting (back‐
              slashes, single quotes, or double quotes).  It may not use pipes to connect multiple commands;  if  you
              need  that,  use a wrapper script, which may take the file to display either as an argument or on stan‐
              dard input.

       -r prompt, --prompt=prompt
              If a recent version of less is used as the pager, man will attempt to set its prompt and some  sensible
              options.  The default prompt looks like

               Manual page name(sec) line x

              where  name  denotes the manual page name, sec denotes the section it was found under and x the current
              line number.  This is achieved by using the $LESS environment variable.

              Supplying -r with a string will override this default.  The string may contain the text  $MAN_PN  which
              will be expanded to the name of the current manual page and its section name surrounded by "(" and ")".
              The string used to produce the default could be expressed as

              \ Manual\ page\ \$MAN_PN\ ?ltline\ %lt?L/%L.:
              byte\ %bB?s/%s..?\ (END):?pB\ %pB\\%..
              (press h for help or q to quit)

              It is broken into three lines here for the sake of readability only.  For its meaning see  the  less(1)
              manual  page.   The  prompt string is first evaluated by the shell.  All double quotes, back-quotes and
              backslashes in the prompt must be escaped by a preceding backslash.  The prompt string may  end  in  an
              escaped $ which may be followed by further options for less.  By default man sets the -ix8 options.

              The $MANLESS environment variable described below may be used to set a default prompt string if none is
              supplied on the command line.

       -7, --ascii
              When viewing a pure ascii(7) manual page on a 7 bit terminal or terminal emulator, some characters  may
              not  display  correctly when using the latin1(7) device description with GNU nroff.  This option allows
              pure ascii manual pages to be displayed in ascii with the latin1 device.  It  will  not  translate  any
              latin1  text.   The following table shows the translations performed: some parts of it may only be dis‐
              played properly when using GNU nroff's latin1(7) device.

              Description           Octal   latin1   ascii
              ─────────────────────────────────────────────
              continuation hyphen    255      ‐        -
              bullet (middle dot)    267      •        o
              acute accent           264      ´        '
              multiplication sign    327      ×        x

              If the latin1 column displays correctly, your terminal may be set up for latin1 characters and this op‐
              tion  is not necessary.  If the latin1 and ascii columns are identical, you are reading this page using
              this option or man did not format this page using the latin1 device description.  If the latin1  column
              is missing or corrupt, you may need to view manual pages with this option.

              This  option  is  ignored  when using options -t, -H, -T, or -Z and may be useless for nroff other than
              GNU's.

       -E encoding, --encoding=encoding
              Generate output for a character encoding other than the default.  For backward compatibility,  encoding
              may  be  an  nroff  device  such as ascii, latin1, or utf8 as well as a true character encoding such as
              UTF-8.

       --no-hyphenation, --nh
              Normally, nroff will automatically hyphenate text at line breaks even in words that do not contain  hy‐
              phens,  if  it is necessary to do so to lay out words on a line without excessive spacing.  This option
              disables automatic hyphenation, so words will only be hyphenated if they already contain hyphens.

              If you are writing a manual page and simply want to prevent nroff from hyphenating a word at  an  inap‐
              propriate point, do not use this option, but consult the nroff documentation instead; for instance, you
              can put "\%" inside a word to indicate that it may be hyphenated at that point,  or  put  "\%"  at  the
              start of a word to prevent it from being hyphenated.

       --no-justification, --nj
              Normally,  nroff will automatically justify text to both margins.  This option disables full justifica‐
              tion, leaving justified only to the left margin, sometimes called "ragged-right" text.

              If you are writing a manual page and simply want to prevent nroff from justifying  certain  paragraphs,
              do  not  use  this  option,  but consult the nroff documentation instead; for instance, you can use the
              ".na", ".nf", ".fi", and ".ad" requests to temporarily disable adjusting and filling.

       -p string, --preprocessor=string
              Specify the sequence of preprocessors to run before nroff or troff/groff.  Not all  installations  will
              have  a  full  set  of preprocessors.  Some of the preprocessors and the letters used to designate them
              are: eqn (e), grap (g), pic (p), tbl (t), vgrind (v), refer (r).  This option overrides the $MANROFFSEQ
              environment variable.  zsoelim is always run as the very first preprocessor.

       -t, --troff
              Use groff -mandoc to format the manual page to stdout.  This option is not required in conjunction with
              -H, -T, or -Z.

       -T[device], --troff-device[=device]
              This option is used to change groff (or possibly troff's) output to be suitable for a device other than
              the  default.   It  implies -t.  Examples (provided with Groff-1.17) include dvi, latin1, ps, utf8, X75
              and X100.

       -H[browser], --html[=browser]
              This option will cause groff to produce HTML output, and will display that output  in  a  web  browser.
              The  choice  of  browser  is  determined  by  the  optional browser argument if one is provided, by the
              $BROWSER environment variable, or by a compile-time default if that is unset (usually lynx).  This  op‐
              tion implies -t, and will only work with GNU troff.

       -X[dpi], --gxditview[=dpi]
              This  option  displays  the output of groff in a graphical window using the gxditview program.  The dpi
              (dots per inch) may be 75, 75-12, 100, or 100-12, defaulting to 75; the -12  variants  use  a  12-point
              base font.  This option implies -T with the X75, X75-12, X100, or X100-12 device respectively.

       -Z, --ditroff
              groff will run troff and then use an appropriate post-processor to produce output suitable for the cho‐
              sen device.  If groff -mandoc is groff, this option is passed to groff and will suppress the use  of  a
              post-processor.  It implies -t.

   Getting help
       -?, --help
              Print a help message and exit.

       --usage
              Print a short usage message and exit.

       -V, --version
              Display version information.

EXIT STATUS
       0      Successful program execution.

       1      Usage, syntax or configuration file error.

       2      Operational error.

       3      A child process returned a non-zero exit status.

       16     At least one of the pages/files/keywords didn't exist or wasn't matched.

ENVIRONMENT
       MANPATH
              If $MANPATH is set, its value is used as the path to search for manual pages.

              See the SEARCH PATH section of manpath(5) for the default behaviour and details of how this environment
              variable is handled.

       MANROFFOPT
              Every time man invokes the formatter (nroff, troff, or groff), it adds the contents of  $MANROFFOPT  to
              the formatter's command line.

       MANROFFSEQ
              If $MANROFFSEQ is set, its value is used to determine the set of preprocessors to pass each manual page
              through.  The default preprocessor list is system dependent.

       MANSECT
              If $MANSECT is set, its value is a colon-delimited list of sections and it is used to  determine  which
              manual  sections to search and in what order.  The default is "1 n l 8 3 0 2 3posix 3pm 3perl 3am 5 4 9
              6 7", unless overridden by the SECTION directive in /etc/manpath.config.

       MANPAGER, PAGER
              If $MANPAGER or $PAGER is set ($MANPAGER is used in preference), its value is used as the name  of  the
              program  used  to  display the manual page.  By default, pager is used, falling back to cat if pager is
              not found or is not executable.

              The value may be a simple command name or a command with arguments, and may use  shell  quoting  (back‐
              slashes,  single  quotes, or double quotes).  It may not use pipes to connect multiple commands; if you
              need that, use a wrapper script, which may take the file to display either as an argument or  on  stan‐
              dard input.

       MANLESS
              If  $MANLESS  is  set, its value will be used as the default prompt string for the less pager, as if it
              had been passed using the -r option (so any occurrences of the text $MAN_PN will  be  expanded  in  the
              same  way).   For  example, if you want to set the prompt string unconditionally to “my prompt string”,
              set $MANLESS to ‘-Psmy prompt string’.  Using the -r option overrides this environment variable.

       BROWSER
              If $BROWSER is set, its value is a colon-delimited list of commands, each of which in turn is  used  to
              try  to  start  a web browser for man --html.  In each command, %s is replaced by a filename containing
              the HTML output from groff, %% is replaced by a single percent sign (%), and %c is replaced by a  colon
              (:).

       SYSTEM If  $SYSTEM  is set, it will have the same effect as if it had been specified as the argument to the -m
              option.

       MANOPT If $MANOPT is set, it will be parsed prior to man's command line and is expected to  be  in  a  similar
              format.   As  all  of the other man specific environment variables can be expressed as command line op‐
              tions, and are thus candidates for being included in $MANOPT it is expected that they will become obso‐
              lete.  N.B.  All spaces that should be interpreted as part of an option's argument must be escaped.

       MANWIDTH
              If  $MANWIDTH  is set, its value is used as the line length for which manual pages should be formatted.
              If it is not set, manual pages will be formatted with a line length appropriate to the current terminal
              (using the value of $COLUMNS, and ioctl(2) if available, or falling back to 80 characters if neither is
              available).  Cat pages will only be saved when the default formatting can be used,  that  is  when  the
              terminal line length is between 66 and 80 characters.

       MAN_KEEP_FORMATTING
              Normally,  when  output  is  not being directed to a terminal (such as to a file or a pipe), formatting
              characters are discarded to make it easier to read the  result  without  special  tools.   However,  if
              $MAN_KEEP_FORMATTING is set to any non-empty value, these formatting characters are retained.  This may
              be useful for wrappers around man that can interpret formatting characters.

       MAN_KEEP_STDERR
              Normally, when output is being directed to a terminal (usually to a pager), any error output  from  the
              command  used  to produce formatted versions of manual pages is discarded to avoid interfering with the
              pager's display.  Programs such as groff often produce relatively minor error messages about typograph‐
              ical  problems such as poor alignment, which are unsightly and generally confusing when displayed along
              with the manual page.  However, some users want to see them anyway, so, if $MAN_KEEP_STDERR is  set  to
              any non-empty value, error output will be displayed as usual.

       MAN_DISABLE_SECCOMP
              On  Linux,  man  normally  confines subprocesses that handle untrusted data using a seccomp(2) sandbox.
              This makes it safer to run complex parsing code over arbitrary manual pages.  If this  goes  wrong  for
              some  reason  unrelated to the content of the page being displayed, you can set $MAN_DISABLE_SECCOMP to
              any non-empty value to disable the sandbox.

       PIPELINE_DEBUG
              If the $PIPELINE_DEBUG environment variable is set to "1", then man will print  debugging  messages  to
              standard error describing each subprocess it runs.

       LANG, LC_MESSAGES
              Depending  on  system and implementation, either or both of $LANG and $LC_MESSAGES will be interrogated
              for the current message locale.  man will display its messages in that locale (if available).  See set‐
              locale(3) for precise details.

FILES
       /etc/manpath.config
              man-db configuration file.

       /usr/share/man
              A global manual page hierarchy.

SEE ALSO
       apropos(1), groff(1), less(1), manpath(1), nroff(1), troff(1), whatis(1), zsoelim(1), manpath(5), man(7), cat‐
       man(8), mandb(8)

       Documentation for some packages may be available in other formats, such as info(1) or HTML.

HISTORY
       1990, 1991 – Originally written by John W. Eaton (jwe@che.utexas.edu).

       Dec   23   1992:   Rik   Faith   (faith@cs.unc.edu)   applied   bug   fixes   supplied   by   Willem   Kasdorp
       (wkasdo@nikhefk.nikef.nl).

       30th  April  1994  – 23rd February 2000: Wilf. (G.Wilford@ee.surrey.ac.uk) has been developing and maintaining
       this package with the help of a few dedicated people.

       30th October 1996 – 30th March 2001: Fabrizio Polacco <fpolacco@debian.org> maintained and enhanced this pack‐
       age for the Debian project, with the help of all the community.

       31st March 2001 – present day: Colin Watson <cjwatson@debian.org> is now developing and maintaining man-db.

BUGS
       https://gitlab.com/cjwatson/man-db/-/issues
       https://savannah.nongnu.org/bugs/?group=man-db

2.10.2                                                2022-03-17                                               MAN(1)

================================================================================

COMMAND: sftp
SFTP(1)                                      BSD General Commands Manual                                      SFTP(1)

NAME
     sftp — OpenSSH secure file transfer

SYNOPSIS
     sftp [-46AaCfNpqrv] [-B buffer_size] [-b batchfile] [-c cipher] [-D sftp_server_path] [-F ssh_config]
          [-i identity_file] [-J destination] [-l limit] [-o ssh_option] [-P port] [-R num_requests] [-S program]
          [-s subsystem | sftp_server] destination

DESCRIPTION
     sftp is a file transfer program, similar to ftp(1), which performs all operations over an encrypted ssh(1)
     transport.  It may also use many features of ssh, such as public key authentication and compression.

     The destination may be specified either as [user@]host[:path] or as a URI in the form
     sftp://[user@]host[:port][/path].

     If the destination includes a path and it is not a directory, sftp will retrieve files automatically if a non-
     interactive authentication method is used; otherwise it will do so after successful interactive authentication.

     If no path is specified, or if the path is a directory, sftp will log in to the specified host and enter inter‐
     active command mode, changing to the remote directory if one was specified.  An optional trailing slash can be
     used to force the path to be interpreted as a directory.

     Since the destination formats use colon characters to delimit host names from path names or port numbers, IPv6
     addresses must be enclosed in square brackets to avoid ambiguity.

     The options are as follows:

     -4      Forces sftp to use IPv4 addresses only.

     -6      Forces sftp to use IPv6 addresses only.

     -A      Allows forwarding of ssh-agent(1) to the remote system.  The default is not to forward an authentication
             agent.

     -a      Attempt to continue interrupted transfers rather than overwriting existing partial or complete copies of
             files.  If the partial contents differ from those being transferred, then the resultant file is likely
             to be corrupt.

     -B buffer_size
             Specify the size of the buffer that sftp uses when transferring files.  Larger buffers require fewer
             round trips at the cost of higher memory consumption.  The default is 32768 bytes.

     -b batchfile
             Batch mode reads a series of commands from an input batchfile instead of stdin.  Since it lacks user in‐
             teraction it should be used in conjunction with non-interactive authentication to obviate the need to
             enter a password at connection time (see sshd(8) and ssh-keygen(1) for details).

             A batchfile of ‘-’ may be used to indicate standard input.  sftp will abort if any of the following com‐
             mands fail: get, put, reget, reput, rename, ln, rm, mkdir, chdir, ls, lchdir, chmod, chown, chgrp, lpwd,
             df, symlink, and lmkdir.

             Termination on error can be suppressed on a command by command basis by prefixing the command with a ‘-’
             character (for example, -rm /tmp/blah*).  Echo of the command may be suppressed by prefixing the command
             with a ‘@’ character.  These two prefixes may be combined in any order, for example -@ls /bsd.

     -C      Enables compression (via ssh's -C flag).

     -c cipher
             Selects the cipher to use for encrypting the data transfers.  This option is directly passed to ssh(1).

     -D sftp_server_path
             Connect directly to a local sftp server (rather than via ssh(1)).  This option may be useful in debug‐
             ging the client and server.

     -F ssh_config
             Specifies an alternative per-user configuration file for ssh(1).  This option is directly passed to
             ssh(1).

     -f      Requests that files be flushed to disk immediately after transfer.  When uploading files, this feature
             is only enabled if the server implements the "fsync@openssh.com" extension.

     -i identity_file
             Selects the file from which the identity (private key) for public key authentication is read.  This op‐
             tion is directly passed to ssh(1).

     -J destination
             Connect to the target host by first making an sftp connection to the jump host described by destination
             and then establishing a TCP forwarding to the ultimate destination from there.  Multiple jump hops may
             be specified separated by comma characters.  This is a shortcut to specify a ProxyJump configuration di‐
             rective.  This option is directly passed to ssh(1).

     -l limit
             Limits the used bandwidth, specified in Kbit/s.

     -N      Disables quiet mode, e.g. to override the implicit quiet mode set by the -b flag.

     -o ssh_option
             Can be used to pass options to ssh in the format used in ssh_config(5).  This is useful for specifying
             options for which there is no separate sftp command-line flag.  For example, to specify an alternate
             port use: sftp -oPort=24.  For full details of the options listed below, and their possible values, see
             ssh_config(5).

                   AddressFamily
                   BatchMode
                   BindAddress
                   BindInterface
                   CanonicalDomains
                   CanonicalizeFallbackLocal
                   CanonicalizeHostname
                   CanonicalizeMaxDots
                   CanonicalizePermittedCNAMEs
                   CASignatureAlgorithms
                   CertificateFile
                   CheckHostIP
                   Ciphers
                   Compression
                   ConnectionAttempts
                   ConnectTimeout
                   ControlMaster
                   ControlPath
                   ControlPersist
                   GlobalKnownHostsFile
                   GSSAPIAuthentication
                   GSSAPIDelegateCredentials
                   HashKnownHosts
                   Host
                   HostbasedAcceptedAlgorithms
                   HostbasedAuthentication
                   HostKeyAlgorithms
                   HostKeyAlias
                   Hostname
                   IdentitiesOnly
                   IdentityAgent
                   IdentityFile
                   IPQoS
                   KbdInteractiveAuthentication
                   KbdInteractiveDevices
                   KexAlgorithms
                   KnownHostsCommand
                   LogLevel
                   MACs
                   NoHostAuthenticationForLocalhost
                   NumberOfPasswordPrompts
                   PasswordAuthentication
                   PKCS11Provider
                   Port
                   PreferredAuthentications
                   ProxyCommand
                   ProxyJump
                   PubkeyAcceptedAlgorithms
                   PubkeyAuthentication
                   RekeyLimit
                   SendEnv
                   ServerAliveInterval
                   ServerAliveCountMax
                   SetEnv
                   StrictHostKeyChecking
                   TCPKeepAlive
                   UpdateHostKeys
                   User
                   UserKnownHostsFile
                   VerifyHostKeyDNS

     -P port
             Specifies the port to connect to on the remote host.

     -p      Preserves modification times, access times, and modes from the original files transferred.

     -q      Quiet mode: disables the progress meter as well as warning and diagnostic messages from ssh(1).

     -R num_requests
             Specify how many requests may be outstanding at any one time.  Increasing this may slightly improve file
             transfer speed but will increase memory usage.  The default is 64 outstanding requests.

     -r      Recursively copy entire directories when uploading and downloading.  Note that sftp does not follow sym‐
             bolic links encountered in the tree traversal.

     -S program
             Name of the program to use for the encrypted connection.  The program must understand ssh(1) options.

     -s subsystem | sftp_server
             Specifies the SSH2 subsystem or the path for an sftp server on the remote host.  A path is useful when
             the remote sshd(8) does not have an sftp subsystem configured.

     -v      Raise logging level.  This option is also passed to ssh.

INTERACTIVE COMMANDS
     Once in interactive mode, sftp understands a set of commands similar to those of ftp(1).  Commands are case in‐
     sensitive.  Pathnames that contain spaces must be enclosed in quotes.  Any special characters contained within
     pathnames that are recognized by glob(3) must be escaped with backslashes (‘\’).

     bye     Quit sftp.

     cd [path]
             Change remote directory to path.  If path is not specified, then change directory to the one the session
             started in.

     chgrp [-h] grp path
             Change group of file path to grp.  path may contain glob(7) characters and may match multiple files.
             grp must be a numeric GID.

             If the -h flag is specified, then symlinks will not be followed.  Note that this is only supported by
             servers that implement the "lsetstat@openssh.com" extension.

     chmod [-h] mode path
             Change permissions of file path to mode.  path may contain glob(7) characters and may match multiple
             files.

             If the -h flag is specified, then symlinks will not be followed.  Note that this is only supported by
             servers that implement the "lsetstat@openssh.com" extension.

     chown [-h] own path
             Change owner of file path to own.  path may contain glob(7) characters and may match multiple files.
             own must be a numeric UID.

             If the -h flag is specified, then symlinks will not be followed.  Note that this is only supported by
             servers that implement the "lsetstat@openssh.com" extension.

     df [-hi] [path]
             Display usage information for the filesystem holding the current directory (or path if specified).  If
             the -h flag is specified, the capacity information will be displayed using "human-readable" suffixes.
             The -i flag requests display of inode information in addition to capacity information.  This command is
             only supported on servers that implement the “statvfs@openssh.com” extension.

     exit    Quit sftp.

     get [-afpR] remote-path [local-path]
             Retrieve the remote-path and store it on the local machine.  If the local path name is not specified, it
             is given the same name it has on the remote machine.  remote-path may contain glob(7) characters and may
             match multiple files.  If it does and local-path is specified, then local-path must specify a directory.

             If the -a flag is specified, then attempt to resume partial transfers of existing files.  Note that re‐
             sumption assumes that any partial copy of the local file matches the remote copy.  If the remote file
             contents differ from the partial local copy then the resultant file is likely to be corrupt.

             If the -f flag is specified, then fsync(2) will be called after the file transfer has completed to flush
             the file to disk.

             If the -p flag is specified, then full file permissions and access times are copied too.

             If the -R flag is specified then directories will be copied recursively.  Note that sftp does not follow
             symbolic links when performing recursive transfers.

     help    Display help text.

     lcd [path]
             Change local directory to path.  If path is not specified, then change directory to the local user's
             home directory.

     lls [ls-options [path]]
             Display local directory listing of either path or current directory if path is not specified.
             ls-options may contain any flags supported by the local system's ls(1) command.  path may contain
             glob(7) characters and may match multiple files.

     lmkdir path
             Create local directory specified by path.

     ln [-s] oldpath newpath
             Create a link from oldpath to newpath.  If the -s flag is specified the created link is a symbolic link,
             otherwise it is a hard link.

     lpwd    Print local working directory.

     ls [-1afhlnrSt] [path]
             Display a remote directory listing of either path or the current directory if path is not specified.
             path may contain glob(7) characters and may match multiple files.

             The following flags are recognized and alter the behaviour of ls accordingly:

             -1      Produce single columnar output.

             -a      List files beginning with a dot (‘.’).

             -f      Do not sort the listing.  The default sort order is lexicographical.

             -h      When used with a long format option, use unit suffixes: Byte, Kilobyte, Megabyte, Gigabyte, Ter‐
                     abyte, Petabyte, and Exabyte in order to reduce the number of digits to four or fewer using pow‐
                     ers of 2 for sizes (K=1024, M=1048576, etc.).

             -l      Display additional details including permissions and ownership information.

             -n      Produce a long listing with user and group information presented numerically.

             -r      Reverse the sort order of the listing.

             -S      Sort the listing by file size.

             -t      Sort the listing by last modification time.

     lumask umask
             Set local umask to umask.

     mkdir path
             Create remote directory specified by path.

     progress
             Toggle display of progress meter.

     put [-afpR] local-path [remote-path]
             Upload local-path and store it on the remote machine.  If the remote path name is not specified, it is
             given the same name it has on the local machine.  local-path may contain glob(7) characters and may
             match multiple files.  If it does and remote-path is specified, then remote-path must specify a direc‐
             tory.

             If the -a flag is specified, then attempt to resume partial transfers of existing files.  Note that re‐
             sumption assumes that any partial copy of the remote file matches the local copy.  If the local file
             contents differ from the remote local copy then the resultant file is likely to be corrupt.

             If the -f flag is specified, then a request will be sent to the server to call fsync(2) after the file
             has been transferred.  Note that this is only supported by servers that implement the
             "fsync@openssh.com" extension.

             If the -p flag is specified, then full file permissions and access times are copied too.

             If the -R flag is specified then directories will be copied recursively.  Note that sftp does not follow
             symbolic links when performing recursive transfers.

     pwd     Display remote working directory.

     quit    Quit sftp.

     reget [-fpR] remote-path [local-path]
             Resume download of remote-path.  Equivalent to get with the -a flag set.

     reput [-fpR] local-path [remote-path]
             Resume upload of local-path.  Equivalent to put with the -a flag set.

     rename oldpath newpath
             Rename remote file from oldpath to newpath.

     rm path
             Delete remote file specified by path.

     rmdir path
             Remove remote directory specified by path.

     symlink oldpath newpath
             Create a symbolic link from oldpath to newpath.

     version
             Display the sftp protocol version.

     !command
             Execute command in local shell.

     !       Escape to local shell.

     ?       Synonym for help.

SEE ALSO
     ftp(1), ls(1), scp(1), ssh(1), ssh-add(1), ssh-keygen(1), ssh_config(5), glob(7), sftp-server(8), sshd(8)

     T. Ylonen and S. Lehtinen, SSH File Transfer Protocol, draft-ietf-secsh-filexfer-00.txt, January 2001, work in
     progress material.

BSD                                                  July 2, 2021                                                 BSD

================================================================================

